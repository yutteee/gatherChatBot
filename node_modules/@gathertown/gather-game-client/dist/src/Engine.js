"use strict";
/*

Be careful changing this file! Please talk to the Engine Team/get them to review

*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.Engine = void 0;
var gather_game_common_1 = require("@gathertown/gather-game-common");
var Utils_1 = require("./Utils");
// TODO: sync with server, maybe
var HEARTBEAT_INTERVAL = 10000;
var HEARTBEAT_TIMEOUT = 30000;
var INITIAL_RECONNECT_DELAY = 1000;
var MAX_RECONNECT_DELAY = 15000; // max time to wait before trying to connect again. actually can be at most double this
var RESET_RECONNECT_ATTEMPTS_DELAY = 60000; // have to be connected for 30 seconds to be considered a successfull reconnect
var Engine = /** @class */ (function () {
    // Params
    // ------
    // getAuth: A function that returns an auth token/key that the Engine should
    //   use to authenticate itself with the game server.
    function Engine(getAuth, getGameServerUrl, spaceId) {
        this.serverURL = "";
        this._connected = false;
        this._sendQ = [];
        this._textDecoder = new TextDecoder();
        this._textDecoderUtf8 = new TextDecoder("utf-8");
        this._textEncoder = new TextEncoder();
        this._heartbeatInterval = 0; // number or Timeout, depending on browser vs. node
        this._reconnectTimer = 0; // number or Timeout, depending on browser vs. node
        this._reconnectionAttempts = 0;
        this._resetReconnectionAttemptsTimer = 0; // number or Timeout, depending on browser vs. node
        this._lastHeartbeat = Infinity;
        // Stats
        this._latencies = new Utils_1.SlidingWindow(10);
        this._errorsCount = 0;
        this._successfulReconnectionsCount = 0;
        this._reconnectStartTime = 0;
        this._successfulReconnectsCount = 0;
        this._timeSpentDisconnected = new Utils_1.SlidingWindow(10);
        this.getAuth = getAuth;
        this.getGameServerUrl = getGameServerUrl;
        this.spaceId = spaceId;
    }
    /* to be overridden by user */
    Engine.prototype.onevent = function (_e) { };
    Engine.prototype.onconnect = function () { };
    Engine.prototype.ondisconnect = function () { };
    Engine.prototype.onreconnected = function (_) { };
    Engine.prototype.onlatency = function (_) { };
    Engine.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        _a = this;
                        return [4 /*yield*/, this.getGameServerUrl(this.spaceId)];
                    case 1:
                        _a.serverURL = _b.sent();
                        this._connect(this.serverURL);
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        console.debug("Error starting game engine:", e_1);
                        this._reconnect();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Engine.prototype.destroy = function () {
        this.ondisconnect();
        this.onconnect = function () { };
        this.ondisconnect = function () { };
        this.onreconnected = function () { };
        this.onlatency = function () { };
        this._destroyInternal();
    };
    Engine.prototype._connect = function (endpoint) {
        return __awaiter(this, void 0, void 0, function () {
            var auth;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAuth()];
                    case 1:
                        auth = _a.sent();
                        // connect to server
                        try {
                            this.ws = new WebSocket(endpoint, "gather-v2");
                        }
                        catch (e) {
                            console.error("Failed to create websocket connection to gameserver: " + endpoint, e);
                            this._reconnect();
                            return [2 /*return*/];
                        }
                        this.ws.binaryType = "arraybuffer";
                        // check for disconnections
                        this._lastHeartbeat = Date.now();
                        this._heartbeatInterval = setInterval(function () {
                            var _a;
                            if (_this._lastHeartbeat < Date.now() - HEARTBEAT_TIMEOUT) {
                                (_a = _this.ws) === null || _a === void 0 ? void 0 : _a.close(gather_game_common_1.GameWsCloseCode.CONN_TIMED_OUT, "Game Server timed out. No heartbeat since " + new Date(_this._lastHeartbeat));
                            }
                        }, HEARTBEAT_INTERVAL);
                        // when created, initialize with our auth token
                        this.ws.onopen = function () {
                            if (_this.ws == null) {
                                // never actually happens, just for TS to be happy
                                console.error("something is very wrong, ws is null after open");
                                return;
                            }
                            // kind of annoying, we have to send this before onconnect
                            _this.sendAction({
                                $case: "init",
                                init: {
                                    spaceId: _this.spaceId,
                                    auth: "token" in auth
                                        ? { $case: "token", token: auth.token }
                                        : { $case: "apiKey", apiKey: auth.apiKey }
                                }
                            }, true);
                            _this.onconnect();
                            if (_this._reconnectStartTime) {
                                var timeSpentDisconnectedMs_1 = Date.now() - _this._reconnectStartTime;
                                // Reset the reconnection attempt after a few seconds
                                // to avoid when user connects and disconnects
                                // this will get cancelled if it disconnects before thie timeout goes off
                                _this._resetReconnectionAttemptsTimer = setTimeout(function () {
                                    _this._reconnectionAttempts = 0;
                                    // If the client has connected for a few seconds,
                                    // this counts as a reconnection so track it.
                                    _this._successfulReconnectsCount += 1;
                                    _this._timeSpentDisconnected.push(timeSpentDisconnectedMs_1);
                                    _this._reconnectStartTime = 0;
                                    _this.onreconnected(timeSpentDisconnectedMs_1);
                                }, RESET_RECONNECT_ATTEMPTS_DELAY);
                            }
                            _this._onmessageSetup();
                        };
                        this.ws.onclose = function (event) {
                            _this._connected = false;
                            console.log("Web socket on close, about to call disconnect: close code " + event.code + " reason " + event.reason + " value " + event.returnValue);
                            switch (event.code) {
                                case gather_game_common_1.GameWsCloseCode.SPACE_AT_CAPACITY:
                                    console.log("Space is currently at capacity, please try again later");
                                    break;
                                case gather_game_common_1.GameWsCloseCode.PROTOCOL_ERROR:
                                    console.error("ws closed: protocol error. " + event.reason);
                                    if (typeof window !== "undefined") {
                                        window.location.reload();
                                    }
                                    // TODO: else extension, restart or something intelligent, don't just ignore it
                                    break;
                                case gather_game_common_1.GameWsCloseCode.INTERNAL_ERROR:
                                    console.warn("connection closed due to internal server error:", event);
                                    if (typeof window !== "undefined") {
                                        window.location.reload();
                                    }
                                    break;
                                case gather_game_common_1.GameWsCloseCode.CLIENT_KICKED:
                                    console.warn("connection closed due to client being kicked");
                                    if (typeof window !== "undefined") {
                                        window.location.reload();
                                    }
                                    break;
                                case gather_game_common_1.GameWsCloseCode.UNAUTHORIZED:
                                    console.warn("connection closed because user does not have access");
                                    // reload because the FE will show them a nice landing screen instead
                                    if (typeof window !== "undefined") {
                                        window.location.reload();
                                    }
                                    break;
                                case gather_game_common_1.GameWsCloseCode.NO_STATUS_RECEIVED:
                                    console.warn("connection closed unexpectedly with no status:", event);
                                    _this._reconnect();
                                    break;
                                default:
                                    console.warn("connection closed with unrecognized non-default code:", event);
                                    _this._reconnect();
                            }
                            _this.ondisconnect();
                        };
                        this.ws.onerror = function (e) {
                            console.log("game server error", e);
                            _this._errorsCount += 1;
                        };
                        return [2 /*return*/];
                }
            });
        });
    };
    Engine.prototype._onmessageSetup = function () {
        var _this = this;
        if (this.ws == null) {
            return;
        } // never actually happens, just for TS to be happy
        console.log("starting with new interface:", this.ws.protocol);
        // handle messages
        this.ws.onmessage = function (msg) {
            var data = new Uint8Array(msg.data);
            try {
                var events = gather_game_common_1.ServerClientBatch.decode(data).events;
                _this._lastHeartbeat = Date.now(); // if we get any message, it means the server is alive
                events.forEach(function (serverClientEvent) {
                    var event = serverClientEvent.event;
                    if (!event) {
                        console.error("Nullish server client event; this shouldn't happen! ", serverClientEvent);
                        return;
                    }
                    switch (event.$case) {
                        case "serverHeartbeat":
                            _this.sendAction({
                                $case: "clientHeartbeat",
                                clientHeartbeat: {}
                            });
                            if (event.serverHeartbeat.lastRTT) {
                                _this._latencies.push(event.serverHeartbeat.lastRTT / 2);
                                _this.onlatency(_this._latencies.getMetrics());
                            }
                            break;
                        case "ready":
                            _this._connected = true;
                            _this._sendQ.forEach(function (m) {
                                _this.sendAction(m);
                            });
                            _this._sendQ = [];
                            break;
                        case "info":
                            console.log("[info from gs]", event.info.message);
                            break;
                        case "warn":
                            console.warn("[warn from gs]", event.warn.message);
                            break;
                        case "error":
                            console.error("[error from gs] " + event.error.code + ":", event.error.message);
                            // TODO later: do different things with different error codes, when they actually have meanings assigned
                            break;
                        default:
                            _this.onevent(serverClientEvent);
                    }
                });
            }
            catch (e) {
                console.warn("Failed to process event with error:", e);
            }
        };
    };
    Engine.prototype._destroyInternal = function () {
        clearInterval(this._heartbeatInterval);
        clearTimeout(this._reconnectTimer);
        this._reconnectTimer = null;
        clearTimeout(this._resetReconnectionAttemptsTimer);
        this._resetReconnectionAttemptsTimer = null;
        if (this.ws) {
            this.ws.onclose = function () { };
            this.ws.close();
            this.ws = undefined;
        }
    };
    Engine.prototype.sendAction = function (action, bypass) {
        var _a;
        if (bypass === void 0) { bypass = false; }
        if (!this._connected && !bypass) {
            this._sendQ.push(action);
            return;
        }
        try {
            var serializedAction = gather_game_common_1.ClientServerAction.encode({
                action: action
            }).finish();
            (_a = this.ws) === null || _a === void 0 ? void 0 : _a.send(serializedAction);
        }
        catch (e) {
            console.warn("websocket send error", e);
        }
    };
    Engine.prototype._reconnect = function () {
        var _this = this;
        if (this._reconnectTimer) {
            return;
        }
        if (this._reconnectionAttempts === 0) {
            this._reconnectStartTime = Date.now();
        }
        // Exponential backoff and Jitter per https://stripe.com/blog/idempotency
        // Clear reset timer since we are trying to reconnect
        clearInterval(this._resetReconnectionAttemptsTimer);
        this._resetReconnectionAttemptsTimer = null;
        // Apply exponential backoff with INITIAL_RECONNECT_DELAY on the
        // number of attempts so far as inputs. Do not allow the number to exceed
        // MAX_RECONNECT_DELAY
        var reconnectDelay = Math.min(INITIAL_RECONNECT_DELAY * Math.pow(2, (this._reconnectionAttempts - 1)), MAX_RECONNECT_DELAY);
        // Apply some jitter by randomizing the value in the range of (reconnectDelay / 2 to (reconnectDelay).
        reconnectDelay = reconnectDelay * (0.5 * (1 + Math.random()));
        // But never delay less than INITIAL_RECONNECT_DELAY
        reconnectDelay = Math.max(INITIAL_RECONNECT_DELAY, reconnectDelay);
        this._reconnectionAttempts++;
        this._reconnectTimer = setTimeout(function () {
            _this._destroyInternal();
            _this.start();
        }, reconnectDelay);
    };
    Engine.prototype.getMetrics = function () {
        return {
            latency: this._latencies.getMetrics(),
            reconnects: {
                timeSpentDisconnectedMs: this._timeSpentDisconnected.getMetrics(),
                count: this._successfulReconnectsCount
            },
            errors: {
                count: this._errorsCount
            }
        };
    };
    return Engine;
}());
exports.Engine = Engine;
//# sourceMappingURL=Engine.js.map