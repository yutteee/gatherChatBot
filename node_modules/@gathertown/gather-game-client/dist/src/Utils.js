"use strict";
exports.__esModule = true;
exports.SlidingWindow = exports.isBrowser = void 0;
exports.isBrowser = typeof window !== "undefined";
var SlidingWindow = /** @class */ (function () {
    function SlidingWindow(maxSize) {
        this.values = [];
        this.maxSize = maxSize;
    }
    SlidingWindow.prototype.push = function (value) {
        this._lastValue = value;
        this.values.push(value);
        if (this.values.length > this.maxSize) {
            this.values.shift();
        }
        if (typeof this._minValue === "undefined" || value < this._minValue) {
            this._minValue = value;
        }
        if (typeof this._maxValue === "undefined" || value > this._maxValue) {
            this._maxValue = value;
        }
    };
    SlidingWindow.prototype.getLast = function () {
        return this._lastValue;
    };
    SlidingWindow.prototype.getAverage = function () {
        if (!this.values.length) {
            return undefined;
        }
        var avg = this.values.reduce(function (acc, v) { return v + acc; }, 0) / this.values.length;
        return parseFloat(avg.toFixed(2));
    };
    SlidingWindow.prototype.getMin = function () {
        if (!this._minValue) {
            return undefined;
        }
        return parseFloat(this._minValue.toFixed(2));
    };
    SlidingWindow.prototype.getMax = function () {
        var _a;
        if (!this._maxValue) {
            return undefined;
        }
        return parseFloat((_a = this._maxValue) === null || _a === void 0 ? void 0 : _a.toFixed(2));
    };
    SlidingWindow.prototype.getMetrics = function () {
        return {
            max: this.getMax() || -1,
            avg: this.getAverage() || -1,
            min: this.getMin() || -1,
            last: this.getLast() || -1
        };
    };
    return SlidingWindow;
}());
exports.SlidingWindow = SlidingWindow;
//# sourceMappingURL=Utils.js.map