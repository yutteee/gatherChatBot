import { ClientServerActionAction, ServerClientEvent } from "@gathertown/gather-game-common";
import { SlidingWindow, SlidingWindowMetrics } from "./Utils";
export declare type EngineAuth = {
    token: string;
} | {
    apiKey: string;
};
export interface GameEngineMetrics {
    latency: {
        min: number;
        avg: number;
        max: number;
        last: number;
    };
    reconnects: {
        timeSpentDisconnectedMs: {
            min: number;
            avg: number;
            max: number;
            last: number;
        };
        count: number;
    };
    errors: {
        count: number;
    };
}
export declare class Engine {
    ws?: WebSocket;
    serverURL: string;
    getAuth: () => Promise<EngineAuth>;
    getGameServerUrl: (space: string) => Promise<string>;
    spaceId: string;
    _connected: boolean;
    _sendQ: ClientServerActionAction[];
    _textDecoder: TextDecoder;
    _textDecoderUtf8: TextDecoder;
    _textEncoder: TextEncoder;
    _heartbeatInterval: any;
    _reconnectTimer: any;
    _reconnectionAttempts: number;
    _resetReconnectionAttemptsTimer: any;
    _lastHeartbeat: number;
    _latencies: SlidingWindow;
    _errorsCount: number;
    _successfulReconnectionsCount: number;
    _reconnectStartTime: number;
    _successfulReconnectsCount: number;
    _timeSpentDisconnected: SlidingWindow;
    onevent(_e: ServerClientEvent): void;
    onconnect(): void;
    ondisconnect(): void;
    onreconnected(_: number): void;
    onlatency(_: SlidingWindowMetrics): void;
    constructor(getAuth: () => Promise<EngineAuth>, getGameServerUrl: (space: string) => Promise<string>, spaceId: string);
    start(): Promise<void>;
    destroy(): void;
    _connect(endpoint: string): Promise<void>;
    _onmessageSetup(): void;
    _destroyInternal(): void;
    sendAction(action: ClientServerActionAction, bypass?: boolean): void;
    _reconnect(): void;
    getMetrics(): GameEngineMetrics;
}
