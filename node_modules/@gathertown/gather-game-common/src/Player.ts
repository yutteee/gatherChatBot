import { Position, manhattanDistance } from "./Position";

export type Player = {
  x: number;
  y: number;
  direction: SpriteDirection;
  name: string;
  affiliation: string;
  sprite: number;
  ghost: number;
  map: string;
  spotlighted: number;
  emote: Emote;
  workCondition: number;
  activelySpeaking: number;
  lastActive: string;
  busy: boolean;
  textStatus: string;
  emojiStatus: string;
  lastInputId: number;
  whisperId: string;
  isSignedIn: boolean;
  outfitString: string; // todo @a-lchen fix this when we can
  eventStatus: string;
  inConversation: boolean;
  currentDesk: string;
  currentArea: string;
  goKartId: string;
};

import {
  SpriteDirectionEnum_ENUM as SpriteDirection,
  MoveDirectionEnum_ENUM as MoveDirection,
  EmoteEnum_ENUM as Emote,
} from "./generated_DO_NOT_TOUCH/events";
export { SpriteDirection, MoveDirection, Emote };

export const EMOTE_EMOJIS = {
  [Emote.Wave]: "👋",
  [Emote.Heart]: "❤️",
  [Emote.PartyPopper]: "🎉",
  [Emote.ThumbsUp]: "👍",
  [Emote.QuestionMark]: "❓",
  [Emote.RaisedHand]: "✋",
};

export const EMOTE_SHORTCUTS = {
  [Emote.Wave]: "1",
  [Emote.Heart]: "2",
  [Emote.PartyPopper]: "3",
  [Emote.ThumbsUp]: "4",
  [Emote.QuestionMark]: "5",
  [Emote.RaisedHand]: "6",
};

export const TEMPORARY_EMOTES = [
  Emote.Heart,
  Emote.PartyPopper,
  Emote.QuestionMark,
  Emote.ThumbsUp,
  Emote.Wave,
];

export function oppositeMoveDirection(direction: MoveDirection): MoveDirection | null {
  switch (direction) {
    case MoveDirection.Left:
      return MoveDirection.Right;
    case MoveDirection.Right:
      return MoveDirection.Left;
    case MoveDirection.Up:
      return MoveDirection.Down;
    case MoveDirection.Down:
      return MoveDirection.Up;
    default:
      return null;
  }
}

export const positionAfterMove = (
  start: Position,
  dir: MoveDirection | null,
  dist = 1,
): Position => {
  const { x, y } = start;
  switch (dir) {
    case MoveDirection.Left:
      return { x: x - dist, y };
    case MoveDirection.Right:
      return { x: x + dist, y };
    case MoveDirection.Up:
      return { x, y: y - dist };
    case MoveDirection.Down:
      return { x, y: y + dist };
    default:
      return start;
  }
};

// Returns the next SpriteDirection to use after applying the given MoveDirection.
export function nextSpriteDirection(
  current: SpriteDirection,
  direction: MoveDirection,
): SpriteDirection {
  if (direction === MoveDirection.Left && current === SpriteDirection.Left) {
    return SpriteDirection.LeftAlt;
  } else if (direction === MoveDirection.Right && current === SpriteDirection.Right) {
    return SpriteDirection.RightAlt;
  } else if (direction === MoveDirection.Up && current === SpriteDirection.Up) {
    return SpriteDirection.UpAlt;
  } else if (direction === MoveDirection.Down && current === SpriteDirection.Down) {
    return SpriteDirection.DownAlt;
  } else if (direction === MoveDirection.Dance && current === SpriteDirection.Dance1) {
    return SpriteDirection.Dance2;
  } else if (direction === MoveDirection.Dance && current === SpriteDirection.Dance2) {
    return SpriteDirection.Dance3;
  } else if (direction === MoveDirection.Dance && current === SpriteDirection.Dance3) {
    return SpriteDirection.Dance4;
  } else if (direction === MoveDirection.Left) {
    return SpriteDirection.Left;
  } else if (direction === MoveDirection.Right) {
    return SpriteDirection.Right;
  } else if (direction === MoveDirection.Up) {
    return SpriteDirection.Up;
  } else if (direction === MoveDirection.Down) {
    return SpriteDirection.Down;
  } else if (direction === MoveDirection.Dance) {
    return SpriteDirection.Dance1;
  }
  return current;
}

// direction for player to face target when next to eachother
export function directionToFacePlayer(player: Player, target: Player): MoveDirection | null {
  if (manhattanDistance(player, target) !== 1) {
    return null;
  }
  if (player.x - target.x === 1) {
    return MoveDirection.Left;
  } else if (player.x - target.x === -1) {
    return MoveDirection.Right;
  } else if (player.y - target.y === 1) {
    return MoveDirection.Up;
  } else if (player.y - target.y === -1) {
    return MoveDirection.Down;
  }
  return null;
}

// whisperId is either in format #XXXXXX or a uuid4
export function whisperIdToColor(id: string): string {
  if (id.length === 7) {
    return id;
  }
  return "#" + id.slice(0, 6);
}
