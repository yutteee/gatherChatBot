syntax = "proto3";

/************************* READ ME before modifying! *****************************

** High level **
- everything is an event
- static, isolated message types
- no breaking changes
- this is the source of truth for the Types of things that cross the wire

** How to change this file **
changes which are safe (non-breaking)
- adding a new message type/action/event
- adding a new field to a message type
- changing the name of a field, but NOT type or number
changes which are NOT safe, and require review from Nate
- changing a field number or type (including marking it optional)
- deleting a field or message type

That's it. Go wild. They're all isolated, like http server endpoints, so having a bajillion is harmless.


Annoying details:
- if there are ever merge conflicts in the generated files, just run `npm run protoc` again. this file is the source of truth
- if you change this file, you MUST deploy the game server before the client,
    otherwise the client will try to subscribe to unknown event types and fail

(*TODO @Nate: add note on how to actually deprecate stuff later)


** For the full philosophy, reasoning, and details, see:
   https://www.notion.so/Engine-Interface-34c3b7fe1fcb4d23910f181f76352dfe

*********************************************************************************/

// ************************************************************************************* //
//
//                                 shared types                                          //
//
// ************************************************************************************* //

message SpriteDirectionEnum {
  enum ENUM {
    Stand = 0;
    Down = 1;
    DownAlt = 2;
    Up = 3;
    UpAlt = 4;
    Left = 5;
    LeftAlt = 6;
    Right = 7;
    RightAlt = 8;
    Dance1 = 9;
    Dance2 = 10;
    Dance3 = 11;
    Dance4 = 12;
  }
}

message MoveDirectionEnum {
  enum ENUM {
    Left = 0;
    Right = 1;
    Up = 2;
    Down = 3;
    Dance = 4;
  }
}

message EmoteEnum {
  enum ENUM {
    None = 0;
    Wave = 1;
    Heart = 2;
    PartyPopper = 3;
    ThumbsUp = 4;
    QuestionMark = 5;
    RaisedHand = 6;
  }
}

message InteractionEnum {
  enum ENUM {
    NONE = 0;
    EMBEDDED_WEBSITE = 1;
    POSTER = 2;
    VIDEO = 3;
    EXTERNAL_CALL = 4;
    EXTENSION = 5;
    NOTE = 6;
    MODAL_EXTENSION = 7;
    COMPONENT_MODAL = 8;
  }
}

message SpaceUserInfo {
  optional string name = 1;
  optional uint32 avatar = 2;
  optional uint32 x = 3;
  optional uint32 y = 4;
  optional string map = 5;
  optional string affiliation = 6;
  optional bool busy = 7;
  optional string textStatus = 8;
  optional string emojiStatus = 9;
  optional DBOutfit currentlyEquippedWearables = 10;
}

message DBOutfit {
  string skin = 1;
  string hair = 2;
  string facial_hair = 3;
  string top = 4;
  string bottom = 5;
  string shoes = 6;
  string hat = 7;
  string glasses = 8;
  string other = 9;
}

message WireObject {
  optional string templateId = 1;
  optional string _name = 2;
  repeated string _tags = 3; // repeated is inherently optional
  optional uint32 x = 4;
  optional uint32 y = 5;
  optional uint32 offsetX = 6;
  optional uint32 offsetY = 7;
  optional string color = 8;
  optional uint32 orientation = 9;
  optional string normal = 10;
  optional string highlighted = 11;
  optional InteractionEnum.ENUM type = 12;
  optional uint32 width = 13;
  optional uint32 height = 14;
  optional string extensionClass = 15;
  optional string previewMessage = 16;
  optional uint32 distThreshold = 17;
  optional string propertiesJson = 18;
  optional Sound sound = 19;
  optional ObjectTime objectStartTime = 20;
  optional ObjectTime objectExpireTime = 21;
  optional string id = 22;
  optional string customState = 23; 
}

message Sound {
  string src = 1;
  float volume = 2;
  bool loop = 3;
  uint32 maxDistance = 4;
}

message ObjectTime {
  uint32 _seconds = 1;
}

message Space {
  string spaceId = 1;
  uint32 x = 2;
  uint32 y = 3;
  optional bool colored = 4;
}

message Point {
  uint32 x = 1;
  uint32 y = 2;
}

message SpawnPoint {
  uint32 x = 1;
  uint32 y = 2;
  optional string spawnId = 3;
}

message Portal {
  uint32 x = 1;
  uint32 y = 2;
  optional string targetMap = 3;
  optional string targetUrl = 4;
  optional uint32 targetX = 5;
  optional uint32 targetY = 6;
}

message Announcer {
  uint32 x = 1;
  uint32 y = 2;
}

// deprecating
message Asset {
  uint32 x = 1;
  uint32 y = 2;
  string src = 3;
  uint32 width = 4;
  uint32 height = 5;
  optional bool inFront = 6;
}

// deprecating
message AudioEmitter {
  uint32 x = 1;
  uint32 y = 2;
  string path = 3;
  repeated float volume = 4;
}

// deprecating
message Animation {
  uint32 x = 1;
  uint32 y = 2;
  uint32 framegap = 3;
  repeated string frames = 4;
}

message AreaPosition {
  uint32 x1 = 1;
  uint32 y1 = 2;
  uint32 x2 = 3;
  uint32 y2 = 4;
}

message Area {
  string categories = 1;
  repeated AreaPosition coords = 2;
}

message MapSetDimensions {
  string mapId = 1;
  uint32 width = 2;
  uint32 height = 3;
}

message MapSetCollisions {
  string mapId = 1;
  uint32 x = 2;
  uint32 y = 3;
  uint32 w = 4;
  uint32 h = 5;
  string mask = 6; // base64 encoded string
}

message MapSetBackgroundImagePath {
  string mapId = 1;
  string backgroundImagePath = 2; // url
}

message MapSetForegroundImagePath {
  string mapId = 1;
  string foregroundImagePath = 2;
  optional bool delete = 3;
}

message MapSetSprites {
  string mapId = 1;
  repeated uint32 sprites = 2;
  optional bool delete = 3;
}

message MapSetSpaces {
  string mapId = 1;
  repeated Space spaces = 2; 
}

message MapSetSpawn {
  string mapId = 1;
  Point spawn = 2;
  optional bool delete = 3;
}

message MapSetSpawns {
  string mapId = 1;
  repeated SpawnPoint spawns = 2; 
}

message MapSetPortals {
  string mapId = 1;
  repeated Portal portals = 2;
}

message MapSetAnnouncer {
  string mapId = 1;
  repeated Announcer announcer = 2;
}

// deprecating
message MapSetAudio {
  string mapId = 1;
  repeated AudioEmitter audio = 2;
  optional bool delete = 3;
}

// deprecating
message MapSetAnimations {
  string mapId = 1;
  repeated Animation animations = 2;
  optional bool delete = 3;
}

// deprecating
message MapSetAssets {
  string mapId = 1;
  repeated Asset assets = 2;
  optional bool delete = 3;
}

message MapSetObjects {
  string mapId = 1;
  map<uint32, WireObject> objects = 2;
}

message MapSetName {
  string mapId = 1;
  string name = 2;
  optional bool delete = 3;
}

message MapSetDefaultChat {
  string mapId = 1;
  string defaultChat = 2;
  optional bool delete = 3;
}

message MapSetMuteOnEntry {
  string mapId = 1;
  bool muteOnEntry = 2;
  optional bool delete = 3;
}

message MapSetUseDrawnBG {
  string mapId = 1;
  bool useDrawnBG = 2;
  optional bool delete = 3;
}

message MapSetWalls {
  string mapId = 1;
  map<string, string> walls = 2;
  optional bool delete = 3;
}

message MapSetFloors {
  string mapId = 1;
  map<string, string> floors = 2;
  optional bool delete = 3;
}

message MapSetAreas {
  string mapId = 1;
  map<string, Area> areas = 2;
  optional bool delete = 3;
}

message MapDeleteObject {
  string mapId = 1;
  uint32 key = 2;
}

// ************************************************************************************* //
//
//                             server-->client types                                     //
//
// ************************************************************************************* //

message ServerClientBatch {
  repeated ServerClientEvent events = 1;
  // don't add more stuff here
}
// For any event that begins with player, the client will look for an encId field,
// and dynamically apply all remaining properties onto that player object. 
// More info VVVVVV
// https://www.notion.so/Working-With-Dynamic-Player-State-c87d0f345ca9471695e8c3b1f7c88ddd

message ServerClientEvent {
  // future: optional txnID field
  oneof event {
    Info info = 100;
    Warn warn = 101;
    Error error = 102;
    Ready ready = 103;
    ServerHeartbeat serverHeartbeat = 105;
    DisableVideo disableVideo = 106; // deprecating
    PlayerMoves playerMoves = 1;
    PlayerSetsStatus playerSetsStatus = 5;
    PlayerSpotlights playerSpotlights = 6;
    PlayerRings playerRings = 7;
    // DEPRECATED
    PlayerSetsPointer playerSetsPointer = 8;
    PlayerChats playerChats = 9;
    PlayerInteracts playerInteracts = 10;
    PlayerGhosts playerGhosts = 11;
    PlayerEntersWhisper playerEntersWhisper = 12;
    PlayerLeavesWhisper playerLeavesWhisper = 13;
    PlayerActivelySpeaks playerActivelySpeaks = 14;
    PlayerSetsEmote playerSetsEmote = 15;
    PlayerSetsWorkCondition playerSetsWorkCondition= 16;
    PlayerSetsName playerSetsName = 17;
    PlayerSetsTextStatus playerSetsTextStatus = 18;
    PlayerSetsEmojiStatus playerSetsEmojiStatus = 19;
    PlayerSetsAffiliation playerSetsAffiliation = 20;
    PlayerExits playerExits = 21;
    PlayerSetsSprite playerSetsSprite = 22;
    RespawnComplete respawnComplete = 39;
    PlayerSetsOutfitString playerSetsOutfitString = 40;
    PlayerSetsIsSignedIn playerSetsIsSignedIn = 41;
    MapUpdates mapUpdates = 42;
    MapOverwrites mapOverwrites = 43;
    SpaceOverwrites spaceOverwrites = 44;
    SpaceIsClosed spaceIsClosed = 45;
    PlayerEntersPortal playerEntersPortal = 46;
    SpaceSetsIdMapping spaceSetsIdMapping = 47;
    PlayerSetsLastActive playerSetsLastActive = 48;
    PlayerShootsConfetti playerShootsConfetti = 49;
    PlayerSetsEventStatus playerSetsEventStatus = 50;
    PlayerSetsInConversation playerSetsInConversation = 51;
    PlayerSetsCurrentDesk playerSetsCurrentDesk = 52;
    PlayerSetsCurrentArea playerSetsCurrentArea = 53;
    PlayerSetsImagePointer playerSetsImagePointer = 54;
    CookieFound cookieFound = 55;
    PlayerEntersWhisperV2 playerEntersWhisperV2 = 56;
    PlayerSetsGoKartId playerSetsGoKartId = 57;
    MapSetDimensions mapSetDimensions = 58;
    MapSetCollisions mapSetCollisions = 59;
    MapSetBackgroundImagePath mapSetBackgroundImagePath = 60;
    MapSetForegroundImagePath mapSetForegroundImagePath = 61;
    MapSetSprites mapSetSprites = 62;
    MapSetSpaces mapSetSpaces = 63;
    MapSetSpawns mapSetSpawns = 64;
    MapSetPortals mapSetPortals = 65;
    MapSetAnnouncer mapSetAnnouncer = 66;
    MapSetAudio mapSetAudio = 67;
    MapSetAnimations mapSetAnimations = 68;
    MapSetAssets mapSetAssets = 69;
    MapSetObjects mapSetObjects = 70;
    MapSetName mapSetName = 71;
    MapSetDefaultChat mapSetDefaultChat = 72;
    MapSetMuteOnEntry mapSetMuteOnEntry = 73;
    MapSetUseDrawnBG mapSetUseDrawnBG = 74;
    MapSetWalls mapSetWalls = 75;
    MapSetFloors mapSetFloors = 76;
    MapSetAreas mapSetAreas = 77;
    MapDeleteObject mapDeleteObject = 78;
    MapSetSpawn mapSetSpawn = 79;
    // add lots more stuff here!
  }
}

message ServerHeartbeat {
  uint32 lastRTT = 1;
}

message Info {
  string message = 1;
}

message Warn {
  string message = 1;
}

message Error {
  string message = 1;
  uint32 code = 2;
}

message Ready {
  string id = 1;
}

message DisableVideo { }

// good pattern: NounVerb names, e.g. PlayerExitsSpace, PlayerMoves, ImpassableChanges, BackgroundChanges, ObjectChanges
/*
IMPORTANT:
If an event begins with player... and includes the field encId, then all subsequent fields will
be automatically applied to the local player state in gather-game-client, unless you add a special case; see the switch statement there.
If you need to affect a second player- e.g for whisper, use encIdTarget, and changes will also be applied to the second player.

If you follow the patterns described below, this will mostly work seamlessly, but there is an implied assertion that you will
follow the pattern.
*/
message PlayerMoves {
  uint32 encId = 1;
  // all optional, only send what's changed
  optional uint32 x = 2;
  optional uint32 y = 3;
  optional SpriteDirectionEnum.ENUM direction = 4;
  optional string mapId = 5;
  uint32 lastInputId = 6;
}

message PlayerSetsStatus {
  uint32 encId = 1;
  bool busy = 2;
}

message PlayerSpotlights {
  uint32 encId = 2; // the person who is being spotlit
  uint32 spotlightedBy = 1; // the person who is doing the spotlighting; legacy \holdover
  uint32 spotlighted = 3;
}

message PlayerRings {
  uint32 encId = 1; // the ringer
}

// DEPRECATED
message PlayerSetsPointer {
  uint32 encId = 1;
  string objectId = 2;
  uint32 x = 3;
  uint32 y = 4;
}

message PlayerSetsImagePointer {
  uint32 encId = 1;
  string objectId = 2;
  double x = 3;
  double y = 4;
}

message PlayerChats {
  string senderId = 1;
  string recipient = 2;
  string contents = 3;
  string senderName = 4;
  optional Timestamp timestamp = 5; // deprecating
  string messageType = 6;
  double unixTime = 7;
}

// deprecating this
message Timestamp {
  float seconds = 1;
  float nanoseconds = 2;
}

message PlayerInteracts {
  uint32 encId = 1;
  string objId = 2;
  optional string dataJson = 3; // JSON string
}

message PlayerGhosts {
  uint32 encId = 1;
  uint32 ghost = 2;
}

message PlayerEntersWhisper {
  uint32 encId = 1;
  string whisperRecipient = 2;
  string whisperId = 3;
}
message PlayerEntersWhisperV2 {
  uint32 encId = 1;
  uint32 encIdTarget = 2; // the person you intend to be whispering; will apply whisperId property to them as well
  string whisperId = 3;
}
message PlayerLeavesWhisper {
  uint32 encId = 1;
}
message PlayerActivelySpeaks {
  uint32 encId = 1;
  uint32 activelySpeaking = 2;
}

message PlayerSetsEmote {
  uint32 encId = 1;
  EmoteEnum.ENUM emote = 2;
}

message PlayerSetsWorkCondition {
  uint32 encId = 1;
  uint32 workCondition = 2;
}

message PlayerSetsLastActive {
  uint32 encId = 1;
  string lastActive = 2;
}

message PlayerSetsName {
  uint32 encId = 1;
  string name = 2;
}

message PlayerSetsTextStatus {
  uint32 encId = 1;
  string textStatus = 2;
}

message PlayerSetsEmojiStatus {
  uint32 encId = 1;
  string emojiStatus = 2;
}

message PlayerSetsAffiliation {
  uint32 encId = 1;
  string affiliation = 2;
}

message PlayerExits {
  uint32 encId = 1;
}

message PlayerSetsSprite {
  uint32 encId = 1;
  uint32 sprite = 2;
}

message PlayerSetsOutfitString {
  uint32 encId = 1;
  string outfitString = 2;
}

message PlayerSetsIsSignedIn {
  uint32 encId = 1;
  bool isSignedIn = 2;
}

message RespawnComplete {}

message MapUpdates {
  string mapId = 1;
  string diffJson = 2;
}

message MapOverwrites {
  string mapId = 1;
  string mapJson = 2;
}

// It's pretty wack that we're using JSON to serialize / deserialize space data here.
// TODO: improve this by splitting this up into several events or using a better message interface
// for this or something that doesn't require the client to JSON.parse().
message SpaceOverwrites {
  string spaceData = 1;
}

message SpaceIsClosed {}

message PlayerEntersPortal {
  string targetUrl = 1;
}

message CookieFound {
  uint32 encId = 1;
}

// Each client has a unique string id, but this is costly to send over the wire
// so an integer value is used in its place and then converted back to the
// corresponding string id on the client and server.
// This event provides the mapping between a player's string id [uid]
// and their corresponding integer id [encId].
// (see "Player..." events above for use of encId)
message SpaceSetsIdMapping {
  string uid = 1;
  uint32 encId = 2;
}

message PlayerShootsConfetti {
  uint32 encId = 1; // the confetti shooter
}

message PlayerSetsEventStatus {
  uint32 encId = 1;
  string eventStatus = 2;
}

message PlayerSetsInConversation {
  uint32 encId = 1;
  bool inConversation = 2;
}

message PlayerSetsCurrentDesk {
  uint32 encId = 1;
  string currentDesk = 2;
}

message PlayerSetsCurrentArea {
  uint32 encId = 1;
  string currentArea = 2;
}

message PlayerSetsGoKartId {
  uint32 encId = 1;
  string goKartId = 2;
}


// ************************************************************************************* //
//
//                             client-->server types                                     //
//
// ************************************************************************************* //

message ClientServerBatch {
  repeated ClientServerAction actions = 1;
  // don't add more stuff here
}

message ClientServerAction {
  // future: optional txnID field
  oneof action {
    ClientHeartbeat clientHeartbeat = 1;
    UpdateSubscriptions updateSubscriptions = 3;
    Move move = 5;
    SetSprite setSprite = 6;
    SetAffiliation setAffiliation = 7;
    SetStatus setStatus = 8;
    Spotlight spotlight = 9;
    Ring ring = 10;
    SetPointer setPointer = 11; // Deprecated
    Ban ban = 12;
    Kick kick = 13;
    SetImpassable setImpassable = 14;
    Chat chat = 15;
    SetObject setObject = 16;
    DeleteObject deleteObject = 17;
    Interact interact = 18;
    EnterWhisper enterWhisper = 19;
    LeaveWhisper leaveWhisper = 20;
    SetEmojiStatus setEmojiStatus = 21;
    ActivelySpeaking activelySpeaking = 22;
    SetEmote setEmote = 23;
    SetName setName = 24;
    SetTextStatus setTextStatus = 25;
    Teleport teleport = 26;
    Exit exit = 27;
    Enter enter = 28;
    SetWorkCondition setWorkCondition = 29;
    Respawn respawn = 30;
    Spawn spawn = 31;
    Ghost ghost = 32;
    Init init = 33;
    SetOutfitString setOutfitString = 34;
    MapUpdate mapUpdate = 35;
    ShootConfetti shootConfetti = 36;
    SetEventStatus setEventStatus = 37;
    SetInConversation setInConversation = 38;
    SetCurrentDesk setCurrentDesk = 39;
    SetCurrentArea setCurrentArea = 40;
    SetImagePointer setImagePointer = 41;
    SetGoKartId setGoKartId = 42;
    MapSetDimensions mapSetDimensions = 43;
    MapSetCollisions mapSetCollisions = 44;
    MapSetBackgroundImagePath mapSetBackgroundImagePath = 45;
    MapSetForegroundImagePath mapSetForegroundImagePath = 46;
    MapSetSprites mapSetSprites = 47;
    MapSetSpawns mapSetSpawns = 48;
    MapSetSpaces mapSetSpaces = 49;
    MapSetPortals mapSetPortals = 50;
    MapSetAnnouncer mapSetAnnouncer = 51;
    MapSetAudio mapSetAudio = 52;
    MapSetAnimations mapSetAnimations = 53;
    MapSetAssets mapSetAssets = 54;
    MapSetObjects mapSetObjects = 55;
    MapSetName mapSetName = 56;
    MapSetDefaultChat mapSetDefaultChat = 57;
    MapSetMuteOnEntry mapSetMuteOnEntry = 58;
    MapSetUseDrawnBG mapSetUseDrawnBG = 59;
    MapSetWalls mapSetWalls = 60;
    MapSetFloors mapSetFloors = 61;
    MapSetAreas mapSetAreas = 62;
    MapAddObject mapAddObject = 63;
    MapDeleteObject mapDeleteObject = 64;
    MapSetSpawn mapSetSpawn = 65;
  // add lots more stuff here!
  }
}

// for self-actions, don't need player ID because it's a property of the connection

message ClientHeartbeat { }

message UpdateSubscriptions {
  map<string, bool> subscriptions = 1;
}

message Move {
  MoveDirectionEnum.ENUM dir = 1;
  bool stopped = 2;
  uint32 inputId = 3;
  optional string targetId = 4;
}

message SetSprite {
  uint32 sprite = 1;
  optional string targetId = 2;
}

message SetAffiliation {
  string affiliation = 1;
}

message SetStatus {
  bool status = 1;
  optional string targetId = 2;
}

message SetOutfitString {
  string outfitString = 1;
  optional string targetId = 3;
}

message Spotlight {
  string spotlightedUser = 1;
  bool isSpotlighted = 2;
}

message Ring {
  string user = 1;
}

message SetPointer {
  string objectId = 1;
  uint32 x = 2;
  uint32 y = 3;
}

message SetImagePointer {
  string objectId = 1;
  double x = 2;
  double y = 3;
}

message Ban {
  string user = 1;
}

message Kick {
  string user = 1;
}

message SetImpassable {
  string mapId = 1;
  uint32 x = 2;
  uint32 y = 3;
  bool impassable = 4;
}

message Chat {
  string chatRecipient = 1;
  string contents = 2;
  repeated string localPlayerIds = 3;
  string mapId = 4;
}

message SetObject {
  string mapId = 1;
  string objectId = 2;
}

message DeleteObject {
  string mapId = 1;
  string objectId = 2;
}

message Interact {
  string objId = 1;
  optional string dataJson = 2; // JSON string
}

message ActivelySpeaking {
  bool activelySpeaking = 1;
}

message EnterWhisper {
  string recipientId = 1;
  MoveDirectionEnum.ENUM dir = 2;
}

message LeaveWhisper {}

message Ghost {
  uint32 ghost = 1;
  // why is this a uint32? it is in the original impl so.. it stays
  optional string targetId = 2;
}

message SetEmote {
  EmoteEnum.ENUM emote = 1;
  optional string targetId = 2;
}

message SetName {
  string name = 1;
  optional string targetId = 2;
}

message SetTextStatus {
  string textStatus = 1;
  optional string targetId = 2;
}

message Exit {}

message Enter {
  optional SpaceUserInfo info = 1;
  optional string spawnToken = 2;
}

message SetEmojiStatus {
  string emojiStatus = 1;
  optional string targetId = 2;
}

message Teleport {
  string mapId = 1;
  uint32 x = 2;
  uint32 y = 3;
  optional string targetId = 4;
}

message SetWorkCondition {
  bool workCondition = 1;
}

message Spawn {
  string spawnToken = 1;
}

message Respawn {
  optional SpaceUserInfo spaceUserInfo = 1;
  optional string spawnToken = 2;
}

message Init {
  string spaceId = 1;
  oneof auth {
    string token = 2;
    string apiKey = 3;
  }
}

message MapUpdate {
  string mapId = 1;
  string diffJson = 2;
}

message MapAddObject {
  string mapId = 1;
  WireObject object = 2;
}

message ShootConfetti {}

message SetEventStatus {
  string eventStatus = 1;
}

message SetInConversation {
  bool inConversation = 1;
}

message SetCurrentDesk {
  string currentDesk = 1;
}

message SetCurrentArea {
  string currentArea = 1;
}

message SetGoKartId {
  string goKartId = 1;
}
