"use strict";
var _a, _b;
exports.__esModule = true;
exports.whisperIdToColor = exports.directionToFacePlayer = exports.nextSpriteDirection = exports.positionAfterMove = exports.oppositeMoveDirection = exports.TEMPORARY_EMOTES = exports.EMOTE_SHORTCUTS = exports.EMOTE_EMOJIS = exports.Emote = exports.MoveDirection = exports.SpriteDirection = void 0;
var Position_1 = require("./Position");
var events_1 = require("./generated_DO_NOT_TOUCH/events");
exports.SpriteDirection = events_1.SpriteDirectionEnum_ENUM;
exports.MoveDirection = events_1.MoveDirectionEnum_ENUM;
exports.Emote = events_1.EmoteEnum_ENUM;
exports.EMOTE_EMOJIS = (_a = {},
    _a[events_1.EmoteEnum_ENUM.Wave] = "üëã",
    _a[events_1.EmoteEnum_ENUM.Heart] = "‚ù§Ô∏è",
    _a[events_1.EmoteEnum_ENUM.PartyPopper] = "üéâ",
    _a[events_1.EmoteEnum_ENUM.ThumbsUp] = "üëç",
    _a[events_1.EmoteEnum_ENUM.QuestionMark] = "‚ùì",
    _a[events_1.EmoteEnum_ENUM.RaisedHand] = "‚úã",
    _a);
exports.EMOTE_SHORTCUTS = (_b = {},
    _b[events_1.EmoteEnum_ENUM.Wave] = "1",
    _b[events_1.EmoteEnum_ENUM.Heart] = "2",
    _b[events_1.EmoteEnum_ENUM.PartyPopper] = "3",
    _b[events_1.EmoteEnum_ENUM.ThumbsUp] = "4",
    _b[events_1.EmoteEnum_ENUM.QuestionMark] = "5",
    _b[events_1.EmoteEnum_ENUM.RaisedHand] = "6",
    _b);
exports.TEMPORARY_EMOTES = [
    events_1.EmoteEnum_ENUM.Heart,
    events_1.EmoteEnum_ENUM.PartyPopper,
    events_1.EmoteEnum_ENUM.QuestionMark,
    events_1.EmoteEnum_ENUM.ThumbsUp,
    events_1.EmoteEnum_ENUM.Wave,
];
function oppositeMoveDirection(direction) {
    switch (direction) {
        case events_1.MoveDirectionEnum_ENUM.Left:
            return events_1.MoveDirectionEnum_ENUM.Right;
        case events_1.MoveDirectionEnum_ENUM.Right:
            return events_1.MoveDirectionEnum_ENUM.Left;
        case events_1.MoveDirectionEnum_ENUM.Up:
            return events_1.MoveDirectionEnum_ENUM.Down;
        case events_1.MoveDirectionEnum_ENUM.Down:
            return events_1.MoveDirectionEnum_ENUM.Up;
        default:
            return null;
    }
}
exports.oppositeMoveDirection = oppositeMoveDirection;
var positionAfterMove = function (start, dir, dist) {
    if (dist === void 0) { dist = 1; }
    var x = start.x, y = start.y;
    switch (dir) {
        case events_1.MoveDirectionEnum_ENUM.Left:
            return { x: x - dist, y: y };
        case events_1.MoveDirectionEnum_ENUM.Right:
            return { x: x + dist, y: y };
        case events_1.MoveDirectionEnum_ENUM.Up:
            return { x: x, y: y - dist };
        case events_1.MoveDirectionEnum_ENUM.Down:
            return { x: x, y: y + dist };
        default:
            return start;
    }
};
exports.positionAfterMove = positionAfterMove;
// Returns the next SpriteDirection to use after applying the given MoveDirection.
function nextSpriteDirection(current, direction) {
    if (direction === events_1.MoveDirectionEnum_ENUM.Left && current === events_1.SpriteDirectionEnum_ENUM.Left) {
        return events_1.SpriteDirectionEnum_ENUM.LeftAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Right && current === events_1.SpriteDirectionEnum_ENUM.Right) {
        return events_1.SpriteDirectionEnum_ENUM.RightAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Up && current === events_1.SpriteDirectionEnum_ENUM.Up) {
        return events_1.SpriteDirectionEnum_ENUM.UpAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Down && current === events_1.SpriteDirectionEnum_ENUM.Down) {
        return events_1.SpriteDirectionEnum_ENUM.DownAlt;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance && current === events_1.SpriteDirectionEnum_ENUM.Dance1) {
        return events_1.SpriteDirectionEnum_ENUM.Dance2;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance && current === events_1.SpriteDirectionEnum_ENUM.Dance2) {
        return events_1.SpriteDirectionEnum_ENUM.Dance3;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance && current === events_1.SpriteDirectionEnum_ENUM.Dance3) {
        return events_1.SpriteDirectionEnum_ENUM.Dance4;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Left) {
        return events_1.SpriteDirectionEnum_ENUM.Left;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Right) {
        return events_1.SpriteDirectionEnum_ENUM.Right;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Up) {
        return events_1.SpriteDirectionEnum_ENUM.Up;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Down) {
        return events_1.SpriteDirectionEnum_ENUM.Down;
    }
    else if (direction === events_1.MoveDirectionEnum_ENUM.Dance) {
        return events_1.SpriteDirectionEnum_ENUM.Dance1;
    }
    return current;
}
exports.nextSpriteDirection = nextSpriteDirection;
// direction for player to face target when next to eachother
function directionToFacePlayer(player, target) {
    if (Position_1.manhattanDistance(player, target) !== 1) {
        return null;
    }
    if (player.x - target.x === 1) {
        return events_1.MoveDirectionEnum_ENUM.Left;
    }
    else if (player.x - target.x === -1) {
        return events_1.MoveDirectionEnum_ENUM.Right;
    }
    else if (player.y - target.y === 1) {
        return events_1.MoveDirectionEnum_ENUM.Up;
    }
    else if (player.y - target.y === -1) {
        return events_1.MoveDirectionEnum_ENUM.Down;
    }
    return null;
}
exports.directionToFacePlayer = directionToFacePlayer;
// whisperId is either in format #XXXXXX or a uuid4
function whisperIdToColor(id) {
    if (id.length === 7) {
        return id;
    }
    return "#" + id.slice(0, 6);
}
exports.whisperIdToColor = whisperIdToColor;
//# sourceMappingURL=Player.js.map