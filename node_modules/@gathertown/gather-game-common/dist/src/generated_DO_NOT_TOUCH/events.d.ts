import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "";
export interface SpriteDirectionEnum {
}
export declare enum SpriteDirectionEnum_ENUM {
    Stand = 0,
    Down = 1,
    DownAlt = 2,
    Up = 3,
    UpAlt = 4,
    Left = 5,
    LeftAlt = 6,
    Right = 7,
    RightAlt = 8,
    Dance1 = 9,
    Dance2 = 10,
    Dance3 = 11,
    Dance4 = 12
}
export declare function spriteDirectionEnum_ENUMFromJSON(object: any): SpriteDirectionEnum_ENUM;
export declare function spriteDirectionEnum_ENUMToJSON(object: SpriteDirectionEnum_ENUM): string;
export interface MoveDirectionEnum {
}
export declare enum MoveDirectionEnum_ENUM {
    Left = 0,
    Right = 1,
    Up = 2,
    Down = 3,
    Dance = 4
}
export declare function moveDirectionEnum_ENUMFromJSON(object: any): MoveDirectionEnum_ENUM;
export declare function moveDirectionEnum_ENUMToJSON(object: MoveDirectionEnum_ENUM): string;
export interface EmoteEnum {
}
export declare enum EmoteEnum_ENUM {
    None = 0,
    Wave = 1,
    Heart = 2,
    PartyPopper = 3,
    ThumbsUp = 4,
    QuestionMark = 5,
    RaisedHand = 6
}
export declare function emoteEnum_ENUMFromJSON(object: any): EmoteEnum_ENUM;
export declare function emoteEnum_ENUMToJSON(object: EmoteEnum_ENUM): string;
export interface InteractionEnum {
}
export declare enum InteractionEnum_ENUM {
    NONE = 0,
    EMBEDDED_WEBSITE = 1,
    POSTER = 2,
    VIDEO = 3,
    EXTERNAL_CALL = 4,
    EXTENSION = 5,
    NOTE = 6,
    MODAL_EXTENSION = 7,
    COMPONENT_MODAL = 8
}
export declare function interactionEnum_ENUMFromJSON(object: any): InteractionEnum_ENUM;
export declare function interactionEnum_ENUMToJSON(object: InteractionEnum_ENUM): string;
export interface SpaceUserInfo {
    name?: string | undefined;
    avatar?: number | undefined;
    x?: number | undefined;
    y?: number | undefined;
    map?: string | undefined;
    affiliation?: string | undefined;
    busy?: boolean | undefined;
    textStatus?: string | undefined;
    emojiStatus?: string | undefined;
    currentlyEquippedWearables?: DBOutfit | undefined;
}
export interface DBOutfit {
    skin: string;
    hair: string;
    facial_hair: string;
    top: string;
    bottom: string;
    shoes: string;
    hat: string;
    glasses: string;
    other: string;
}
export interface WireObject {
    templateId?: string | undefined;
    _name?: string | undefined;
    /** repeated is inherently optional */
    _tags: string[];
    x?: number | undefined;
    y?: number | undefined;
    offsetX?: number | undefined;
    offsetY?: number | undefined;
    color?: string | undefined;
    orientation?: number | undefined;
    normal?: string | undefined;
    highlighted?: string | undefined;
    type?: InteractionEnum_ENUM | undefined;
    width?: number | undefined;
    height?: number | undefined;
    extensionClass?: string | undefined;
    previewMessage?: string | undefined;
    distThreshold?: number | undefined;
    propertiesJson?: string | undefined;
    sound?: Sound | undefined;
    objectStartTime?: ObjectTime | undefined;
    objectExpireTime?: ObjectTime | undefined;
    id?: string | undefined;
    customState?: string | undefined;
}
export interface Sound {
    src: string;
    volume: number;
    loop: boolean;
    maxDistance: number;
}
export interface ObjectTime {
    _seconds: number;
}
export interface Space {
    spaceId: string;
    x: number;
    y: number;
    colored?: boolean | undefined;
}
export interface Point {
    x: number;
    y: number;
}
export interface SpawnPoint {
    x: number;
    y: number;
    spawnId?: string | undefined;
}
export interface Portal {
    x: number;
    y: number;
    targetMap?: string | undefined;
    targetUrl?: string | undefined;
    targetX?: number | undefined;
    targetY?: number | undefined;
}
export interface Announcer {
    x: number;
    y: number;
}
/** deprecating */
export interface Asset {
    x: number;
    y: number;
    src: string;
    width: number;
    height: number;
    inFront?: boolean | undefined;
}
/** deprecating */
export interface AudioEmitter {
    x: number;
    y: number;
    path: string;
    volume: number[];
}
/** deprecating */
export interface Animation {
    x: number;
    y: number;
    framegap: number;
    frames: string[];
}
export interface AreaPosition {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
}
export interface Area {
    categories: string;
    coords: AreaPosition[];
}
export interface MapSetDimensions {
    mapId: string;
    width: number;
    height: number;
}
export interface MapSetCollisions {
    mapId: string;
    x: number;
    y: number;
    w: number;
    h: number;
    /** base64 encoded string */
    mask: string;
}
export interface MapSetBackgroundImagePath {
    mapId: string;
    /** url */
    backgroundImagePath: string;
}
export interface MapSetForegroundImagePath {
    mapId: string;
    foregroundImagePath: string;
    delete?: boolean | undefined;
}
export interface MapSetSprites {
    mapId: string;
    sprites: number[];
    delete?: boolean | undefined;
}
export interface MapSetSpaces {
    mapId: string;
    spaces: Space[];
}
export interface MapSetSpawn {
    mapId: string;
    spawn: Point | undefined;
    delete?: boolean | undefined;
}
export interface MapSetSpawns {
    mapId: string;
    spawns: SpawnPoint[];
}
export interface MapSetPortals {
    mapId: string;
    portals: Portal[];
}
export interface MapSetAnnouncer {
    mapId: string;
    announcer: Announcer[];
}
/** deprecating */
export interface MapSetAudio {
    mapId: string;
    audio: AudioEmitter[];
    delete?: boolean | undefined;
}
/** deprecating */
export interface MapSetAnimations {
    mapId: string;
    animations: Animation[];
    delete?: boolean | undefined;
}
/** deprecating */
export interface MapSetAssets {
    mapId: string;
    assets: Asset[];
    delete?: boolean | undefined;
}
export interface MapSetObjects {
    mapId: string;
    objects: {
        [key: number]: WireObject;
    };
}
export interface MapSetObjects_ObjectsEntry {
    key: number;
    value: WireObject | undefined;
}
export interface MapSetName {
    mapId: string;
    name: string;
    delete?: boolean | undefined;
}
export interface MapSetDefaultChat {
    mapId: string;
    defaultChat: string;
    delete?: boolean | undefined;
}
export interface MapSetMuteOnEntry {
    mapId: string;
    muteOnEntry: boolean;
    delete?: boolean | undefined;
}
export interface MapSetUseDrawnBG {
    mapId: string;
    useDrawnBG: boolean;
    delete?: boolean | undefined;
}
export interface MapSetWalls {
    mapId: string;
    walls: {
        [key: string]: string;
    };
    delete?: boolean | undefined;
}
export interface MapSetWalls_WallsEntry {
    key: string;
    value: string;
}
export interface MapSetFloors {
    mapId: string;
    floors: {
        [key: string]: string;
    };
    delete?: boolean | undefined;
}
export interface MapSetFloors_FloorsEntry {
    key: string;
    value: string;
}
export interface MapSetAreas {
    mapId: string;
    areas: {
        [key: string]: Area;
    };
    delete?: boolean | undefined;
}
export interface MapSetAreas_AreasEntry {
    key: string;
    value: Area | undefined;
}
export interface MapDeleteObject {
    mapId: string;
    key: number;
}
export interface ServerClientBatch {
    /** don't add more stuff here */
    events: ServerClientEvent[];
}
export interface ServerClientEvent {
    event?: {
        $case: "info";
        info: Info;
    } | {
        $case: "warn";
        warn: Warn;
    } | {
        $case: "error";
        error: Error;
    } | {
        $case: "ready";
        ready: Ready;
    } | {
        $case: "serverHeartbeat";
        serverHeartbeat: ServerHeartbeat;
    } | {
        $case: "disableVideo";
        disableVideo: DisableVideo;
    } | {
        $case: "playerMoves";
        playerMoves: PlayerMoves;
    } | {
        $case: "playerSetsStatus";
        playerSetsStatus: PlayerSetsStatus;
    } | {
        $case: "playerSpotlights";
        playerSpotlights: PlayerSpotlights;
    } | {
        $case: "playerRings";
        playerRings: PlayerRings;
    } | {
        $case: "playerSetsPointer";
        playerSetsPointer: PlayerSetsPointer;
    } | {
        $case: "playerChats";
        playerChats: PlayerChats;
    } | {
        $case: "playerInteracts";
        playerInteracts: PlayerInteracts;
    } | {
        $case: "playerGhosts";
        playerGhosts: PlayerGhosts;
    } | {
        $case: "playerEntersWhisper";
        playerEntersWhisper: PlayerEntersWhisper;
    } | {
        $case: "playerLeavesWhisper";
        playerLeavesWhisper: PlayerLeavesWhisper;
    } | {
        $case: "playerActivelySpeaks";
        playerActivelySpeaks: PlayerActivelySpeaks;
    } | {
        $case: "playerSetsEmote";
        playerSetsEmote: PlayerSetsEmote;
    } | {
        $case: "playerSetsWorkCondition";
        playerSetsWorkCondition: PlayerSetsWorkCondition;
    } | {
        $case: "playerSetsName";
        playerSetsName: PlayerSetsName;
    } | {
        $case: "playerSetsTextStatus";
        playerSetsTextStatus: PlayerSetsTextStatus;
    } | {
        $case: "playerSetsEmojiStatus";
        playerSetsEmojiStatus: PlayerSetsEmojiStatus;
    } | {
        $case: "playerSetsAffiliation";
        playerSetsAffiliation: PlayerSetsAffiliation;
    } | {
        $case: "playerExits";
        playerExits: PlayerExits;
    } | {
        $case: "playerSetsSprite";
        playerSetsSprite: PlayerSetsSprite;
    } | {
        $case: "respawnComplete";
        respawnComplete: RespawnComplete;
    } | {
        $case: "playerSetsOutfitString";
        playerSetsOutfitString: PlayerSetsOutfitString;
    } | {
        $case: "playerSetsIsSignedIn";
        playerSetsIsSignedIn: PlayerSetsIsSignedIn;
    } | {
        $case: "mapUpdates";
        mapUpdates: MapUpdates;
    } | {
        $case: "mapOverwrites";
        mapOverwrites: MapOverwrites;
    } | {
        $case: "spaceOverwrites";
        spaceOverwrites: SpaceOverwrites;
    } | {
        $case: "spaceIsClosed";
        spaceIsClosed: SpaceIsClosed;
    } | {
        $case: "playerEntersPortal";
        playerEntersPortal: PlayerEntersPortal;
    } | {
        $case: "spaceSetsIdMapping";
        spaceSetsIdMapping: SpaceSetsIdMapping;
    } | {
        $case: "playerSetsLastActive";
        playerSetsLastActive: PlayerSetsLastActive;
    } | {
        $case: "playerShootsConfetti";
        playerShootsConfetti: PlayerShootsConfetti;
    } | {
        $case: "playerSetsEventStatus";
        playerSetsEventStatus: PlayerSetsEventStatus;
    } | {
        $case: "playerSetsInConversation";
        playerSetsInConversation: PlayerSetsInConversation;
    } | {
        $case: "playerSetsCurrentDesk";
        playerSetsCurrentDesk: PlayerSetsCurrentDesk;
    } | {
        $case: "playerSetsCurrentArea";
        playerSetsCurrentArea: PlayerSetsCurrentArea;
    } | {
        $case: "playerSetsImagePointer";
        playerSetsImagePointer: PlayerSetsImagePointer;
    } | {
        $case: "cookieFound";
        cookieFound: CookieFound;
    } | {
        $case: "playerEntersWhisperV2";
        playerEntersWhisperV2: PlayerEntersWhisperV2;
    } | {
        $case: "playerSetsGoKartId";
        playerSetsGoKartId: PlayerSetsGoKartId;
    } | {
        $case: "mapSetDimensions";
        mapSetDimensions: MapSetDimensions;
    } | {
        $case: "mapSetCollisions";
        mapSetCollisions: MapSetCollisions;
    } | {
        $case: "mapSetBackgroundImagePath";
        mapSetBackgroundImagePath: MapSetBackgroundImagePath;
    } | {
        $case: "mapSetForegroundImagePath";
        mapSetForegroundImagePath: MapSetForegroundImagePath;
    } | {
        $case: "mapSetSprites";
        mapSetSprites: MapSetSprites;
    } | {
        $case: "mapSetSpaces";
        mapSetSpaces: MapSetSpaces;
    } | {
        $case: "mapSetSpawns";
        mapSetSpawns: MapSetSpawns;
    } | {
        $case: "mapSetPortals";
        mapSetPortals: MapSetPortals;
    } | {
        $case: "mapSetAnnouncer";
        mapSetAnnouncer: MapSetAnnouncer;
    } | {
        $case: "mapSetAudio";
        mapSetAudio: MapSetAudio;
    } | {
        $case: "mapSetAnimations";
        mapSetAnimations: MapSetAnimations;
    } | {
        $case: "mapSetAssets";
        mapSetAssets: MapSetAssets;
    } | {
        $case: "mapSetObjects";
        mapSetObjects: MapSetObjects;
    } | {
        $case: "mapSetName";
        mapSetName: MapSetName;
    } | {
        $case: "mapSetDefaultChat";
        mapSetDefaultChat: MapSetDefaultChat;
    } | {
        $case: "mapSetMuteOnEntry";
        mapSetMuteOnEntry: MapSetMuteOnEntry;
    } | {
        $case: "mapSetUseDrawnBG";
        mapSetUseDrawnBG: MapSetUseDrawnBG;
    } | {
        $case: "mapSetWalls";
        mapSetWalls: MapSetWalls;
    } | {
        $case: "mapSetFloors";
        mapSetFloors: MapSetFloors;
    } | {
        $case: "mapSetAreas";
        mapSetAreas: MapSetAreas;
    } | {
        $case: "mapDeleteObject";
        mapDeleteObject: MapDeleteObject;
    } | {
        $case: "mapSetSpawn";
        mapSetSpawn: MapSetSpawn;
    };
}
export interface ServerHeartbeat {
    lastRTT: number;
}
export interface Info {
    message: string;
}
export interface Warn {
    message: string;
}
export interface Error {
    message: string;
    code: number;
}
export interface Ready {
    id: string;
}
export interface DisableVideo {
}
/**
 * IMPORTANT:
 * If an event begins with player... and includes the field encId, then all subsequent fields will
 * be automatically applied to the local player state in gather-game-client, unless you add a special case; see the switch statement there.
 * If you need to affect a second player- e.g for whisper, use encIdTarget, and changes will also be applied to the second player.
 *
 * If you follow the patterns described below, this will mostly work seamlessly, but there is an implied assertion that you will
 * follow the pattern.
 */
export interface PlayerMoves {
    encId: number;
    /** all optional, only send what's changed */
    x?: number | undefined;
    y?: number | undefined;
    direction?: SpriteDirectionEnum_ENUM | undefined;
    mapId?: string | undefined;
    lastInputId: number;
}
export interface PlayerSetsStatus {
    encId: number;
    busy: boolean;
}
export interface PlayerSpotlights {
    /** the person who is being spotlit */
    encId: number;
    /** the person who is doing the spotlighting; legacy \holdover */
    spotlightedBy: number;
    spotlighted: number;
}
export interface PlayerRings {
    /** the ringer */
    encId: number;
}
/** DEPRECATED */
export interface PlayerSetsPointer {
    encId: number;
    objectId: string;
    x: number;
    y: number;
}
export interface PlayerSetsImagePointer {
    encId: number;
    objectId: string;
    x: number;
    y: number;
}
export interface PlayerChats {
    senderId: string;
    recipient: string;
    contents: string;
    senderName: string;
    /** deprecating */
    timestamp?: Timestamp | undefined;
    messageType: string;
    unixTime: number;
}
/** deprecating this */
export interface Timestamp {
    seconds: number;
    nanoseconds: number;
}
export interface PlayerInteracts {
    encId: number;
    objId: string;
    /** JSON string */
    dataJson?: string | undefined;
}
export interface PlayerGhosts {
    encId: number;
    ghost: number;
}
export interface PlayerEntersWhisper {
    encId: number;
    whisperRecipient: string;
    whisperId: string;
}
export interface PlayerEntersWhisperV2 {
    encId: number;
    /** the person you intend to be whispering; will apply whisperId property to them as well */
    encIdTarget: number;
    whisperId: string;
}
export interface PlayerLeavesWhisper {
    encId: number;
}
export interface PlayerActivelySpeaks {
    encId: number;
    activelySpeaking: number;
}
export interface PlayerSetsEmote {
    encId: number;
    emote: EmoteEnum_ENUM;
}
export interface PlayerSetsWorkCondition {
    encId: number;
    workCondition: number;
}
export interface PlayerSetsLastActive {
    encId: number;
    lastActive: string;
}
export interface PlayerSetsName {
    encId: number;
    name: string;
}
export interface PlayerSetsTextStatus {
    encId: number;
    textStatus: string;
}
export interface PlayerSetsEmojiStatus {
    encId: number;
    emojiStatus: string;
}
export interface PlayerSetsAffiliation {
    encId: number;
    affiliation: string;
}
export interface PlayerExits {
    encId: number;
}
export interface PlayerSetsSprite {
    encId: number;
    sprite: number;
}
export interface PlayerSetsOutfitString {
    encId: number;
    outfitString: string;
}
export interface PlayerSetsIsSignedIn {
    encId: number;
    isSignedIn: boolean;
}
export interface RespawnComplete {
}
export interface MapUpdates {
    mapId: string;
    diffJson: string;
}
export interface MapOverwrites {
    mapId: string;
    mapJson: string;
}
/**
 * It's pretty wack that we're using JSON to serialize / deserialize space data here.
 * TODO: improve this by splitting this up into several events or using a better message interface
 * for this or something that doesn't require the client to JSON.parse().
 */
export interface SpaceOverwrites {
    spaceData: string;
}
export interface SpaceIsClosed {
}
export interface PlayerEntersPortal {
    targetUrl: string;
}
export interface CookieFound {
    encId: number;
}
/**
 * Each client has a unique string id, but this is costly to send over the wire
 * so an integer value is used in its place and then converted back to the
 * corresponding string id on the client and server.
 * This event provides the mapping between a player's string id [uid]
 * and their corresponding integer id [encId].
 * (see "Player..." events above for use of encId)
 */
export interface SpaceSetsIdMapping {
    uid: string;
    encId: number;
}
export interface PlayerShootsConfetti {
    /** the confetti shooter */
    encId: number;
}
export interface PlayerSetsEventStatus {
    encId: number;
    eventStatus: string;
}
export interface PlayerSetsInConversation {
    encId: number;
    inConversation: boolean;
}
export interface PlayerSetsCurrentDesk {
    encId: number;
    currentDesk: string;
}
export interface PlayerSetsCurrentArea {
    encId: number;
    currentArea: string;
}
export interface PlayerSetsGoKartId {
    encId: number;
    goKartId: string;
}
export interface ClientServerBatch {
    /** don't add more stuff here */
    actions: ClientServerAction[];
}
export interface ClientServerAction {
    action?: {
        $case: "clientHeartbeat";
        clientHeartbeat: ClientHeartbeat;
    } | {
        $case: "updateSubscriptions";
        updateSubscriptions: UpdateSubscriptions;
    } | {
        $case: "move";
        move: Move;
    } | {
        $case: "setSprite";
        setSprite: SetSprite;
    } | {
        $case: "setAffiliation";
        setAffiliation: SetAffiliation;
    } | {
        $case: "setStatus";
        setStatus: SetStatus;
    } | {
        $case: "spotlight";
        spotlight: Spotlight;
    } | {
        $case: "ring";
        ring: Ring;
    } | {
        $case: "setPointer";
        setPointer: SetPointer;
    } | {
        $case: "ban";
        ban: Ban;
    } | {
        $case: "kick";
        kick: Kick;
    } | {
        $case: "setImpassable";
        setImpassable: SetImpassable;
    } | {
        $case: "chat";
        chat: Chat;
    } | {
        $case: "setObject";
        setObject: SetObject;
    } | {
        $case: "deleteObject";
        deleteObject: DeleteObject;
    } | {
        $case: "interact";
        interact: Interact;
    } | {
        $case: "enterWhisper";
        enterWhisper: EnterWhisper;
    } | {
        $case: "leaveWhisper";
        leaveWhisper: LeaveWhisper;
    } | {
        $case: "setEmojiStatus";
        setEmojiStatus: SetEmojiStatus;
    } | {
        $case: "activelySpeaking";
        activelySpeaking: ActivelySpeaking;
    } | {
        $case: "setEmote";
        setEmote: SetEmote;
    } | {
        $case: "setName";
        setName: SetName;
    } | {
        $case: "setTextStatus";
        setTextStatus: SetTextStatus;
    } | {
        $case: "teleport";
        teleport: Teleport;
    } | {
        $case: "exit";
        exit: Exit;
    } | {
        $case: "enter";
        enter: Enter;
    } | {
        $case: "setWorkCondition";
        setWorkCondition: SetWorkCondition;
    } | {
        $case: "respawn";
        respawn: Respawn;
    } | {
        $case: "spawn";
        spawn: Spawn;
    } | {
        $case: "ghost";
        ghost: Ghost;
    } | {
        $case: "init";
        init: Init;
    } | {
        $case: "setOutfitString";
        setOutfitString: SetOutfitString;
    } | {
        $case: "mapUpdate";
        mapUpdate: MapUpdate;
    } | {
        $case: "shootConfetti";
        shootConfetti: ShootConfetti;
    } | {
        $case: "setEventStatus";
        setEventStatus: SetEventStatus;
    } | {
        $case: "setInConversation";
        setInConversation: SetInConversation;
    } | {
        $case: "setCurrentDesk";
        setCurrentDesk: SetCurrentDesk;
    } | {
        $case: "setCurrentArea";
        setCurrentArea: SetCurrentArea;
    } | {
        $case: "setImagePointer";
        setImagePointer: SetImagePointer;
    } | {
        $case: "setGoKartId";
        setGoKartId: SetGoKartId;
    } | {
        $case: "mapSetDimensions";
        mapSetDimensions: MapSetDimensions;
    } | {
        $case: "mapSetCollisions";
        mapSetCollisions: MapSetCollisions;
    } | {
        $case: "mapSetBackgroundImagePath";
        mapSetBackgroundImagePath: MapSetBackgroundImagePath;
    } | {
        $case: "mapSetForegroundImagePath";
        mapSetForegroundImagePath: MapSetForegroundImagePath;
    } | {
        $case: "mapSetSprites";
        mapSetSprites: MapSetSprites;
    } | {
        $case: "mapSetSpawns";
        mapSetSpawns: MapSetSpawns;
    } | {
        $case: "mapSetSpaces";
        mapSetSpaces: MapSetSpaces;
    } | {
        $case: "mapSetPortals";
        mapSetPortals: MapSetPortals;
    } | {
        $case: "mapSetAnnouncer";
        mapSetAnnouncer: MapSetAnnouncer;
    } | {
        $case: "mapSetAudio";
        mapSetAudio: MapSetAudio;
    } | {
        $case: "mapSetAnimations";
        mapSetAnimations: MapSetAnimations;
    } | {
        $case: "mapSetAssets";
        mapSetAssets: MapSetAssets;
    } | {
        $case: "mapSetObjects";
        mapSetObjects: MapSetObjects;
    } | {
        $case: "mapSetName";
        mapSetName: MapSetName;
    } | {
        $case: "mapSetDefaultChat";
        mapSetDefaultChat: MapSetDefaultChat;
    } | {
        $case: "mapSetMuteOnEntry";
        mapSetMuteOnEntry: MapSetMuteOnEntry;
    } | {
        $case: "mapSetUseDrawnBG";
        mapSetUseDrawnBG: MapSetUseDrawnBG;
    } | {
        $case: "mapSetWalls";
        mapSetWalls: MapSetWalls;
    } | {
        $case: "mapSetFloors";
        mapSetFloors: MapSetFloors;
    } | {
        $case: "mapSetAreas";
        mapSetAreas: MapSetAreas;
    } | {
        $case: "mapAddObject";
        mapAddObject: MapAddObject;
    } | {
        $case: "mapDeleteObject";
        mapDeleteObject: MapDeleteObject;
    } | {
        $case: "mapSetSpawn";
        mapSetSpawn: MapSetSpawn;
    };
}
export interface ClientHeartbeat {
}
export interface UpdateSubscriptions {
    subscriptions: {
        [key: string]: boolean;
    };
}
export interface UpdateSubscriptions_SubscriptionsEntry {
    key: string;
    value: boolean;
}
export interface Move {
    dir: MoveDirectionEnum_ENUM;
    stopped: boolean;
    inputId: number;
    targetId?: string | undefined;
}
export interface SetSprite {
    sprite: number;
    targetId?: string | undefined;
}
export interface SetAffiliation {
    affiliation: string;
}
export interface SetStatus {
    status: boolean;
    targetId?: string | undefined;
}
export interface SetOutfitString {
    outfitString: string;
    targetId?: string | undefined;
}
export interface Spotlight {
    spotlightedUser: string;
    isSpotlighted: boolean;
}
export interface Ring {
    user: string;
}
export interface SetPointer {
    objectId: string;
    x: number;
    y: number;
}
export interface SetImagePointer {
    objectId: string;
    x: number;
    y: number;
}
export interface Ban {
    user: string;
}
export interface Kick {
    user: string;
}
export interface SetImpassable {
    mapId: string;
    x: number;
    y: number;
    impassable: boolean;
}
export interface Chat {
    chatRecipient: string;
    contents: string;
    localPlayerIds: string[];
    mapId: string;
}
export interface SetObject {
    mapId: string;
    objectId: string;
}
export interface DeleteObject {
    mapId: string;
    objectId: string;
}
export interface Interact {
    objId: string;
    /** JSON string */
    dataJson?: string | undefined;
}
export interface ActivelySpeaking {
    activelySpeaking: boolean;
}
export interface EnterWhisper {
    recipientId: string;
    dir: MoveDirectionEnum_ENUM;
}
export interface LeaveWhisper {
}
export interface Ghost {
    ghost: number;
    /** why is this a uint32? it is in the original impl so.. it stays */
    targetId?: string | undefined;
}
export interface SetEmote {
    emote: EmoteEnum_ENUM;
    targetId?: string | undefined;
}
export interface SetName {
    name: string;
    targetId?: string | undefined;
}
export interface SetTextStatus {
    textStatus: string;
    targetId?: string | undefined;
}
export interface Exit {
}
export interface Enter {
    info?: SpaceUserInfo | undefined;
    spawnToken?: string | undefined;
}
export interface SetEmojiStatus {
    emojiStatus: string;
    targetId?: string | undefined;
}
export interface Teleport {
    mapId: string;
    x: number;
    y: number;
    targetId?: string | undefined;
}
export interface SetWorkCondition {
    workCondition: boolean;
}
export interface Spawn {
    spawnToken: string;
}
export interface Respawn {
    spaceUserInfo?: SpaceUserInfo | undefined;
    spawnToken?: string | undefined;
}
export interface Init {
    spaceId: string;
    auth?: {
        $case: "token";
        token: string;
    } | {
        $case: "apiKey";
        apiKey: string;
    };
}
export interface MapUpdate {
    mapId: string;
    diffJson: string;
}
export interface MapAddObject {
    mapId: string;
    object: WireObject | undefined;
}
export interface ShootConfetti {
}
export interface SetEventStatus {
    eventStatus: string;
}
export interface SetInConversation {
    inConversation: boolean;
}
export interface SetCurrentDesk {
    currentDesk: string;
}
export interface SetCurrentArea {
    currentArea: string;
}
export interface SetGoKartId {
    goKartId: string;
}
export declare const SpriteDirectionEnum: {
    encode(_: SpriteDirectionEnum, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SpriteDirectionEnum;
    fromJSON(_: any): SpriteDirectionEnum;
    toJSON(_: SpriteDirectionEnum): unknown;
    fromPartial(_: DeepPartial<SpriteDirectionEnum>): SpriteDirectionEnum;
};
export declare const MoveDirectionEnum: {
    encode(_: MoveDirectionEnum, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MoveDirectionEnum;
    fromJSON(_: any): MoveDirectionEnum;
    toJSON(_: MoveDirectionEnum): unknown;
    fromPartial(_: DeepPartial<MoveDirectionEnum>): MoveDirectionEnum;
};
export declare const EmoteEnum: {
    encode(_: EmoteEnum, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EmoteEnum;
    fromJSON(_: any): EmoteEnum;
    toJSON(_: EmoteEnum): unknown;
    fromPartial(_: DeepPartial<EmoteEnum>): EmoteEnum;
};
export declare const InteractionEnum: {
    encode(_: InteractionEnum, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InteractionEnum;
    fromJSON(_: any): InteractionEnum;
    toJSON(_: InteractionEnum): unknown;
    fromPartial(_: DeepPartial<InteractionEnum>): InteractionEnum;
};
export declare const SpaceUserInfo: {
    encode(message: SpaceUserInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SpaceUserInfo;
    fromJSON(object: any): SpaceUserInfo;
    toJSON(message: SpaceUserInfo): unknown;
    fromPartial(object: DeepPartial<SpaceUserInfo>): SpaceUserInfo;
};
export declare const DBOutfit: {
    encode(message: DBOutfit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DBOutfit;
    fromJSON(object: any): DBOutfit;
    toJSON(message: DBOutfit): unknown;
    fromPartial(object: DeepPartial<DBOutfit>): DBOutfit;
};
export declare const WireObject: {
    encode(message: WireObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): WireObject;
    fromJSON(object: any): WireObject;
    toJSON(message: WireObject): unknown;
    fromPartial(object: DeepPartial<WireObject>): WireObject;
};
export declare const Sound: {
    encode(message: Sound, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Sound;
    fromJSON(object: any): Sound;
    toJSON(message: Sound): unknown;
    fromPartial(object: DeepPartial<Sound>): Sound;
};
export declare const ObjectTime: {
    encode(message: ObjectTime, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ObjectTime;
    fromJSON(object: any): ObjectTime;
    toJSON(message: ObjectTime): unknown;
    fromPartial(object: DeepPartial<ObjectTime>): ObjectTime;
};
export declare const Space: {
    encode(message: Space, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Space;
    fromJSON(object: any): Space;
    toJSON(message: Space): unknown;
    fromPartial(object: DeepPartial<Space>): Space;
};
export declare const Point: {
    encode(message: Point, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Point;
    fromJSON(object: any): Point;
    toJSON(message: Point): unknown;
    fromPartial(object: DeepPartial<Point>): Point;
};
export declare const SpawnPoint: {
    encode(message: SpawnPoint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SpawnPoint;
    fromJSON(object: any): SpawnPoint;
    toJSON(message: SpawnPoint): unknown;
    fromPartial(object: DeepPartial<SpawnPoint>): SpawnPoint;
};
export declare const Portal: {
    encode(message: Portal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Portal;
    fromJSON(object: any): Portal;
    toJSON(message: Portal): unknown;
    fromPartial(object: DeepPartial<Portal>): Portal;
};
export declare const Announcer: {
    encode(message: Announcer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Announcer;
    fromJSON(object: any): Announcer;
    toJSON(message: Announcer): unknown;
    fromPartial(object: DeepPartial<Announcer>): Announcer;
};
export declare const Asset: {
    encode(message: Asset, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Asset;
    fromJSON(object: any): Asset;
    toJSON(message: Asset): unknown;
    fromPartial(object: DeepPartial<Asset>): Asset;
};
export declare const AudioEmitter: {
    encode(message: AudioEmitter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AudioEmitter;
    fromJSON(object: any): AudioEmitter;
    toJSON(message: AudioEmitter): unknown;
    fromPartial(object: DeepPartial<AudioEmitter>): AudioEmitter;
};
export declare const Animation: {
    encode(message: Animation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Animation;
    fromJSON(object: any): Animation;
    toJSON(message: Animation): unknown;
    fromPartial(object: DeepPartial<Animation>): Animation;
};
export declare const AreaPosition: {
    encode(message: AreaPosition, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AreaPosition;
    fromJSON(object: any): AreaPosition;
    toJSON(message: AreaPosition): unknown;
    fromPartial(object: DeepPartial<AreaPosition>): AreaPosition;
};
export declare const Area: {
    encode(message: Area, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Area;
    fromJSON(object: any): Area;
    toJSON(message: Area): unknown;
    fromPartial(object: DeepPartial<Area>): Area;
};
export declare const MapSetDimensions: {
    encode(message: MapSetDimensions, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetDimensions;
    fromJSON(object: any): MapSetDimensions;
    toJSON(message: MapSetDimensions): unknown;
    fromPartial(object: DeepPartial<MapSetDimensions>): MapSetDimensions;
};
export declare const MapSetCollisions: {
    encode(message: MapSetCollisions, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetCollisions;
    fromJSON(object: any): MapSetCollisions;
    toJSON(message: MapSetCollisions): unknown;
    fromPartial(object: DeepPartial<MapSetCollisions>): MapSetCollisions;
};
export declare const MapSetBackgroundImagePath: {
    encode(message: MapSetBackgroundImagePath, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetBackgroundImagePath;
    fromJSON(object: any): MapSetBackgroundImagePath;
    toJSON(message: MapSetBackgroundImagePath): unknown;
    fromPartial(object: DeepPartial<MapSetBackgroundImagePath>): MapSetBackgroundImagePath;
};
export declare const MapSetForegroundImagePath: {
    encode(message: MapSetForegroundImagePath, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetForegroundImagePath;
    fromJSON(object: any): MapSetForegroundImagePath;
    toJSON(message: MapSetForegroundImagePath): unknown;
    fromPartial(object: DeepPartial<MapSetForegroundImagePath>): MapSetForegroundImagePath;
};
export declare const MapSetSprites: {
    encode(message: MapSetSprites, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetSprites;
    fromJSON(object: any): MapSetSprites;
    toJSON(message: MapSetSprites): unknown;
    fromPartial(object: DeepPartial<MapSetSprites>): MapSetSprites;
};
export declare const MapSetSpaces: {
    encode(message: MapSetSpaces, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetSpaces;
    fromJSON(object: any): MapSetSpaces;
    toJSON(message: MapSetSpaces): unknown;
    fromPartial(object: DeepPartial<MapSetSpaces>): MapSetSpaces;
};
export declare const MapSetSpawn: {
    encode(message: MapSetSpawn, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetSpawn;
    fromJSON(object: any): MapSetSpawn;
    toJSON(message: MapSetSpawn): unknown;
    fromPartial(object: DeepPartial<MapSetSpawn>): MapSetSpawn;
};
export declare const MapSetSpawns: {
    encode(message: MapSetSpawns, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetSpawns;
    fromJSON(object: any): MapSetSpawns;
    toJSON(message: MapSetSpawns): unknown;
    fromPartial(object: DeepPartial<MapSetSpawns>): MapSetSpawns;
};
export declare const MapSetPortals: {
    encode(message: MapSetPortals, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetPortals;
    fromJSON(object: any): MapSetPortals;
    toJSON(message: MapSetPortals): unknown;
    fromPartial(object: DeepPartial<MapSetPortals>): MapSetPortals;
};
export declare const MapSetAnnouncer: {
    encode(message: MapSetAnnouncer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetAnnouncer;
    fromJSON(object: any): MapSetAnnouncer;
    toJSON(message: MapSetAnnouncer): unknown;
    fromPartial(object: DeepPartial<MapSetAnnouncer>): MapSetAnnouncer;
};
export declare const MapSetAudio: {
    encode(message: MapSetAudio, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetAudio;
    fromJSON(object: any): MapSetAudio;
    toJSON(message: MapSetAudio): unknown;
    fromPartial(object: DeepPartial<MapSetAudio>): MapSetAudio;
};
export declare const MapSetAnimations: {
    encode(message: MapSetAnimations, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetAnimations;
    fromJSON(object: any): MapSetAnimations;
    toJSON(message: MapSetAnimations): unknown;
    fromPartial(object: DeepPartial<MapSetAnimations>): MapSetAnimations;
};
export declare const MapSetAssets: {
    encode(message: MapSetAssets, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetAssets;
    fromJSON(object: any): MapSetAssets;
    toJSON(message: MapSetAssets): unknown;
    fromPartial(object: DeepPartial<MapSetAssets>): MapSetAssets;
};
export declare const MapSetObjects: {
    encode(message: MapSetObjects, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetObjects;
    fromJSON(object: any): MapSetObjects;
    toJSON(message: MapSetObjects): unknown;
    fromPartial(object: DeepPartial<MapSetObjects>): MapSetObjects;
};
export declare const MapSetObjects_ObjectsEntry: {
    encode(message: MapSetObjects_ObjectsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetObjects_ObjectsEntry;
    fromJSON(object: any): MapSetObjects_ObjectsEntry;
    toJSON(message: MapSetObjects_ObjectsEntry): unknown;
    fromPartial(object: DeepPartial<MapSetObjects_ObjectsEntry>): MapSetObjects_ObjectsEntry;
};
export declare const MapSetName: {
    encode(message: MapSetName, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetName;
    fromJSON(object: any): MapSetName;
    toJSON(message: MapSetName): unknown;
    fromPartial(object: DeepPartial<MapSetName>): MapSetName;
};
export declare const MapSetDefaultChat: {
    encode(message: MapSetDefaultChat, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetDefaultChat;
    fromJSON(object: any): MapSetDefaultChat;
    toJSON(message: MapSetDefaultChat): unknown;
    fromPartial(object: DeepPartial<MapSetDefaultChat>): MapSetDefaultChat;
};
export declare const MapSetMuteOnEntry: {
    encode(message: MapSetMuteOnEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetMuteOnEntry;
    fromJSON(object: any): MapSetMuteOnEntry;
    toJSON(message: MapSetMuteOnEntry): unknown;
    fromPartial(object: DeepPartial<MapSetMuteOnEntry>): MapSetMuteOnEntry;
};
export declare const MapSetUseDrawnBG: {
    encode(message: MapSetUseDrawnBG, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetUseDrawnBG;
    fromJSON(object: any): MapSetUseDrawnBG;
    toJSON(message: MapSetUseDrawnBG): unknown;
    fromPartial(object: DeepPartial<MapSetUseDrawnBG>): MapSetUseDrawnBG;
};
export declare const MapSetWalls: {
    encode(message: MapSetWalls, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetWalls;
    fromJSON(object: any): MapSetWalls;
    toJSON(message: MapSetWalls): unknown;
    fromPartial(object: DeepPartial<MapSetWalls>): MapSetWalls;
};
export declare const MapSetWalls_WallsEntry: {
    encode(message: MapSetWalls_WallsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetWalls_WallsEntry;
    fromJSON(object: any): MapSetWalls_WallsEntry;
    toJSON(message: MapSetWalls_WallsEntry): unknown;
    fromPartial(object: DeepPartial<MapSetWalls_WallsEntry>): MapSetWalls_WallsEntry;
};
export declare const MapSetFloors: {
    encode(message: MapSetFloors, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetFloors;
    fromJSON(object: any): MapSetFloors;
    toJSON(message: MapSetFloors): unknown;
    fromPartial(object: DeepPartial<MapSetFloors>): MapSetFloors;
};
export declare const MapSetFloors_FloorsEntry: {
    encode(message: MapSetFloors_FloorsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetFloors_FloorsEntry;
    fromJSON(object: any): MapSetFloors_FloorsEntry;
    toJSON(message: MapSetFloors_FloorsEntry): unknown;
    fromPartial(object: DeepPartial<MapSetFloors_FloorsEntry>): MapSetFloors_FloorsEntry;
};
export declare const MapSetAreas: {
    encode(message: MapSetAreas, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetAreas;
    fromJSON(object: any): MapSetAreas;
    toJSON(message: MapSetAreas): unknown;
    fromPartial(object: DeepPartial<MapSetAreas>): MapSetAreas;
};
export declare const MapSetAreas_AreasEntry: {
    encode(message: MapSetAreas_AreasEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapSetAreas_AreasEntry;
    fromJSON(object: any): MapSetAreas_AreasEntry;
    toJSON(message: MapSetAreas_AreasEntry): unknown;
    fromPartial(object: DeepPartial<MapSetAreas_AreasEntry>): MapSetAreas_AreasEntry;
};
export declare const MapDeleteObject: {
    encode(message: MapDeleteObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapDeleteObject;
    fromJSON(object: any): MapDeleteObject;
    toJSON(message: MapDeleteObject): unknown;
    fromPartial(object: DeepPartial<MapDeleteObject>): MapDeleteObject;
};
export declare const ServerClientBatch: {
    encode(message: ServerClientBatch, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ServerClientBatch;
    fromJSON(object: any): ServerClientBatch;
    toJSON(message: ServerClientBatch): unknown;
    fromPartial(object: DeepPartial<ServerClientBatch>): ServerClientBatch;
};
export declare const ServerClientEvent: {
    encode(message: ServerClientEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ServerClientEvent;
    fromJSON(object: any): ServerClientEvent;
    toJSON(message: ServerClientEvent): unknown;
    fromPartial(object: DeepPartial<ServerClientEvent>): ServerClientEvent;
};
export declare const ServerHeartbeat: {
    encode(message: ServerHeartbeat, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ServerHeartbeat;
    fromJSON(object: any): ServerHeartbeat;
    toJSON(message: ServerHeartbeat): unknown;
    fromPartial(object: DeepPartial<ServerHeartbeat>): ServerHeartbeat;
};
export declare const Info: {
    encode(message: Info, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Info;
    fromJSON(object: any): Info;
    toJSON(message: Info): unknown;
    fromPartial(object: DeepPartial<Info>): Info;
};
export declare const Warn: {
    encode(message: Warn, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Warn;
    fromJSON(object: any): Warn;
    toJSON(message: Warn): unknown;
    fromPartial(object: DeepPartial<Warn>): Warn;
};
export declare const Error: {
    encode(message: Error, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Error;
    fromJSON(object: any): Error;
    toJSON(message: Error): unknown;
    fromPartial(object: DeepPartial<Error>): Error;
};
export declare const Ready: {
    encode(message: Ready, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Ready;
    fromJSON(object: any): Ready;
    toJSON(message: Ready): unknown;
    fromPartial(object: DeepPartial<Ready>): Ready;
};
export declare const DisableVideo: {
    encode(_: DisableVideo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DisableVideo;
    fromJSON(_: any): DisableVideo;
    toJSON(_: DisableVideo): unknown;
    fromPartial(_: DeepPartial<DisableVideo>): DisableVideo;
};
export declare const PlayerMoves: {
    encode(message: PlayerMoves, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerMoves;
    fromJSON(object: any): PlayerMoves;
    toJSON(message: PlayerMoves): unknown;
    fromPartial(object: DeepPartial<PlayerMoves>): PlayerMoves;
};
export declare const PlayerSetsStatus: {
    encode(message: PlayerSetsStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsStatus;
    fromJSON(object: any): PlayerSetsStatus;
    toJSON(message: PlayerSetsStatus): unknown;
    fromPartial(object: DeepPartial<PlayerSetsStatus>): PlayerSetsStatus;
};
export declare const PlayerSpotlights: {
    encode(message: PlayerSpotlights, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSpotlights;
    fromJSON(object: any): PlayerSpotlights;
    toJSON(message: PlayerSpotlights): unknown;
    fromPartial(object: DeepPartial<PlayerSpotlights>): PlayerSpotlights;
};
export declare const PlayerRings: {
    encode(message: PlayerRings, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerRings;
    fromJSON(object: any): PlayerRings;
    toJSON(message: PlayerRings): unknown;
    fromPartial(object: DeepPartial<PlayerRings>): PlayerRings;
};
export declare const PlayerSetsPointer: {
    encode(message: PlayerSetsPointer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsPointer;
    fromJSON(object: any): PlayerSetsPointer;
    toJSON(message: PlayerSetsPointer): unknown;
    fromPartial(object: DeepPartial<PlayerSetsPointer>): PlayerSetsPointer;
};
export declare const PlayerSetsImagePointer: {
    encode(message: PlayerSetsImagePointer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsImagePointer;
    fromJSON(object: any): PlayerSetsImagePointer;
    toJSON(message: PlayerSetsImagePointer): unknown;
    fromPartial(object: DeepPartial<PlayerSetsImagePointer>): PlayerSetsImagePointer;
};
export declare const PlayerChats: {
    encode(message: PlayerChats, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerChats;
    fromJSON(object: any): PlayerChats;
    toJSON(message: PlayerChats): unknown;
    fromPartial(object: DeepPartial<PlayerChats>): PlayerChats;
};
export declare const Timestamp: {
    encode(message: Timestamp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Timestamp;
    fromJSON(object: any): Timestamp;
    toJSON(message: Timestamp): unknown;
    fromPartial(object: DeepPartial<Timestamp>): Timestamp;
};
export declare const PlayerInteracts: {
    encode(message: PlayerInteracts, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerInteracts;
    fromJSON(object: any): PlayerInteracts;
    toJSON(message: PlayerInteracts): unknown;
    fromPartial(object: DeepPartial<PlayerInteracts>): PlayerInteracts;
};
export declare const PlayerGhosts: {
    encode(message: PlayerGhosts, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerGhosts;
    fromJSON(object: any): PlayerGhosts;
    toJSON(message: PlayerGhosts): unknown;
    fromPartial(object: DeepPartial<PlayerGhosts>): PlayerGhosts;
};
export declare const PlayerEntersWhisper: {
    encode(message: PlayerEntersWhisper, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerEntersWhisper;
    fromJSON(object: any): PlayerEntersWhisper;
    toJSON(message: PlayerEntersWhisper): unknown;
    fromPartial(object: DeepPartial<PlayerEntersWhisper>): PlayerEntersWhisper;
};
export declare const PlayerEntersWhisperV2: {
    encode(message: PlayerEntersWhisperV2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerEntersWhisperV2;
    fromJSON(object: any): PlayerEntersWhisperV2;
    toJSON(message: PlayerEntersWhisperV2): unknown;
    fromPartial(object: DeepPartial<PlayerEntersWhisperV2>): PlayerEntersWhisperV2;
};
export declare const PlayerLeavesWhisper: {
    encode(message: PlayerLeavesWhisper, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerLeavesWhisper;
    fromJSON(object: any): PlayerLeavesWhisper;
    toJSON(message: PlayerLeavesWhisper): unknown;
    fromPartial(object: DeepPartial<PlayerLeavesWhisper>): PlayerLeavesWhisper;
};
export declare const PlayerActivelySpeaks: {
    encode(message: PlayerActivelySpeaks, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerActivelySpeaks;
    fromJSON(object: any): PlayerActivelySpeaks;
    toJSON(message: PlayerActivelySpeaks): unknown;
    fromPartial(object: DeepPartial<PlayerActivelySpeaks>): PlayerActivelySpeaks;
};
export declare const PlayerSetsEmote: {
    encode(message: PlayerSetsEmote, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsEmote;
    fromJSON(object: any): PlayerSetsEmote;
    toJSON(message: PlayerSetsEmote): unknown;
    fromPartial(object: DeepPartial<PlayerSetsEmote>): PlayerSetsEmote;
};
export declare const PlayerSetsWorkCondition: {
    encode(message: PlayerSetsWorkCondition, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsWorkCondition;
    fromJSON(object: any): PlayerSetsWorkCondition;
    toJSON(message: PlayerSetsWorkCondition): unknown;
    fromPartial(object: DeepPartial<PlayerSetsWorkCondition>): PlayerSetsWorkCondition;
};
export declare const PlayerSetsLastActive: {
    encode(message: PlayerSetsLastActive, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsLastActive;
    fromJSON(object: any): PlayerSetsLastActive;
    toJSON(message: PlayerSetsLastActive): unknown;
    fromPartial(object: DeepPartial<PlayerSetsLastActive>): PlayerSetsLastActive;
};
export declare const PlayerSetsName: {
    encode(message: PlayerSetsName, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsName;
    fromJSON(object: any): PlayerSetsName;
    toJSON(message: PlayerSetsName): unknown;
    fromPartial(object: DeepPartial<PlayerSetsName>): PlayerSetsName;
};
export declare const PlayerSetsTextStatus: {
    encode(message: PlayerSetsTextStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsTextStatus;
    fromJSON(object: any): PlayerSetsTextStatus;
    toJSON(message: PlayerSetsTextStatus): unknown;
    fromPartial(object: DeepPartial<PlayerSetsTextStatus>): PlayerSetsTextStatus;
};
export declare const PlayerSetsEmojiStatus: {
    encode(message: PlayerSetsEmojiStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsEmojiStatus;
    fromJSON(object: any): PlayerSetsEmojiStatus;
    toJSON(message: PlayerSetsEmojiStatus): unknown;
    fromPartial(object: DeepPartial<PlayerSetsEmojiStatus>): PlayerSetsEmojiStatus;
};
export declare const PlayerSetsAffiliation: {
    encode(message: PlayerSetsAffiliation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsAffiliation;
    fromJSON(object: any): PlayerSetsAffiliation;
    toJSON(message: PlayerSetsAffiliation): unknown;
    fromPartial(object: DeepPartial<PlayerSetsAffiliation>): PlayerSetsAffiliation;
};
export declare const PlayerExits: {
    encode(message: PlayerExits, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerExits;
    fromJSON(object: any): PlayerExits;
    toJSON(message: PlayerExits): unknown;
    fromPartial(object: DeepPartial<PlayerExits>): PlayerExits;
};
export declare const PlayerSetsSprite: {
    encode(message: PlayerSetsSprite, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsSprite;
    fromJSON(object: any): PlayerSetsSprite;
    toJSON(message: PlayerSetsSprite): unknown;
    fromPartial(object: DeepPartial<PlayerSetsSprite>): PlayerSetsSprite;
};
export declare const PlayerSetsOutfitString: {
    encode(message: PlayerSetsOutfitString, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsOutfitString;
    fromJSON(object: any): PlayerSetsOutfitString;
    toJSON(message: PlayerSetsOutfitString): unknown;
    fromPartial(object: DeepPartial<PlayerSetsOutfitString>): PlayerSetsOutfitString;
};
export declare const PlayerSetsIsSignedIn: {
    encode(message: PlayerSetsIsSignedIn, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsIsSignedIn;
    fromJSON(object: any): PlayerSetsIsSignedIn;
    toJSON(message: PlayerSetsIsSignedIn): unknown;
    fromPartial(object: DeepPartial<PlayerSetsIsSignedIn>): PlayerSetsIsSignedIn;
};
export declare const RespawnComplete: {
    encode(_: RespawnComplete, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RespawnComplete;
    fromJSON(_: any): RespawnComplete;
    toJSON(_: RespawnComplete): unknown;
    fromPartial(_: DeepPartial<RespawnComplete>): RespawnComplete;
};
export declare const MapUpdates: {
    encode(message: MapUpdates, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapUpdates;
    fromJSON(object: any): MapUpdates;
    toJSON(message: MapUpdates): unknown;
    fromPartial(object: DeepPartial<MapUpdates>): MapUpdates;
};
export declare const MapOverwrites: {
    encode(message: MapOverwrites, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapOverwrites;
    fromJSON(object: any): MapOverwrites;
    toJSON(message: MapOverwrites): unknown;
    fromPartial(object: DeepPartial<MapOverwrites>): MapOverwrites;
};
export declare const SpaceOverwrites: {
    encode(message: SpaceOverwrites, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SpaceOverwrites;
    fromJSON(object: any): SpaceOverwrites;
    toJSON(message: SpaceOverwrites): unknown;
    fromPartial(object: DeepPartial<SpaceOverwrites>): SpaceOverwrites;
};
export declare const SpaceIsClosed: {
    encode(_: SpaceIsClosed, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SpaceIsClosed;
    fromJSON(_: any): SpaceIsClosed;
    toJSON(_: SpaceIsClosed): unknown;
    fromPartial(_: DeepPartial<SpaceIsClosed>): SpaceIsClosed;
};
export declare const PlayerEntersPortal: {
    encode(message: PlayerEntersPortal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerEntersPortal;
    fromJSON(object: any): PlayerEntersPortal;
    toJSON(message: PlayerEntersPortal): unknown;
    fromPartial(object: DeepPartial<PlayerEntersPortal>): PlayerEntersPortal;
};
export declare const CookieFound: {
    encode(message: CookieFound, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CookieFound;
    fromJSON(object: any): CookieFound;
    toJSON(message: CookieFound): unknown;
    fromPartial(object: DeepPartial<CookieFound>): CookieFound;
};
export declare const SpaceSetsIdMapping: {
    encode(message: SpaceSetsIdMapping, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SpaceSetsIdMapping;
    fromJSON(object: any): SpaceSetsIdMapping;
    toJSON(message: SpaceSetsIdMapping): unknown;
    fromPartial(object: DeepPartial<SpaceSetsIdMapping>): SpaceSetsIdMapping;
};
export declare const PlayerShootsConfetti: {
    encode(message: PlayerShootsConfetti, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerShootsConfetti;
    fromJSON(object: any): PlayerShootsConfetti;
    toJSON(message: PlayerShootsConfetti): unknown;
    fromPartial(object: DeepPartial<PlayerShootsConfetti>): PlayerShootsConfetti;
};
export declare const PlayerSetsEventStatus: {
    encode(message: PlayerSetsEventStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsEventStatus;
    fromJSON(object: any): PlayerSetsEventStatus;
    toJSON(message: PlayerSetsEventStatus): unknown;
    fromPartial(object: DeepPartial<PlayerSetsEventStatus>): PlayerSetsEventStatus;
};
export declare const PlayerSetsInConversation: {
    encode(message: PlayerSetsInConversation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsInConversation;
    fromJSON(object: any): PlayerSetsInConversation;
    toJSON(message: PlayerSetsInConversation): unknown;
    fromPartial(object: DeepPartial<PlayerSetsInConversation>): PlayerSetsInConversation;
};
export declare const PlayerSetsCurrentDesk: {
    encode(message: PlayerSetsCurrentDesk, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsCurrentDesk;
    fromJSON(object: any): PlayerSetsCurrentDesk;
    toJSON(message: PlayerSetsCurrentDesk): unknown;
    fromPartial(object: DeepPartial<PlayerSetsCurrentDesk>): PlayerSetsCurrentDesk;
};
export declare const PlayerSetsCurrentArea: {
    encode(message: PlayerSetsCurrentArea, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsCurrentArea;
    fromJSON(object: any): PlayerSetsCurrentArea;
    toJSON(message: PlayerSetsCurrentArea): unknown;
    fromPartial(object: DeepPartial<PlayerSetsCurrentArea>): PlayerSetsCurrentArea;
};
export declare const PlayerSetsGoKartId: {
    encode(message: PlayerSetsGoKartId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PlayerSetsGoKartId;
    fromJSON(object: any): PlayerSetsGoKartId;
    toJSON(message: PlayerSetsGoKartId): unknown;
    fromPartial(object: DeepPartial<PlayerSetsGoKartId>): PlayerSetsGoKartId;
};
export declare const ClientServerBatch: {
    encode(message: ClientServerBatch, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ClientServerBatch;
    fromJSON(object: any): ClientServerBatch;
    toJSON(message: ClientServerBatch): unknown;
    fromPartial(object: DeepPartial<ClientServerBatch>): ClientServerBatch;
};
export declare const ClientServerAction: {
    encode(message: ClientServerAction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ClientServerAction;
    fromJSON(object: any): ClientServerAction;
    toJSON(message: ClientServerAction): unknown;
    fromPartial(object: DeepPartial<ClientServerAction>): ClientServerAction;
};
export declare const ClientHeartbeat: {
    encode(_: ClientHeartbeat, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ClientHeartbeat;
    fromJSON(_: any): ClientHeartbeat;
    toJSON(_: ClientHeartbeat): unknown;
    fromPartial(_: DeepPartial<ClientHeartbeat>): ClientHeartbeat;
};
export declare const UpdateSubscriptions: {
    encode(message: UpdateSubscriptions, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateSubscriptions;
    fromJSON(object: any): UpdateSubscriptions;
    toJSON(message: UpdateSubscriptions): unknown;
    fromPartial(object: DeepPartial<UpdateSubscriptions>): UpdateSubscriptions;
};
export declare const UpdateSubscriptions_SubscriptionsEntry: {
    encode(message: UpdateSubscriptions_SubscriptionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateSubscriptions_SubscriptionsEntry;
    fromJSON(object: any): UpdateSubscriptions_SubscriptionsEntry;
    toJSON(message: UpdateSubscriptions_SubscriptionsEntry): unknown;
    fromPartial(object: DeepPartial<UpdateSubscriptions_SubscriptionsEntry>): UpdateSubscriptions_SubscriptionsEntry;
};
export declare const Move: {
    encode(message: Move, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Move;
    fromJSON(object: any): Move;
    toJSON(message: Move): unknown;
    fromPartial(object: DeepPartial<Move>): Move;
};
export declare const SetSprite: {
    encode(message: SetSprite, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetSprite;
    fromJSON(object: any): SetSprite;
    toJSON(message: SetSprite): unknown;
    fromPartial(object: DeepPartial<SetSprite>): SetSprite;
};
export declare const SetAffiliation: {
    encode(message: SetAffiliation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetAffiliation;
    fromJSON(object: any): SetAffiliation;
    toJSON(message: SetAffiliation): unknown;
    fromPartial(object: DeepPartial<SetAffiliation>): SetAffiliation;
};
export declare const SetStatus: {
    encode(message: SetStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetStatus;
    fromJSON(object: any): SetStatus;
    toJSON(message: SetStatus): unknown;
    fromPartial(object: DeepPartial<SetStatus>): SetStatus;
};
export declare const SetOutfitString: {
    encode(message: SetOutfitString, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetOutfitString;
    fromJSON(object: any): SetOutfitString;
    toJSON(message: SetOutfitString): unknown;
    fromPartial(object: DeepPartial<SetOutfitString>): SetOutfitString;
};
export declare const Spotlight: {
    encode(message: Spotlight, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Spotlight;
    fromJSON(object: any): Spotlight;
    toJSON(message: Spotlight): unknown;
    fromPartial(object: DeepPartial<Spotlight>): Spotlight;
};
export declare const Ring: {
    encode(message: Ring, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Ring;
    fromJSON(object: any): Ring;
    toJSON(message: Ring): unknown;
    fromPartial(object: DeepPartial<Ring>): Ring;
};
export declare const SetPointer: {
    encode(message: SetPointer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetPointer;
    fromJSON(object: any): SetPointer;
    toJSON(message: SetPointer): unknown;
    fromPartial(object: DeepPartial<SetPointer>): SetPointer;
};
export declare const SetImagePointer: {
    encode(message: SetImagePointer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetImagePointer;
    fromJSON(object: any): SetImagePointer;
    toJSON(message: SetImagePointer): unknown;
    fromPartial(object: DeepPartial<SetImagePointer>): SetImagePointer;
};
export declare const Ban: {
    encode(message: Ban, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Ban;
    fromJSON(object: any): Ban;
    toJSON(message: Ban): unknown;
    fromPartial(object: DeepPartial<Ban>): Ban;
};
export declare const Kick: {
    encode(message: Kick, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Kick;
    fromJSON(object: any): Kick;
    toJSON(message: Kick): unknown;
    fromPartial(object: DeepPartial<Kick>): Kick;
};
export declare const SetImpassable: {
    encode(message: SetImpassable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetImpassable;
    fromJSON(object: any): SetImpassable;
    toJSON(message: SetImpassable): unknown;
    fromPartial(object: DeepPartial<SetImpassable>): SetImpassable;
};
export declare const Chat: {
    encode(message: Chat, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Chat;
    fromJSON(object: any): Chat;
    toJSON(message: Chat): unknown;
    fromPartial(object: DeepPartial<Chat>): Chat;
};
export declare const SetObject: {
    encode(message: SetObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetObject;
    fromJSON(object: any): SetObject;
    toJSON(message: SetObject): unknown;
    fromPartial(object: DeepPartial<SetObject>): SetObject;
};
export declare const DeleteObject: {
    encode(message: DeleteObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteObject;
    fromJSON(object: any): DeleteObject;
    toJSON(message: DeleteObject): unknown;
    fromPartial(object: DeepPartial<DeleteObject>): DeleteObject;
};
export declare const Interact: {
    encode(message: Interact, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Interact;
    fromJSON(object: any): Interact;
    toJSON(message: Interact): unknown;
    fromPartial(object: DeepPartial<Interact>): Interact;
};
export declare const ActivelySpeaking: {
    encode(message: ActivelySpeaking, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ActivelySpeaking;
    fromJSON(object: any): ActivelySpeaking;
    toJSON(message: ActivelySpeaking): unknown;
    fromPartial(object: DeepPartial<ActivelySpeaking>): ActivelySpeaking;
};
export declare const EnterWhisper: {
    encode(message: EnterWhisper, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EnterWhisper;
    fromJSON(object: any): EnterWhisper;
    toJSON(message: EnterWhisper): unknown;
    fromPartial(object: DeepPartial<EnterWhisper>): EnterWhisper;
};
export declare const LeaveWhisper: {
    encode(_: LeaveWhisper, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): LeaveWhisper;
    fromJSON(_: any): LeaveWhisper;
    toJSON(_: LeaveWhisper): unknown;
    fromPartial(_: DeepPartial<LeaveWhisper>): LeaveWhisper;
};
export declare const Ghost: {
    encode(message: Ghost, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Ghost;
    fromJSON(object: any): Ghost;
    toJSON(message: Ghost): unknown;
    fromPartial(object: DeepPartial<Ghost>): Ghost;
};
export declare const SetEmote: {
    encode(message: SetEmote, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetEmote;
    fromJSON(object: any): SetEmote;
    toJSON(message: SetEmote): unknown;
    fromPartial(object: DeepPartial<SetEmote>): SetEmote;
};
export declare const SetName: {
    encode(message: SetName, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetName;
    fromJSON(object: any): SetName;
    toJSON(message: SetName): unknown;
    fromPartial(object: DeepPartial<SetName>): SetName;
};
export declare const SetTextStatus: {
    encode(message: SetTextStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetTextStatus;
    fromJSON(object: any): SetTextStatus;
    toJSON(message: SetTextStatus): unknown;
    fromPartial(object: DeepPartial<SetTextStatus>): SetTextStatus;
};
export declare const Exit: {
    encode(_: Exit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Exit;
    fromJSON(_: any): Exit;
    toJSON(_: Exit): unknown;
    fromPartial(_: DeepPartial<Exit>): Exit;
};
export declare const Enter: {
    encode(message: Enter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Enter;
    fromJSON(object: any): Enter;
    toJSON(message: Enter): unknown;
    fromPartial(object: DeepPartial<Enter>): Enter;
};
export declare const SetEmojiStatus: {
    encode(message: SetEmojiStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetEmojiStatus;
    fromJSON(object: any): SetEmojiStatus;
    toJSON(message: SetEmojiStatus): unknown;
    fromPartial(object: DeepPartial<SetEmojiStatus>): SetEmojiStatus;
};
export declare const Teleport: {
    encode(message: Teleport, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Teleport;
    fromJSON(object: any): Teleport;
    toJSON(message: Teleport): unknown;
    fromPartial(object: DeepPartial<Teleport>): Teleport;
};
export declare const SetWorkCondition: {
    encode(message: SetWorkCondition, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetWorkCondition;
    fromJSON(object: any): SetWorkCondition;
    toJSON(message: SetWorkCondition): unknown;
    fromPartial(object: DeepPartial<SetWorkCondition>): SetWorkCondition;
};
export declare const Spawn: {
    encode(message: Spawn, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Spawn;
    fromJSON(object: any): Spawn;
    toJSON(message: Spawn): unknown;
    fromPartial(object: DeepPartial<Spawn>): Spawn;
};
export declare const Respawn: {
    encode(message: Respawn, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Respawn;
    fromJSON(object: any): Respawn;
    toJSON(message: Respawn): unknown;
    fromPartial(object: DeepPartial<Respawn>): Respawn;
};
export declare const Init: {
    encode(message: Init, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Init;
    fromJSON(object: any): Init;
    toJSON(message: Init): unknown;
    fromPartial(object: DeepPartial<Init>): Init;
};
export declare const MapUpdate: {
    encode(message: MapUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapUpdate;
    fromJSON(object: any): MapUpdate;
    toJSON(message: MapUpdate): unknown;
    fromPartial(object: DeepPartial<MapUpdate>): MapUpdate;
};
export declare const MapAddObject: {
    encode(message: MapAddObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MapAddObject;
    fromJSON(object: any): MapAddObject;
    toJSON(message: MapAddObject): unknown;
    fromPartial(object: DeepPartial<MapAddObject>): MapAddObject;
};
export declare const ShootConfetti: {
    encode(_: ShootConfetti, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ShootConfetti;
    fromJSON(_: any): ShootConfetti;
    toJSON(_: ShootConfetti): unknown;
    fromPartial(_: DeepPartial<ShootConfetti>): ShootConfetti;
};
export declare const SetEventStatus: {
    encode(message: SetEventStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetEventStatus;
    fromJSON(object: any): SetEventStatus;
    toJSON(message: SetEventStatus): unknown;
    fromPartial(object: DeepPartial<SetEventStatus>): SetEventStatus;
};
export declare const SetInConversation: {
    encode(message: SetInConversation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetInConversation;
    fromJSON(object: any): SetInConversation;
    toJSON(message: SetInConversation): unknown;
    fromPartial(object: DeepPartial<SetInConversation>): SetInConversation;
};
export declare const SetCurrentDesk: {
    encode(message: SetCurrentDesk, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetCurrentDesk;
    fromJSON(object: any): SetCurrentDesk;
    toJSON(message: SetCurrentDesk): unknown;
    fromPartial(object: DeepPartial<SetCurrentDesk>): SetCurrentDesk;
};
export declare const SetCurrentArea: {
    encode(message: SetCurrentArea, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetCurrentArea;
    fromJSON(object: any): SetCurrentArea;
    toJSON(message: SetCurrentArea): unknown;
    fromPartial(object: DeepPartial<SetCurrentArea>): SetCurrentArea;
};
export declare const SetGoKartId: {
    encode(message: SetGoKartId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetGoKartId;
    fromJSON(object: any): SetGoKartId;
    toJSON(message: SetGoKartId): unknown;
    fromPartial(object: DeepPartial<SetGoKartId>): SetGoKartId;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
