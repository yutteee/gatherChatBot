/// <reference types="node" />
export declare enum NetworkType {
    UINT8 = 0,
    UINT16 = 1,
    STRING = 2,
    BOOLEAN = 3
}
export declare type NetworkSchema = {
    keys: {
        id: string;
        type: NetworkType;
    }[];
    deltaKeys: string[];
};
export declare enum UpdateType {
    FullPosition = 0,
    DeltaPosition = 1,
    Disconnect = 2
}
interface UpdateDelta<T> {
    type: UpdateType.DeltaPosition;
    id: string;
    update: T;
}
interface UpdateFull<T> {
    type: UpdateType.FullPosition;
    id: string;
    update: T;
}
interface UpdateDisconnect {
    type: UpdateType.Disconnect;
    id: string;
}
declare type Update<T> = UpdateDelta<T> | UpdateFull<T> | UpdateDisconnect;
declare type FullGameState<T> = {
    [id: string]: UpdateFull<T>;
};
declare type DeltaGameState<T> = {
    [id: string]: Update<T>;
};
declare type InternalGameState<T> = FullGameState<T> | DeltaGameState<T>;
export declare type GameState<T> = {
    [id: string]: T;
};
export declare type PartialGameState<T> = {
    [id: string]: Partial<T> | typeof GAME_STATE_PLAYER_DISCONNECT_SYMBOL;
};
export declare const GAME_STATE_PLAYER_DISCONNECT_SYMBOL: null;
export declare class NetworkGameStateCodec<T> {
    _schema: NetworkSchema;
    _worldState: FullGameState<T>;
    _deltaWorldState: DeltaGameState<T>;
    _textEncoder: TextEncoder;
    _textDecoder: TextDecoder;
    _idMappingEnc: {
        [id: string]: number;
    };
    _idMappingDec: {
        [id: number]: string;
    };
    _nEncodedIds: number;
    constructor(schema: NetworkSchema);
    update(update: Update<T>): void;
    /**
     * Examines the current world state delta and returns an ArrayBuffer of updates, if necessary.
     * Note this does NOT free the current delta state and should be done so via `clearDelta`.
     */
    serializeDelta: () => ArrayBuffer | null;
    /**
     * Resets the world state delta.
     */
    clearDelta: () => void;
    /**
     * Serializes and returns the current world state delta, while also freeing the current delta.
     */
    flushDelta: () => ArrayBuffer | null;
    serialize(): ArrayBuffer;
    deserialize(buf: Uint8Array): [GameState<T>, PartialGameState<T>];
    _reduce(worldState: InternalGameState<T>, update: Update<T>): InternalGameState<T>;
    _serializeOne(update: Update<T>): Buffer | undefined;
    _deserializeOne(buf: Uint8Array, offset: number): number;
}
export {};
