"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
exports.__esModule = true;
exports.NetworkGameStateCodec = exports.GAME_STATE_PLAYER_DISCONNECT_SYMBOL = exports.UpdateType = exports.NetworkType = void 0;
var buffer_1 = require("buffer");
var NetworkType;
(function (NetworkType) {
    NetworkType[NetworkType["UINT8"] = 0] = "UINT8";
    NetworkType[NetworkType["UINT16"] = 1] = "UINT16";
    NetworkType[NetworkType["STRING"] = 2] = "STRING";
    NetworkType[NetworkType["BOOLEAN"] = 3] = "BOOLEAN";
})(NetworkType = exports.NetworkType || (exports.NetworkType = {}));
var UpdateType;
(function (UpdateType) {
    UpdateType[UpdateType["FullPosition"] = 0] = "FullPosition";
    UpdateType[UpdateType["DeltaPosition"] = 1] = "DeltaPosition";
    UpdateType[UpdateType["Disconnect"] = 2] = "Disconnect";
})(UpdateType = exports.UpdateType || (exports.UpdateType = {}));
exports.GAME_STATE_PLAYER_DISCONNECT_SYMBOL = null;
var NetworkGameStateCodec = /** @class */ (function () {
    function NetworkGameStateCodec(schema) {
        var _this = this;
        // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
        this._schema = undefined;
        this._worldState = {};
        this._deltaWorldState = {};
        this._textEncoder = new TextEncoder();
        this._textDecoder = new TextDecoder("utf-8");
        this._idMappingEnc = {};
        this._idMappingDec = {};
        this._nEncodedIds = 0;
        /**
         * Examines the current world state delta and returns an ArrayBuffer of updates, if necessary.
         * Note this does NOT free the current delta state and should be done so via `clearDelta`.
         */
        this.serializeDelta = function () {
            if (Object.keys(_this._deltaWorldState).length === 0) {
                return null;
            }
            var delta = buffer_1.Buffer.concat(
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            Object.values(_this._deltaWorldState).map(function (update) {
                return _this._serializeOne(update);
            }));
            return delta;
        };
        /**
         * Resets the world state delta.
         */
        this.clearDelta = function () {
            _this._deltaWorldState = {};
        };
        /**
         * Serializes and returns the current world state delta, while also freeing the current delta.
         */
        this.flushDelta = function () {
            var delta = _this.serializeDelta();
            _this.clearDelta();
            return delta;
        };
        this._schema = schema;
    }
    NetworkGameStateCodec.prototype.update = function (update) {
        this._deltaWorldState = this._reduce(this._deltaWorldState, update);
        this._worldState = this._reduce(this._worldState, update);
    };
    NetworkGameStateCodec.prototype.serialize = function () {
        var _this = this;
        return buffer_1.Buffer.concat(
        // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
        Object.values(this._worldState).map(function (update) {
            return _this._serializeOne(update);
        }));
    };
    // returns new reduced state and the deserialized delta
    NetworkGameStateCodec.prototype.deserialize = function (buf) {
        var _this = this;
        this._deltaWorldState = {};
        var n = 0;
        while (n < buf.byteLength) {
            n = this._deserializeOne(buf, n);
        }
        Object.values(this._deltaWorldState).forEach(function (update) {
            _this._worldState = _this._reduce(_this._worldState, update);
        });
        var full = {};
        Object.keys(this._worldState).forEach(function (id) {
            full[id] = _this._worldState[id].update;
        });
        var partial = {};
        Object.keys(this._deltaWorldState).forEach(function (id) {
            var deltaPlayerState = _this._deltaWorldState[id];
            switch (deltaPlayerState.type) {
                case UpdateType.FullPosition:
                case UpdateType.DeltaPosition:
                    partial[id] = deltaPlayerState.update;
                    break;
                case UpdateType.Disconnect:
                    partial[id] = exports.GAME_STATE_PLAYER_DISCONNECT_SYMBOL;
                    break;
            }
        });
        return [full, partial];
    };
    // a function that takes a gamestate and an update to that gamestate and returns
    // a new gamestate that is sufficient to recreate the current state of the world
    // for anyone who is up to date with the last serialized update
    // should enforce FullGameState x Update.Any -> FullGameState
    NetworkGameStateCodec.prototype._reduce = function (worldState, update) {
        if (update.id === undefined) {
            console.error("error! invalid id encountered in networkgamestatecodec _reduce");
            return worldState;
        }
        if (update.type === UpdateType.FullPosition) {
            worldState[update.id] = update;
        }
        else if (update.type === UpdateType.DeltaPosition) {
            if (!worldState[update.id]) {
                worldState[update.id] = update;
            }
            else if (worldState[update.id].type === UpdateType.FullPosition) {
                var full_1 = this._worldState[update.id];
                this._schema.deltaKeys.forEach(function (k) {
                    full_1.update[k] = update.update[k];
                });
            }
            else {
                worldState[update.id] = update;
            }
        }
        else if (update.type === UpdateType.Disconnect) {
            if (worldState === this._worldState) {
                delete worldState[update.id];
            }
            else {
                worldState[update.id] = update;
            }
        }
        return worldState;
    };
    NetworkGameStateCodec.prototype._serializeOne = function (update) {
        var _this = this;
        var vals = [];
        var offsets = [];
        var strings = [];
        var setUint8 = function (val) {
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            vals.push(val);
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            offsets.push(1);
        };
        var setUint16 = function (val) {
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            vals.push(val);
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            offsets.push(2);
        };
        var setString = function (val) {
            var bytes = _this._textEncoder.encode(val);
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            vals.push(bytes.byteLength);
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            offsets.push(2);
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            strings.push(buffer_1.Buffer.from(bytes));
        };
        var setBoolean = function (val) {
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            vals.push(Number(val));
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            offsets.push(1);
        };
        var generate = function () {
            var len = __spreadArray([0], offsets).reduce(function (x, y) { return x + y; });
            var buf = new ArrayBuffer(len);
            var dv = new DataView(buf);
            var offset = 0;
            for (var i = 0; i < offsets.length; ++i) {
                if (offsets[i] === 1) {
                    dv.setUint8(offset, vals[i]);
                }
                else if (offsets[i] === 2) {
                    dv.setUint16(offset, vals[i], true);
                }
                offset += offsets[i];
            }
            return buffer_1.Buffer.concat(__spreadArray([buffer_1.Buffer.from(buf)], strings));
        };
        var setUpdate = function (keys, update) {
            var uints = keys.filter(function (k) { return k.type === NetworkType.UINT8 || k.type === NetworkType.UINT16; });
            var booleans = keys.filter(function (k) { return k.type === NetworkType.BOOLEAN; });
            var strings = keys.filter(function (k) { return k.type === NetworkType.STRING; });
            for (var _i = 0, uints_1 = uints; _i < uints_1.length; _i++) {
                var ns = uints_1[_i];
                if (ns.type === NetworkType.UINT8) {
                    setUint8(update[ns.id]);
                }
                else if (ns.type === NetworkType.UINT16) {
                    setUint16(update[ns.id]);
                }
            }
            for (var _a = 0, booleans_1 = booleans; _a < booleans_1.length; _a++) {
                var b = booleans_1[_a];
                setBoolean(update[b.id]);
            }
            for (var _b = 0, strings_1 = strings; _b < strings_1.length; _b++) {
                var s = strings_1[_b];
                setString(update[s.id]);
            }
        };
        if (update.type === UpdateType.FullPosition) {
            var full = update;
            var mappedId = void 0;
            if (this._idMappingEnc[full.id]) {
                mappedId = this._idMappingEnc[full.id];
            }
            else {
                mappedId = ++this._nEncodedIds;
                this._idMappingEnc[full.id] = mappedId;
            }
            setUint8(UpdateType.FullPosition);
            setUint16(mappedId);
            setUpdate(this._schema.keys, full.update);
            setString(full.id);
            return generate();
        }
        else if (update.type === UpdateType.DeltaPosition) {
            var delta = update;
            var mappedId = this._idMappingEnc[delta.id];
            var deltaKeys = this._schema.keys.filter(function (k) { return _this._schema.deltaKeys.includes(k.id); });
            setUint8(UpdateType.DeltaPosition);
            setUint16(mappedId);
            setUpdate(deltaKeys, delta.update);
            return generate();
        }
        else if (update.type === UpdateType.Disconnect) {
            var id = this._idMappingEnc[update.id];
            delete this._idMappingEnc[id];
            setUint8(update.type);
            setUint16(id);
            return generate();
        }
    };
    NetworkGameStateCodec.prototype._deserializeOne = function (buf, offset) {
        var _this = this;
        var dv = new DataView(buf.buffer, buf.byteOffset + offset);
        var pos = 0;
        var stringLengths = [];
        var getUint8 = function () {
            var val = dv.getUint8(pos);
            pos += 1;
            return val;
        };
        var getUint16 = function () {
            var val = dv.getUint16(pos, true);
            pos += 2;
            return val;
        };
        var getStringLength = function () {
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            stringLengths.push(dv.getUint16(pos, true));
            pos += 2;
        };
        var getString = function () {
            var len = stringLengths.shift();
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            var stringBytes = buf.slice(offset + pos, offset + pos + len);
            // @ts-ignore Error auto-ignored when enabling TS strictNullChecks. PLEASE HELP FIX THESE! YES, YOU. Delete this and fix the error, if any.
            pos += len;
            return _this._textDecoder.decode(stringBytes);
        };
        var getBoolean = function () {
            var val = dv.getUint8(pos);
            pos += 1;
            return !!val;
        };
        var type = getUint8();
        if (type === UpdateType.FullPosition) {
            var position = {};
            var update = {};
            var mappedId = getUint16();
            position.type = type;
            position.update = update;
            var uints = this._schema.keys.filter(function (k) { return k.type === NetworkType.UINT8 || k.type === NetworkType.UINT16; });
            var strings = this._schema.keys.filter(function (k) { return k.type === NetworkType.STRING; });
            var booleans = this._schema.keys.filter(function (k) { return k.type === NetworkType.BOOLEAN; });
            for (var _i = 0, uints_2 = uints; _i < uints_2.length; _i++) {
                var ns = uints_2[_i];
                if (ns.type === NetworkType.UINT8) {
                    update[ns.id] = getUint8();
                }
                else if (ns.type === NetworkType.UINT16) {
                    update[ns.id] = getUint16();
                }
            }
            for (var _a = 0, booleans_2 = booleans; _a < booleans_2.length; _a++) {
                var b = booleans_2[_a];
                update[b.id] = getBoolean();
            }
            for (var _b = 0, strings_2 = strings; _b < strings_2.length; _b++) {
                var _s = strings_2[_b];
                getStringLength();
            }
            getStringLength(); // id
            for (var _c = 0, strings_3 = strings; _c < strings_3.length; _c++) {
                var s = strings_3[_c];
                update[s.id] = getString();
            }
            position.id = getString();
            this._idMappingDec[mappedId] = position.id;
            this._deltaWorldState[position.id] = position;
        }
        else if (type === UpdateType.DeltaPosition) {
            var position = {};
            var update = {};
            position.type = type;
            position.id = this._idMappingDec[getUint16()];
            position.update = update;
            var notStrings = this._schema.keys.filter(function (k) { return _this._schema.deltaKeys.includes(k.id) && k.type !== NetworkType.STRING; });
            var strings = this._schema.keys.filter(function (k) { return _this._schema.deltaKeys.includes(k.id) && k.type === NetworkType.STRING; });
            for (var _d = 0, notStrings_1 = notStrings; _d < notStrings_1.length; _d++) {
                var ns = notStrings_1[_d];
                if (ns.type === NetworkType.UINT8) {
                    update[ns.id] = getUint8();
                }
                else if (ns.type === NetworkType.UINT16) {
                    update[ns.id] = getUint16();
                }
            }
            for (var _e = 0, strings_4 = strings; _e < strings_4.length; _e++) {
                var _s = strings_4[_e];
                getStringLength();
            }
            for (var _f = 0, strings_5 = strings; _f < strings_5.length; _f++) {
                var s = strings_5[_f];
                update[s.id] = getString();
            }
            this._deltaWorldState[position.id] = position;
        }
        else if (type === UpdateType.Disconnect) {
            var position = {};
            var id = this._idMappingDec[getUint16()];
            position.type = type;
            position.id = id;
            this._deltaWorldState[id] = position;
            delete this._idMappingDec[id];
        }
        return offset + pos;
    };
    return NetworkGameStateCodec;
}());
exports.NetworkGameStateCodec = NetworkGameStateCodec;
//# sourceMappingURL=NetworkGameStateCodec.js.map