"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.PlayerSetsOutfitString = exports.PlayerSetsSprite = exports.PlayerExits = exports.PlayerSetsAffiliation = exports.PlayerSetsEmojiStatus = exports.PlayerSetsTextStatus = exports.PlayerSetsName = exports.PlayerSetsLastActive = exports.PlayerSetsWorkCondition = exports.PlayerSetsEmote = exports.PlayerActivelySpeaks = exports.PlayerLeavesWhisper = exports.PlayerEntersWhisper = exports.PlayerGhosts = exports.PlayerInteracts = exports.Timestamp = exports.PlayerChats = exports.PlayerSetsImagePointer = exports.PlayerSetsPointer = exports.PlayerRings = exports.PlayerSpotlights = exports.PlayerSetsStatus = exports.PlayerMoves = exports.DisableVideo = exports.Ready = exports.Error = exports.Warn = exports.Info = exports.ServerHeartbeat = exports.ServerClientEvent = exports.ServerClientBatch = exports.DBOutfit = exports.SpaceUserInfo = exports.InteractionEnum = exports.EmoteEnum = exports.MoveDirectionEnum = exports.SpriteDirectionEnum = exports.interactionEnum_ENUMToJSON = exports.interactionEnum_ENUMFromJSON = exports.InteractionEnum_ENUM = exports.emoteEnum_ENUMToJSON = exports.emoteEnum_ENUMFromJSON = exports.EmoteEnum_ENUM = exports.moveDirectionEnum_ENUMToJSON = exports.moveDirectionEnum_ENUMFromJSON = exports.MoveDirectionEnum_ENUM = exports.spriteDirectionEnum_ENUMToJSON = exports.spriteDirectionEnum_ENUMFromJSON = exports.SpriteDirectionEnum_ENUM = exports.protobufPackage = void 0;
exports.Init = exports.Respawn = exports.Spawn = exports.SetWorkCondition = exports.Teleport = exports.SetEmojiStatus = exports.Enter = exports.Exit = exports.SetTextStatus = exports.SetName = exports.SetEmote = exports.Ghost = exports.LeaveWhisper = exports.EnterWhisper = exports.ActivelySpeaking = exports.Interact = exports.DeleteObject = exports.SetObject = exports.Chat = exports.SetImpassable = exports.Kick = exports.Ban = exports.SetImagePointer = exports.SetPointer = exports.Ring = exports.Spotlight = exports.SetOutfitString = exports.SetStatus = exports.SetAffiliation = exports.SetSprite = exports.Move = exports.UpdateSubscriptions_SubscriptionsEntry = exports.UpdateSubscriptions = exports.ClientHeartbeat = exports.ClientServerAction = exports.ClientServerBatch = exports.PlayerSetsCurrentArea = exports.PlayerSetsCurrentDesk = exports.PlayerSetsInConversation = exports.PlayerSetsEventStatus = exports.PlayerShootsConfetti = exports.SpaceSetsIdMapping = exports.CookieFound = exports.PlayerEntersPortal = exports.SpaceIsClosed = exports.SpaceOverwrites = exports.MapOverwrites = exports.MapUpdates = exports.RespawnComplete = exports.PlayerSetsIsSignedIn = void 0;
exports.SetCurrentArea = exports.SetCurrentDesk = exports.SetInConversation = exports.SetEventStatus = exports.ShootConfetti = exports.MapUpdate = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "";
var SpriteDirectionEnum_ENUM;
(function (SpriteDirectionEnum_ENUM) {
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Stand"] = 0] = "Stand";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Down"] = 1] = "Down";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["DownAlt"] = 2] = "DownAlt";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Up"] = 3] = "Up";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["UpAlt"] = 4] = "UpAlt";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Left"] = 5] = "Left";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["LeftAlt"] = 6] = "LeftAlt";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Right"] = 7] = "Right";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["RightAlt"] = 8] = "RightAlt";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Dance1"] = 9] = "Dance1";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Dance2"] = 10] = "Dance2";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Dance3"] = 11] = "Dance3";
    SpriteDirectionEnum_ENUM[SpriteDirectionEnum_ENUM["Dance4"] = 12] = "Dance4";
})(SpriteDirectionEnum_ENUM = exports.SpriteDirectionEnum_ENUM || (exports.SpriteDirectionEnum_ENUM = {}));
function spriteDirectionEnum_ENUMFromJSON(object) {
    switch (object) {
        case 0:
        case "Stand":
            return SpriteDirectionEnum_ENUM.Stand;
        case 1:
        case "Down":
            return SpriteDirectionEnum_ENUM.Down;
        case 2:
        case "DownAlt":
            return SpriteDirectionEnum_ENUM.DownAlt;
        case 3:
        case "Up":
            return SpriteDirectionEnum_ENUM.Up;
        case 4:
        case "UpAlt":
            return SpriteDirectionEnum_ENUM.UpAlt;
        case 5:
        case "Left":
            return SpriteDirectionEnum_ENUM.Left;
        case 6:
        case "LeftAlt":
            return SpriteDirectionEnum_ENUM.LeftAlt;
        case 7:
        case "Right":
            return SpriteDirectionEnum_ENUM.Right;
        case 8:
        case "RightAlt":
            return SpriteDirectionEnum_ENUM.RightAlt;
        case 9:
        case "Dance1":
            return SpriteDirectionEnum_ENUM.Dance1;
        case 10:
        case "Dance2":
            return SpriteDirectionEnum_ENUM.Dance2;
        case 11:
        case "Dance3":
            return SpriteDirectionEnum_ENUM.Dance3;
        case 12:
        case "Dance4":
            return SpriteDirectionEnum_ENUM.Dance4;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum SpriteDirectionEnum_ENUM");
    }
}
exports.spriteDirectionEnum_ENUMFromJSON = spriteDirectionEnum_ENUMFromJSON;
function spriteDirectionEnum_ENUMToJSON(object) {
    switch (object) {
        case SpriteDirectionEnum_ENUM.Stand:
            return "Stand";
        case SpriteDirectionEnum_ENUM.Down:
            return "Down";
        case SpriteDirectionEnum_ENUM.DownAlt:
            return "DownAlt";
        case SpriteDirectionEnum_ENUM.Up:
            return "Up";
        case SpriteDirectionEnum_ENUM.UpAlt:
            return "UpAlt";
        case SpriteDirectionEnum_ENUM.Left:
            return "Left";
        case SpriteDirectionEnum_ENUM.LeftAlt:
            return "LeftAlt";
        case SpriteDirectionEnum_ENUM.Right:
            return "Right";
        case SpriteDirectionEnum_ENUM.RightAlt:
            return "RightAlt";
        case SpriteDirectionEnum_ENUM.Dance1:
            return "Dance1";
        case SpriteDirectionEnum_ENUM.Dance2:
            return "Dance2";
        case SpriteDirectionEnum_ENUM.Dance3:
            return "Dance3";
        case SpriteDirectionEnum_ENUM.Dance4:
            return "Dance4";
        default:
            return "UNKNOWN";
    }
}
exports.spriteDirectionEnum_ENUMToJSON = spriteDirectionEnum_ENUMToJSON;
var MoveDirectionEnum_ENUM;
(function (MoveDirectionEnum_ENUM) {
    MoveDirectionEnum_ENUM[MoveDirectionEnum_ENUM["Left"] = 0] = "Left";
    MoveDirectionEnum_ENUM[MoveDirectionEnum_ENUM["Right"] = 1] = "Right";
    MoveDirectionEnum_ENUM[MoveDirectionEnum_ENUM["Up"] = 2] = "Up";
    MoveDirectionEnum_ENUM[MoveDirectionEnum_ENUM["Down"] = 3] = "Down";
    MoveDirectionEnum_ENUM[MoveDirectionEnum_ENUM["Dance"] = 4] = "Dance";
})(MoveDirectionEnum_ENUM = exports.MoveDirectionEnum_ENUM || (exports.MoveDirectionEnum_ENUM = {}));
function moveDirectionEnum_ENUMFromJSON(object) {
    switch (object) {
        case 0:
        case "Left":
            return MoveDirectionEnum_ENUM.Left;
        case 1:
        case "Right":
            return MoveDirectionEnum_ENUM.Right;
        case 2:
        case "Up":
            return MoveDirectionEnum_ENUM.Up;
        case 3:
        case "Down":
            return MoveDirectionEnum_ENUM.Down;
        case 4:
        case "Dance":
            return MoveDirectionEnum_ENUM.Dance;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum MoveDirectionEnum_ENUM");
    }
}
exports.moveDirectionEnum_ENUMFromJSON = moveDirectionEnum_ENUMFromJSON;
function moveDirectionEnum_ENUMToJSON(object) {
    switch (object) {
        case MoveDirectionEnum_ENUM.Left:
            return "Left";
        case MoveDirectionEnum_ENUM.Right:
            return "Right";
        case MoveDirectionEnum_ENUM.Up:
            return "Up";
        case MoveDirectionEnum_ENUM.Down:
            return "Down";
        case MoveDirectionEnum_ENUM.Dance:
            return "Dance";
        default:
            return "UNKNOWN";
    }
}
exports.moveDirectionEnum_ENUMToJSON = moveDirectionEnum_ENUMToJSON;
var EmoteEnum_ENUM;
(function (EmoteEnum_ENUM) {
    EmoteEnum_ENUM[EmoteEnum_ENUM["None"] = 0] = "None";
    EmoteEnum_ENUM[EmoteEnum_ENUM["Wave"] = 1] = "Wave";
    EmoteEnum_ENUM[EmoteEnum_ENUM["Heart"] = 2] = "Heart";
    EmoteEnum_ENUM[EmoteEnum_ENUM["PartyPopper"] = 3] = "PartyPopper";
    EmoteEnum_ENUM[EmoteEnum_ENUM["ThumbsUp"] = 4] = "ThumbsUp";
    EmoteEnum_ENUM[EmoteEnum_ENUM["QuestionMark"] = 5] = "QuestionMark";
    EmoteEnum_ENUM[EmoteEnum_ENUM["RaisedHand"] = 6] = "RaisedHand";
})(EmoteEnum_ENUM = exports.EmoteEnum_ENUM || (exports.EmoteEnum_ENUM = {}));
function emoteEnum_ENUMFromJSON(object) {
    switch (object) {
        case 0:
        case "None":
            return EmoteEnum_ENUM.None;
        case 1:
        case "Wave":
            return EmoteEnum_ENUM.Wave;
        case 2:
        case "Heart":
            return EmoteEnum_ENUM.Heart;
        case 3:
        case "PartyPopper":
            return EmoteEnum_ENUM.PartyPopper;
        case 4:
        case "ThumbsUp":
            return EmoteEnum_ENUM.ThumbsUp;
        case 5:
        case "QuestionMark":
            return EmoteEnum_ENUM.QuestionMark;
        case 6:
        case "RaisedHand":
            return EmoteEnum_ENUM.RaisedHand;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum EmoteEnum_ENUM");
    }
}
exports.emoteEnum_ENUMFromJSON = emoteEnum_ENUMFromJSON;
function emoteEnum_ENUMToJSON(object) {
    switch (object) {
        case EmoteEnum_ENUM.None:
            return "None";
        case EmoteEnum_ENUM.Wave:
            return "Wave";
        case EmoteEnum_ENUM.Heart:
            return "Heart";
        case EmoteEnum_ENUM.PartyPopper:
            return "PartyPopper";
        case EmoteEnum_ENUM.ThumbsUp:
            return "ThumbsUp";
        case EmoteEnum_ENUM.QuestionMark:
            return "QuestionMark";
        case EmoteEnum_ENUM.RaisedHand:
            return "RaisedHand";
        default:
            return "UNKNOWN";
    }
}
exports.emoteEnum_ENUMToJSON = emoteEnum_ENUMToJSON;
var InteractionEnum_ENUM;
(function (InteractionEnum_ENUM) {
    InteractionEnum_ENUM[InteractionEnum_ENUM["NONE"] = 0] = "NONE";
    InteractionEnum_ENUM[InteractionEnum_ENUM["EMBEDDED_WEBSITE"] = 1] = "EMBEDDED_WEBSITE";
    InteractionEnum_ENUM[InteractionEnum_ENUM["POSTER"] = 2] = "POSTER";
    InteractionEnum_ENUM[InteractionEnum_ENUM["VIDEO"] = 3] = "VIDEO";
    InteractionEnum_ENUM[InteractionEnum_ENUM["EXTERNAL_CALL"] = 4] = "EXTERNAL_CALL";
    InteractionEnum_ENUM[InteractionEnum_ENUM["EXTENSION"] = 5] = "EXTENSION";
    InteractionEnum_ENUM[InteractionEnum_ENUM["NOTE"] = 6] = "NOTE";
    InteractionEnum_ENUM[InteractionEnum_ENUM["MODAL_EXTENSION"] = 7] = "MODAL_EXTENSION";
    InteractionEnum_ENUM[InteractionEnum_ENUM["COMPONENT_MODAL"] = 8] = "COMPONENT_MODAL";
})(InteractionEnum_ENUM = exports.InteractionEnum_ENUM || (exports.InteractionEnum_ENUM = {}));
function interactionEnum_ENUMFromJSON(object) {
    switch (object) {
        case 0:
        case "NONE":
            return InteractionEnum_ENUM.NONE;
        case 1:
        case "EMBEDDED_WEBSITE":
            return InteractionEnum_ENUM.EMBEDDED_WEBSITE;
        case 2:
        case "POSTER":
            return InteractionEnum_ENUM.POSTER;
        case 3:
        case "VIDEO":
            return InteractionEnum_ENUM.VIDEO;
        case 4:
        case "EXTERNAL_CALL":
            return InteractionEnum_ENUM.EXTERNAL_CALL;
        case 5:
        case "EXTENSION":
            return InteractionEnum_ENUM.EXTENSION;
        case 6:
        case "NOTE":
            return InteractionEnum_ENUM.NOTE;
        case 7:
        case "MODAL_EXTENSION":
            return InteractionEnum_ENUM.MODAL_EXTENSION;
        case 8:
        case "COMPONENT_MODAL":
            return InteractionEnum_ENUM.COMPONENT_MODAL;
        default:
            throw new globalThis.Error("Unrecognized enum value " + object + " for enum InteractionEnum_ENUM");
    }
}
exports.interactionEnum_ENUMFromJSON = interactionEnum_ENUMFromJSON;
function interactionEnum_ENUMToJSON(object) {
    switch (object) {
        case InteractionEnum_ENUM.NONE:
            return "NONE";
        case InteractionEnum_ENUM.EMBEDDED_WEBSITE:
            return "EMBEDDED_WEBSITE";
        case InteractionEnum_ENUM.POSTER:
            return "POSTER";
        case InteractionEnum_ENUM.VIDEO:
            return "VIDEO";
        case InteractionEnum_ENUM.EXTERNAL_CALL:
            return "EXTERNAL_CALL";
        case InteractionEnum_ENUM.EXTENSION:
            return "EXTENSION";
        case InteractionEnum_ENUM.NOTE:
            return "NOTE";
        case InteractionEnum_ENUM.MODAL_EXTENSION:
            return "MODAL_EXTENSION";
        case InteractionEnum_ENUM.COMPONENT_MODAL:
            return "COMPONENT_MODAL";
        default:
            return "UNKNOWN";
    }
}
exports.interactionEnum_ENUMToJSON = interactionEnum_ENUMToJSON;
var baseSpriteDirectionEnum = {};
exports.SpriteDirectionEnum = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpriteDirectionEnum);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = __assign({}, baseSpriteDirectionEnum);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseSpriteDirectionEnum);
        return message;
    }
};
var baseMoveDirectionEnum = {};
exports.MoveDirectionEnum = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMoveDirectionEnum);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = __assign({}, baseMoveDirectionEnum);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseMoveDirectionEnum);
        return message;
    }
};
var baseEmoteEnum = {};
exports.EmoteEnum = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseEmoteEnum);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = __assign({}, baseEmoteEnum);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseEmoteEnum);
        return message;
    }
};
var baseInteractionEnum = {};
exports.InteractionEnum = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInteractionEnum);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = __assign({}, baseInteractionEnum);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseInteractionEnum);
        return message;
    }
};
var baseSpaceUserInfo = {};
exports.SpaceUserInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== undefined) {
            writer.uint32(10).string(message.name);
        }
        if (message.avatar !== undefined) {
            writer.uint32(16).uint32(message.avatar);
        }
        if (message.x !== undefined) {
            writer.uint32(24).uint32(message.x);
        }
        if (message.y !== undefined) {
            writer.uint32(32).uint32(message.y);
        }
        if (message.map !== undefined) {
            writer.uint32(42).string(message.map);
        }
        if (message.affiliation !== undefined) {
            writer.uint32(50).string(message.affiliation);
        }
        if (message.busy !== undefined) {
            writer.uint32(56).bool(message.busy);
        }
        if (message.textStatus !== undefined) {
            writer.uint32(66).string(message.textStatus);
        }
        if (message.emojiStatus !== undefined) {
            writer.uint32(74).string(message.emojiStatus);
        }
        if (message.currentlyEquippedWearables !== undefined) {
            exports.DBOutfit.encode(message.currentlyEquippedWearables, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceUserInfo);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.avatar = reader.uint32();
                    break;
                case 3:
                    message.x = reader.uint32();
                    break;
                case 4:
                    message.y = reader.uint32();
                    break;
                case 5:
                    message.map = reader.string();
                    break;
                case 6:
                    message.affiliation = reader.string();
                    break;
                case 7:
                    message.busy = reader.bool();
                    break;
                case 8:
                    message.textStatus = reader.string();
                    break;
                case 9:
                    message.emojiStatus = reader.string();
                    break;
                case 10:
                    message.currentlyEquippedWearables = exports.DBOutfit.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSpaceUserInfo);
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        if (object.avatar !== undefined && object.avatar !== null) {
            message.avatar = Number(object.avatar);
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = Number(object.x);
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = Number(object.y);
        }
        if (object.map !== undefined && object.map !== null) {
            message.map = String(object.map);
        }
        if (object.affiliation !== undefined && object.affiliation !== null) {
            message.affiliation = String(object.affiliation);
        }
        if (object.busy !== undefined && object.busy !== null) {
            message.busy = Boolean(object.busy);
        }
        if (object.textStatus !== undefined && object.textStatus !== null) {
            message.textStatus = String(object.textStatus);
        }
        if (object.emojiStatus !== undefined && object.emojiStatus !== null) {
            message.emojiStatus = String(object.emojiStatus);
        }
        if (object.currentlyEquippedWearables !== undefined &&
            object.currentlyEquippedWearables !== null) {
            message.currentlyEquippedWearables = exports.DBOutfit.fromJSON(object.currentlyEquippedWearables);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.avatar !== undefined && (obj.avatar = message.avatar);
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.map !== undefined && (obj.map = message.map);
        message.affiliation !== undefined && (obj.affiliation = message.affiliation);
        message.busy !== undefined && (obj.busy = message.busy);
        message.textStatus !== undefined && (obj.textStatus = message.textStatus);
        message.emojiStatus !== undefined && (obj.emojiStatus = message.emojiStatus);
        message.currentlyEquippedWearables !== undefined &&
            (obj.currentlyEquippedWearables = message.currentlyEquippedWearables
                ? exports.DBOutfit.toJSON(message.currentlyEquippedWearables)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSpaceUserInfo);
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        if (object.avatar !== undefined && object.avatar !== null) {
            message.avatar = object.avatar;
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = object.x;
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = object.y;
        }
        if (object.map !== undefined && object.map !== null) {
            message.map = object.map;
        }
        if (object.affiliation !== undefined && object.affiliation !== null) {
            message.affiliation = object.affiliation;
        }
        if (object.busy !== undefined && object.busy !== null) {
            message.busy = object.busy;
        }
        if (object.textStatus !== undefined && object.textStatus !== null) {
            message.textStatus = object.textStatus;
        }
        if (object.emojiStatus !== undefined && object.emojiStatus !== null) {
            message.emojiStatus = object.emojiStatus;
        }
        if (object.currentlyEquippedWearables !== undefined &&
            object.currentlyEquippedWearables !== null) {
            message.currentlyEquippedWearables = exports.DBOutfit.fromPartial(object.currentlyEquippedWearables);
        }
        return message;
    }
};
var baseDBOutfit = {
    skin: "",
    hair: "",
    facial_hair: "",
    top: "",
    bottom: "",
    shoes: "",
    hat: "",
    glasses: "",
    other: ""
};
exports.DBOutfit = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.skin !== "") {
            writer.uint32(10).string(message.skin);
        }
        if (message.hair !== "") {
            writer.uint32(18).string(message.hair);
        }
        if (message.facial_hair !== "") {
            writer.uint32(26).string(message.facial_hair);
        }
        if (message.top !== "") {
            writer.uint32(34).string(message.top);
        }
        if (message.bottom !== "") {
            writer.uint32(42).string(message.bottom);
        }
        if (message.shoes !== "") {
            writer.uint32(50).string(message.shoes);
        }
        if (message.hat !== "") {
            writer.uint32(58).string(message.hat);
        }
        if (message.glasses !== "") {
            writer.uint32(66).string(message.glasses);
        }
        if (message.other !== "") {
            writer.uint32(74).string(message.other);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseDBOutfit);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.skin = reader.string();
                    break;
                case 2:
                    message.hair = reader.string();
                    break;
                case 3:
                    message.facial_hair = reader.string();
                    break;
                case 4:
                    message.top = reader.string();
                    break;
                case 5:
                    message.bottom = reader.string();
                    break;
                case 6:
                    message.shoes = reader.string();
                    break;
                case 7:
                    message.hat = reader.string();
                    break;
                case 8:
                    message.glasses = reader.string();
                    break;
                case 9:
                    message.other = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseDBOutfit);
        if (object.skin !== undefined && object.skin !== null) {
            message.skin = String(object.skin);
        }
        if (object.hair !== undefined && object.hair !== null) {
            message.hair = String(object.hair);
        }
        if (object.facial_hair !== undefined && object.facial_hair !== null) {
            message.facial_hair = String(object.facial_hair);
        }
        if (object.top !== undefined && object.top !== null) {
            message.top = String(object.top);
        }
        if (object.bottom !== undefined && object.bottom !== null) {
            message.bottom = String(object.bottom);
        }
        if (object.shoes !== undefined && object.shoes !== null) {
            message.shoes = String(object.shoes);
        }
        if (object.hat !== undefined && object.hat !== null) {
            message.hat = String(object.hat);
        }
        if (object.glasses !== undefined && object.glasses !== null) {
            message.glasses = String(object.glasses);
        }
        if (object.other !== undefined && object.other !== null) {
            message.other = String(object.other);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.skin !== undefined && (obj.skin = message.skin);
        message.hair !== undefined && (obj.hair = message.hair);
        message.facial_hair !== undefined && (obj.facial_hair = message.facial_hair);
        message.top !== undefined && (obj.top = message.top);
        message.bottom !== undefined && (obj.bottom = message.bottom);
        message.shoes !== undefined && (obj.shoes = message.shoes);
        message.hat !== undefined && (obj.hat = message.hat);
        message.glasses !== undefined && (obj.glasses = message.glasses);
        message.other !== undefined && (obj.other = message.other);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseDBOutfit);
        if (object.skin !== undefined && object.skin !== null) {
            message.skin = object.skin;
        }
        if (object.hair !== undefined && object.hair !== null) {
            message.hair = object.hair;
        }
        if (object.facial_hair !== undefined && object.facial_hair !== null) {
            message.facial_hair = object.facial_hair;
        }
        if (object.top !== undefined && object.top !== null) {
            message.top = object.top;
        }
        if (object.bottom !== undefined && object.bottom !== null) {
            message.bottom = object.bottom;
        }
        if (object.shoes !== undefined && object.shoes !== null) {
            message.shoes = object.shoes;
        }
        if (object.hat !== undefined && object.hat !== null) {
            message.hat = object.hat;
        }
        if (object.glasses !== undefined && object.glasses !== null) {
            message.glasses = object.glasses;
        }
        if (object.other !== undefined && object.other !== null) {
            message.other = object.other;
        }
        return message;
    }
};
var baseServerClientBatch = {};
exports.ServerClientBatch = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.events; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.ServerClientEvent.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseServerClientBatch);
        message.events = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.events.push(exports.ServerClientEvent.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseServerClientBatch);
        message.events = [];
        if (object.events !== undefined && object.events !== null) {
            for (var _i = 0, _a = object.events; _i < _a.length; _i++) {
                var e = _a[_i];
                message.events.push(exports.ServerClientEvent.fromJSON(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        if (message.events) {
            obj.events = message.events.map(function (e) { return (e ? exports.ServerClientEvent.toJSON(e) : undefined); });
        }
        else {
            obj.events = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseServerClientBatch);
        message.events = [];
        if (object.events !== undefined && object.events !== null) {
            for (var _i = 0, _a = object.events; _i < _a.length; _i++) {
                var e = _a[_i];
                message.events.push(exports.ServerClientEvent.fromPartial(e));
            }
        }
        return message;
    }
};
var baseServerClientEvent = {};
exports.ServerClientEvent = {
    encode: function (message, writer) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (((_a = message.event) === null || _a === void 0 ? void 0 : _a.$case) === "info") {
            exports.Info.encode(message.event.info, writer.uint32(802).fork()).ldelim();
        }
        if (((_b = message.event) === null || _b === void 0 ? void 0 : _b.$case) === "warn") {
            exports.Warn.encode(message.event.warn, writer.uint32(810).fork()).ldelim();
        }
        if (((_c = message.event) === null || _c === void 0 ? void 0 : _c.$case) === "error") {
            exports.Error.encode(message.event.error, writer.uint32(818).fork()).ldelim();
        }
        if (((_d = message.event) === null || _d === void 0 ? void 0 : _d.$case) === "ready") {
            exports.Ready.encode(message.event.ready, writer.uint32(826).fork()).ldelim();
        }
        if (((_e = message.event) === null || _e === void 0 ? void 0 : _e.$case) === "serverHeartbeat") {
            exports.ServerHeartbeat.encode(message.event.serverHeartbeat, writer.uint32(842).fork()).ldelim();
        }
        if (((_f = message.event) === null || _f === void 0 ? void 0 : _f.$case) === "disableVideo") {
            exports.DisableVideo.encode(message.event.disableVideo, writer.uint32(850).fork()).ldelim();
        }
        if (((_g = message.event) === null || _g === void 0 ? void 0 : _g.$case) === "playerMoves") {
            exports.PlayerMoves.encode(message.event.playerMoves, writer.uint32(10).fork()).ldelim();
        }
        if (((_h = message.event) === null || _h === void 0 ? void 0 : _h.$case) === "playerSetsStatus") {
            exports.PlayerSetsStatus.encode(message.event.playerSetsStatus, writer.uint32(42).fork()).ldelim();
        }
        if (((_j = message.event) === null || _j === void 0 ? void 0 : _j.$case) === "playerSpotlights") {
            exports.PlayerSpotlights.encode(message.event.playerSpotlights, writer.uint32(50).fork()).ldelim();
        }
        if (((_k = message.event) === null || _k === void 0 ? void 0 : _k.$case) === "playerRings") {
            exports.PlayerRings.encode(message.event.playerRings, writer.uint32(58).fork()).ldelim();
        }
        if (((_l = message.event) === null || _l === void 0 ? void 0 : _l.$case) === "playerSetsPointer") {
            exports.PlayerSetsPointer.encode(message.event.playerSetsPointer, writer.uint32(66).fork()).ldelim();
        }
        if (((_m = message.event) === null || _m === void 0 ? void 0 : _m.$case) === "playerChats") {
            exports.PlayerChats.encode(message.event.playerChats, writer.uint32(74).fork()).ldelim();
        }
        if (((_o = message.event) === null || _o === void 0 ? void 0 : _o.$case) === "playerInteracts") {
            exports.PlayerInteracts.encode(message.event.playerInteracts, writer.uint32(82).fork()).ldelim();
        }
        if (((_p = message.event) === null || _p === void 0 ? void 0 : _p.$case) === "playerGhosts") {
            exports.PlayerGhosts.encode(message.event.playerGhosts, writer.uint32(90).fork()).ldelim();
        }
        if (((_q = message.event) === null || _q === void 0 ? void 0 : _q.$case) === "playerEntersWhisper") {
            exports.PlayerEntersWhisper.encode(message.event.playerEntersWhisper, writer.uint32(98).fork()).ldelim();
        }
        if (((_r = message.event) === null || _r === void 0 ? void 0 : _r.$case) === "playerLeavesWhisper") {
            exports.PlayerLeavesWhisper.encode(message.event.playerLeavesWhisper, writer.uint32(106).fork()).ldelim();
        }
        if (((_s = message.event) === null || _s === void 0 ? void 0 : _s.$case) === "playerActivelySpeaks") {
            exports.PlayerActivelySpeaks.encode(message.event.playerActivelySpeaks, writer.uint32(114).fork()).ldelim();
        }
        if (((_t = message.event) === null || _t === void 0 ? void 0 : _t.$case) === "playerSetsEmote") {
            exports.PlayerSetsEmote.encode(message.event.playerSetsEmote, writer.uint32(122).fork()).ldelim();
        }
        if (((_u = message.event) === null || _u === void 0 ? void 0 : _u.$case) === "playerSetsWorkCondition") {
            exports.PlayerSetsWorkCondition.encode(message.event.playerSetsWorkCondition, writer.uint32(130).fork()).ldelim();
        }
        if (((_v = message.event) === null || _v === void 0 ? void 0 : _v.$case) === "playerSetsName") {
            exports.PlayerSetsName.encode(message.event.playerSetsName, writer.uint32(138).fork()).ldelim();
        }
        if (((_w = message.event) === null || _w === void 0 ? void 0 : _w.$case) === "playerSetsTextStatus") {
            exports.PlayerSetsTextStatus.encode(message.event.playerSetsTextStatus, writer.uint32(146).fork()).ldelim();
        }
        if (((_x = message.event) === null || _x === void 0 ? void 0 : _x.$case) === "playerSetsEmojiStatus") {
            exports.PlayerSetsEmojiStatus.encode(message.event.playerSetsEmojiStatus, writer.uint32(154).fork()).ldelim();
        }
        if (((_y = message.event) === null || _y === void 0 ? void 0 : _y.$case) === "playerSetsAffiliation") {
            exports.PlayerSetsAffiliation.encode(message.event.playerSetsAffiliation, writer.uint32(162).fork()).ldelim();
        }
        if (((_z = message.event) === null || _z === void 0 ? void 0 : _z.$case) === "playerExits") {
            exports.PlayerExits.encode(message.event.playerExits, writer.uint32(170).fork()).ldelim();
        }
        if (((_0 = message.event) === null || _0 === void 0 ? void 0 : _0.$case) === "playerSetsSprite") {
            exports.PlayerSetsSprite.encode(message.event.playerSetsSprite, writer.uint32(178).fork()).ldelim();
        }
        if (((_1 = message.event) === null || _1 === void 0 ? void 0 : _1.$case) === "respawnComplete") {
            exports.RespawnComplete.encode(message.event.respawnComplete, writer.uint32(314).fork()).ldelim();
        }
        if (((_2 = message.event) === null || _2 === void 0 ? void 0 : _2.$case) === "playerSetsOutfitString") {
            exports.PlayerSetsOutfitString.encode(message.event.playerSetsOutfitString, writer.uint32(322).fork()).ldelim();
        }
        if (((_3 = message.event) === null || _3 === void 0 ? void 0 : _3.$case) === "playerSetsIsSignedIn") {
            exports.PlayerSetsIsSignedIn.encode(message.event.playerSetsIsSignedIn, writer.uint32(330).fork()).ldelim();
        }
        if (((_4 = message.event) === null || _4 === void 0 ? void 0 : _4.$case) === "mapUpdates") {
            exports.MapUpdates.encode(message.event.mapUpdates, writer.uint32(338).fork()).ldelim();
        }
        if (((_5 = message.event) === null || _5 === void 0 ? void 0 : _5.$case) === "mapOverwrites") {
            exports.MapOverwrites.encode(message.event.mapOverwrites, writer.uint32(346).fork()).ldelim();
        }
        if (((_6 = message.event) === null || _6 === void 0 ? void 0 : _6.$case) === "spaceOverwrites") {
            exports.SpaceOverwrites.encode(message.event.spaceOverwrites, writer.uint32(354).fork()).ldelim();
        }
        if (((_7 = message.event) === null || _7 === void 0 ? void 0 : _7.$case) === "spaceIsClosed") {
            exports.SpaceIsClosed.encode(message.event.spaceIsClosed, writer.uint32(362).fork()).ldelim();
        }
        if (((_8 = message.event) === null || _8 === void 0 ? void 0 : _8.$case) === "playerEntersPortal") {
            exports.PlayerEntersPortal.encode(message.event.playerEntersPortal, writer.uint32(370).fork()).ldelim();
        }
        if (((_9 = message.event) === null || _9 === void 0 ? void 0 : _9.$case) === "spaceSetsIdMapping") {
            exports.SpaceSetsIdMapping.encode(message.event.spaceSetsIdMapping, writer.uint32(378).fork()).ldelim();
        }
        if (((_10 = message.event) === null || _10 === void 0 ? void 0 : _10.$case) === "playerSetsLastActive") {
            exports.PlayerSetsLastActive.encode(message.event.playerSetsLastActive, writer.uint32(386).fork()).ldelim();
        }
        if (((_11 = message.event) === null || _11 === void 0 ? void 0 : _11.$case) === "playerShootsConfetti") {
            exports.PlayerShootsConfetti.encode(message.event.playerShootsConfetti, writer.uint32(394).fork()).ldelim();
        }
        if (((_12 = message.event) === null || _12 === void 0 ? void 0 : _12.$case) === "playerSetsEventStatus") {
            exports.PlayerSetsEventStatus.encode(message.event.playerSetsEventStatus, writer.uint32(402).fork()).ldelim();
        }
        if (((_13 = message.event) === null || _13 === void 0 ? void 0 : _13.$case) === "playerSetsInConversation") {
            exports.PlayerSetsInConversation.encode(message.event.playerSetsInConversation, writer.uint32(410).fork()).ldelim();
        }
        if (((_14 = message.event) === null || _14 === void 0 ? void 0 : _14.$case) === "playerSetsCurrentDesk") {
            exports.PlayerSetsCurrentDesk.encode(message.event.playerSetsCurrentDesk, writer.uint32(418).fork()).ldelim();
        }
        if (((_15 = message.event) === null || _15 === void 0 ? void 0 : _15.$case) === "playerSetsCurrentArea") {
            exports.PlayerSetsCurrentArea.encode(message.event.playerSetsCurrentArea, writer.uint32(426).fork()).ldelim();
        }
        if (((_16 = message.event) === null || _16 === void 0 ? void 0 : _16.$case) === "playerSetsImagePointer") {
            exports.PlayerSetsImagePointer.encode(message.event.playerSetsImagePointer, writer.uint32(434).fork()).ldelim();
        }
        if (((_17 = message.event) === null || _17 === void 0 ? void 0 : _17.$case) === "cookieFound") {
            exports.CookieFound.encode(message.event.cookieFound, writer.uint32(442).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseServerClientEvent);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 100:
                    message.event = { $case: "info", info: exports.Info.decode(reader, reader.uint32()) };
                    break;
                case 101:
                    message.event = { $case: "warn", warn: exports.Warn.decode(reader, reader.uint32()) };
                    break;
                case 102:
                    message.event = { $case: "error", error: exports.Error.decode(reader, reader.uint32()) };
                    break;
                case 103:
                    message.event = { $case: "ready", ready: exports.Ready.decode(reader, reader.uint32()) };
                    break;
                case 105:
                    message.event = {
                        $case: "serverHeartbeat",
                        serverHeartbeat: exports.ServerHeartbeat.decode(reader, reader.uint32())
                    };
                    break;
                case 106:
                    message.event = {
                        $case: "disableVideo",
                        disableVideo: exports.DisableVideo.decode(reader, reader.uint32())
                    };
                    break;
                case 1:
                    message.event = {
                        $case: "playerMoves",
                        playerMoves: exports.PlayerMoves.decode(reader, reader.uint32())
                    };
                    break;
                case 5:
                    message.event = {
                        $case: "playerSetsStatus",
                        playerSetsStatus: exports.PlayerSetsStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 6:
                    message.event = {
                        $case: "playerSpotlights",
                        playerSpotlights: exports.PlayerSpotlights.decode(reader, reader.uint32())
                    };
                    break;
                case 7:
                    message.event = {
                        $case: "playerRings",
                        playerRings: exports.PlayerRings.decode(reader, reader.uint32())
                    };
                    break;
                case 8:
                    message.event = {
                        $case: "playerSetsPointer",
                        playerSetsPointer: exports.PlayerSetsPointer.decode(reader, reader.uint32())
                    };
                    break;
                case 9:
                    message.event = {
                        $case: "playerChats",
                        playerChats: exports.PlayerChats.decode(reader, reader.uint32())
                    };
                    break;
                case 10:
                    message.event = {
                        $case: "playerInteracts",
                        playerInteracts: exports.PlayerInteracts.decode(reader, reader.uint32())
                    };
                    break;
                case 11:
                    message.event = {
                        $case: "playerGhosts",
                        playerGhosts: exports.PlayerGhosts.decode(reader, reader.uint32())
                    };
                    break;
                case 12:
                    message.event = {
                        $case: "playerEntersWhisper",
                        playerEntersWhisper: exports.PlayerEntersWhisper.decode(reader, reader.uint32())
                    };
                    break;
                case 13:
                    message.event = {
                        $case: "playerLeavesWhisper",
                        playerLeavesWhisper: exports.PlayerLeavesWhisper.decode(reader, reader.uint32())
                    };
                    break;
                case 14:
                    message.event = {
                        $case: "playerActivelySpeaks",
                        playerActivelySpeaks: exports.PlayerActivelySpeaks.decode(reader, reader.uint32())
                    };
                    break;
                case 15:
                    message.event = {
                        $case: "playerSetsEmote",
                        playerSetsEmote: exports.PlayerSetsEmote.decode(reader, reader.uint32())
                    };
                    break;
                case 16:
                    message.event = {
                        $case: "playerSetsWorkCondition",
                        playerSetsWorkCondition: exports.PlayerSetsWorkCondition.decode(reader, reader.uint32())
                    };
                    break;
                case 17:
                    message.event = {
                        $case: "playerSetsName",
                        playerSetsName: exports.PlayerSetsName.decode(reader, reader.uint32())
                    };
                    break;
                case 18:
                    message.event = {
                        $case: "playerSetsTextStatus",
                        playerSetsTextStatus: exports.PlayerSetsTextStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 19:
                    message.event = {
                        $case: "playerSetsEmojiStatus",
                        playerSetsEmojiStatus: exports.PlayerSetsEmojiStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 20:
                    message.event = {
                        $case: "playerSetsAffiliation",
                        playerSetsAffiliation: exports.PlayerSetsAffiliation.decode(reader, reader.uint32())
                    };
                    break;
                case 21:
                    message.event = {
                        $case: "playerExits",
                        playerExits: exports.PlayerExits.decode(reader, reader.uint32())
                    };
                    break;
                case 22:
                    message.event = {
                        $case: "playerSetsSprite",
                        playerSetsSprite: exports.PlayerSetsSprite.decode(reader, reader.uint32())
                    };
                    break;
                case 39:
                    message.event = {
                        $case: "respawnComplete",
                        respawnComplete: exports.RespawnComplete.decode(reader, reader.uint32())
                    };
                    break;
                case 40:
                    message.event = {
                        $case: "playerSetsOutfitString",
                        playerSetsOutfitString: exports.PlayerSetsOutfitString.decode(reader, reader.uint32())
                    };
                    break;
                case 41:
                    message.event = {
                        $case: "playerSetsIsSignedIn",
                        playerSetsIsSignedIn: exports.PlayerSetsIsSignedIn.decode(reader, reader.uint32())
                    };
                    break;
                case 42:
                    message.event = {
                        $case: "mapUpdates",
                        mapUpdates: exports.MapUpdates.decode(reader, reader.uint32())
                    };
                    break;
                case 43:
                    message.event = {
                        $case: "mapOverwrites",
                        mapOverwrites: exports.MapOverwrites.decode(reader, reader.uint32())
                    };
                    break;
                case 44:
                    message.event = {
                        $case: "spaceOverwrites",
                        spaceOverwrites: exports.SpaceOverwrites.decode(reader, reader.uint32())
                    };
                    break;
                case 45:
                    message.event = {
                        $case: "spaceIsClosed",
                        spaceIsClosed: exports.SpaceIsClosed.decode(reader, reader.uint32())
                    };
                    break;
                case 46:
                    message.event = {
                        $case: "playerEntersPortal",
                        playerEntersPortal: exports.PlayerEntersPortal.decode(reader, reader.uint32())
                    };
                    break;
                case 47:
                    message.event = {
                        $case: "spaceSetsIdMapping",
                        spaceSetsIdMapping: exports.SpaceSetsIdMapping.decode(reader, reader.uint32())
                    };
                    break;
                case 48:
                    message.event = {
                        $case: "playerSetsLastActive",
                        playerSetsLastActive: exports.PlayerSetsLastActive.decode(reader, reader.uint32())
                    };
                    break;
                case 49:
                    message.event = {
                        $case: "playerShootsConfetti",
                        playerShootsConfetti: exports.PlayerShootsConfetti.decode(reader, reader.uint32())
                    };
                    break;
                case 50:
                    message.event = {
                        $case: "playerSetsEventStatus",
                        playerSetsEventStatus: exports.PlayerSetsEventStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 51:
                    message.event = {
                        $case: "playerSetsInConversation",
                        playerSetsInConversation: exports.PlayerSetsInConversation.decode(reader, reader.uint32())
                    };
                    break;
                case 52:
                    message.event = {
                        $case: "playerSetsCurrentDesk",
                        playerSetsCurrentDesk: exports.PlayerSetsCurrentDesk.decode(reader, reader.uint32())
                    };
                    break;
                case 53:
                    message.event = {
                        $case: "playerSetsCurrentArea",
                        playerSetsCurrentArea: exports.PlayerSetsCurrentArea.decode(reader, reader.uint32())
                    };
                    break;
                case 54:
                    message.event = {
                        $case: "playerSetsImagePointer",
                        playerSetsImagePointer: exports.PlayerSetsImagePointer.decode(reader, reader.uint32())
                    };
                    break;
                case 55:
                    message.event = {
                        $case: "cookieFound",
                        cookieFound: exports.CookieFound.decode(reader, reader.uint32())
                    };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseServerClientEvent);
        if (object.info !== undefined && object.info !== null) {
            message.event = { $case: "info", info: exports.Info.fromJSON(object.info) };
        }
        if (object.warn !== undefined && object.warn !== null) {
            message.event = { $case: "warn", warn: exports.Warn.fromJSON(object.warn) };
        }
        if (object.error !== undefined && object.error !== null) {
            message.event = { $case: "error", error: exports.Error.fromJSON(object.error) };
        }
        if (object.ready !== undefined && object.ready !== null) {
            message.event = { $case: "ready", ready: exports.Ready.fromJSON(object.ready) };
        }
        if (object.serverHeartbeat !== undefined && object.serverHeartbeat !== null) {
            message.event = {
                $case: "serverHeartbeat",
                serverHeartbeat: exports.ServerHeartbeat.fromJSON(object.serverHeartbeat)
            };
        }
        if (object.disableVideo !== undefined && object.disableVideo !== null) {
            message.event = {
                $case: "disableVideo",
                disableVideo: exports.DisableVideo.fromJSON(object.disableVideo)
            };
        }
        if (object.playerMoves !== undefined && object.playerMoves !== null) {
            message.event = {
                $case: "playerMoves",
                playerMoves: exports.PlayerMoves.fromJSON(object.playerMoves)
            };
        }
        if (object.playerSetsStatus !== undefined && object.playerSetsStatus !== null) {
            message.event = {
                $case: "playerSetsStatus",
                playerSetsStatus: exports.PlayerSetsStatus.fromJSON(object.playerSetsStatus)
            };
        }
        if (object.playerSpotlights !== undefined && object.playerSpotlights !== null) {
            message.event = {
                $case: "playerSpotlights",
                playerSpotlights: exports.PlayerSpotlights.fromJSON(object.playerSpotlights)
            };
        }
        if (object.playerRings !== undefined && object.playerRings !== null) {
            message.event = {
                $case: "playerRings",
                playerRings: exports.PlayerRings.fromJSON(object.playerRings)
            };
        }
        if (object.playerSetsPointer !== undefined && object.playerSetsPointer !== null) {
            message.event = {
                $case: "playerSetsPointer",
                playerSetsPointer: exports.PlayerSetsPointer.fromJSON(object.playerSetsPointer)
            };
        }
        if (object.playerChats !== undefined && object.playerChats !== null) {
            message.event = {
                $case: "playerChats",
                playerChats: exports.PlayerChats.fromJSON(object.playerChats)
            };
        }
        if (object.playerInteracts !== undefined && object.playerInteracts !== null) {
            message.event = {
                $case: "playerInteracts",
                playerInteracts: exports.PlayerInteracts.fromJSON(object.playerInteracts)
            };
        }
        if (object.playerGhosts !== undefined && object.playerGhosts !== null) {
            message.event = {
                $case: "playerGhosts",
                playerGhosts: exports.PlayerGhosts.fromJSON(object.playerGhosts)
            };
        }
        if (object.playerEntersWhisper !== undefined && object.playerEntersWhisper !== null) {
            message.event = {
                $case: "playerEntersWhisper",
                playerEntersWhisper: exports.PlayerEntersWhisper.fromJSON(object.playerEntersWhisper)
            };
        }
        if (object.playerLeavesWhisper !== undefined && object.playerLeavesWhisper !== null) {
            message.event = {
                $case: "playerLeavesWhisper",
                playerLeavesWhisper: exports.PlayerLeavesWhisper.fromJSON(object.playerLeavesWhisper)
            };
        }
        if (object.playerActivelySpeaks !== undefined && object.playerActivelySpeaks !== null) {
            message.event = {
                $case: "playerActivelySpeaks",
                playerActivelySpeaks: exports.PlayerActivelySpeaks.fromJSON(object.playerActivelySpeaks)
            };
        }
        if (object.playerSetsEmote !== undefined && object.playerSetsEmote !== null) {
            message.event = {
                $case: "playerSetsEmote",
                playerSetsEmote: exports.PlayerSetsEmote.fromJSON(object.playerSetsEmote)
            };
        }
        if (object.playerSetsWorkCondition !== undefined && object.playerSetsWorkCondition !== null) {
            message.event = {
                $case: "playerSetsWorkCondition",
                playerSetsWorkCondition: exports.PlayerSetsWorkCondition.fromJSON(object.playerSetsWorkCondition)
            };
        }
        if (object.playerSetsName !== undefined && object.playerSetsName !== null) {
            message.event = {
                $case: "playerSetsName",
                playerSetsName: exports.PlayerSetsName.fromJSON(object.playerSetsName)
            };
        }
        if (object.playerSetsTextStatus !== undefined && object.playerSetsTextStatus !== null) {
            message.event = {
                $case: "playerSetsTextStatus",
                playerSetsTextStatus: exports.PlayerSetsTextStatus.fromJSON(object.playerSetsTextStatus)
            };
        }
        if (object.playerSetsEmojiStatus !== undefined && object.playerSetsEmojiStatus !== null) {
            message.event = {
                $case: "playerSetsEmojiStatus",
                playerSetsEmojiStatus: exports.PlayerSetsEmojiStatus.fromJSON(object.playerSetsEmojiStatus)
            };
        }
        if (object.playerSetsAffiliation !== undefined && object.playerSetsAffiliation !== null) {
            message.event = {
                $case: "playerSetsAffiliation",
                playerSetsAffiliation: exports.PlayerSetsAffiliation.fromJSON(object.playerSetsAffiliation)
            };
        }
        if (object.playerExits !== undefined && object.playerExits !== null) {
            message.event = {
                $case: "playerExits",
                playerExits: exports.PlayerExits.fromJSON(object.playerExits)
            };
        }
        if (object.playerSetsSprite !== undefined && object.playerSetsSprite !== null) {
            message.event = {
                $case: "playerSetsSprite",
                playerSetsSprite: exports.PlayerSetsSprite.fromJSON(object.playerSetsSprite)
            };
        }
        if (object.respawnComplete !== undefined && object.respawnComplete !== null) {
            message.event = {
                $case: "respawnComplete",
                respawnComplete: exports.RespawnComplete.fromJSON(object.respawnComplete)
            };
        }
        if (object.playerSetsOutfitString !== undefined && object.playerSetsOutfitString !== null) {
            message.event = {
                $case: "playerSetsOutfitString",
                playerSetsOutfitString: exports.PlayerSetsOutfitString.fromJSON(object.playerSetsOutfitString)
            };
        }
        if (object.playerSetsIsSignedIn !== undefined && object.playerSetsIsSignedIn !== null) {
            message.event = {
                $case: "playerSetsIsSignedIn",
                playerSetsIsSignedIn: exports.PlayerSetsIsSignedIn.fromJSON(object.playerSetsIsSignedIn)
            };
        }
        if (object.mapUpdates !== undefined && object.mapUpdates !== null) {
            message.event = { $case: "mapUpdates", mapUpdates: exports.MapUpdates.fromJSON(object.mapUpdates) };
        }
        if (object.mapOverwrites !== undefined && object.mapOverwrites !== null) {
            message.event = {
                $case: "mapOverwrites",
                mapOverwrites: exports.MapOverwrites.fromJSON(object.mapOverwrites)
            };
        }
        if (object.spaceOverwrites !== undefined && object.spaceOverwrites !== null) {
            message.event = {
                $case: "spaceOverwrites",
                spaceOverwrites: exports.SpaceOverwrites.fromJSON(object.spaceOverwrites)
            };
        }
        if (object.spaceIsClosed !== undefined && object.spaceIsClosed !== null) {
            message.event = {
                $case: "spaceIsClosed",
                spaceIsClosed: exports.SpaceIsClosed.fromJSON(object.spaceIsClosed)
            };
        }
        if (object.playerEntersPortal !== undefined && object.playerEntersPortal !== null) {
            message.event = {
                $case: "playerEntersPortal",
                playerEntersPortal: exports.PlayerEntersPortal.fromJSON(object.playerEntersPortal)
            };
        }
        if (object.spaceSetsIdMapping !== undefined && object.spaceSetsIdMapping !== null) {
            message.event = {
                $case: "spaceSetsIdMapping",
                spaceSetsIdMapping: exports.SpaceSetsIdMapping.fromJSON(object.spaceSetsIdMapping)
            };
        }
        if (object.playerSetsLastActive !== undefined && object.playerSetsLastActive !== null) {
            message.event = {
                $case: "playerSetsLastActive",
                playerSetsLastActive: exports.PlayerSetsLastActive.fromJSON(object.playerSetsLastActive)
            };
        }
        if (object.playerShootsConfetti !== undefined && object.playerShootsConfetti !== null) {
            message.event = {
                $case: "playerShootsConfetti",
                playerShootsConfetti: exports.PlayerShootsConfetti.fromJSON(object.playerShootsConfetti)
            };
        }
        if (object.playerSetsEventStatus !== undefined && object.playerSetsEventStatus !== null) {
            message.event = {
                $case: "playerSetsEventStatus",
                playerSetsEventStatus: exports.PlayerSetsEventStatus.fromJSON(object.playerSetsEventStatus)
            };
        }
        if (object.playerSetsInConversation !== undefined && object.playerSetsInConversation !== null) {
            message.event = {
                $case: "playerSetsInConversation",
                playerSetsInConversation: exports.PlayerSetsInConversation.fromJSON(object.playerSetsInConversation)
            };
        }
        if (object.playerSetsCurrentDesk !== undefined && object.playerSetsCurrentDesk !== null) {
            message.event = {
                $case: "playerSetsCurrentDesk",
                playerSetsCurrentDesk: exports.PlayerSetsCurrentDesk.fromJSON(object.playerSetsCurrentDesk)
            };
        }
        if (object.playerSetsCurrentArea !== undefined && object.playerSetsCurrentArea !== null) {
            message.event = {
                $case: "playerSetsCurrentArea",
                playerSetsCurrentArea: exports.PlayerSetsCurrentArea.fromJSON(object.playerSetsCurrentArea)
            };
        }
        if (object.playerSetsImagePointer !== undefined && object.playerSetsImagePointer !== null) {
            message.event = {
                $case: "playerSetsImagePointer",
                playerSetsImagePointer: exports.PlayerSetsImagePointer.fromJSON(object.playerSetsImagePointer)
            };
        }
        if (object.cookieFound !== undefined && object.cookieFound !== null) {
            message.event = {
                $case: "cookieFound",
                cookieFound: exports.CookieFound.fromJSON(object.cookieFound)
            };
        }
        return message;
    },
    toJSON: function (message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101;
        var obj = {};
        ((_a = message.event) === null || _a === void 0 ? void 0 : _a.$case) === "info" &&
            (obj.info = ((_b = message.event) === null || _b === void 0 ? void 0 : _b.info) ? exports.Info.toJSON((_c = message.event) === null || _c === void 0 ? void 0 : _c.info) : undefined);
        ((_d = message.event) === null || _d === void 0 ? void 0 : _d.$case) === "warn" &&
            (obj.warn = ((_e = message.event) === null || _e === void 0 ? void 0 : _e.warn) ? exports.Warn.toJSON((_f = message.event) === null || _f === void 0 ? void 0 : _f.warn) : undefined);
        ((_g = message.event) === null || _g === void 0 ? void 0 : _g.$case) === "error" &&
            (obj.error = ((_h = message.event) === null || _h === void 0 ? void 0 : _h.error) ? exports.Error.toJSON((_j = message.event) === null || _j === void 0 ? void 0 : _j.error) : undefined);
        ((_k = message.event) === null || _k === void 0 ? void 0 : _k.$case) === "ready" &&
            (obj.ready = ((_l = message.event) === null || _l === void 0 ? void 0 : _l.ready) ? exports.Ready.toJSON((_m = message.event) === null || _m === void 0 ? void 0 : _m.ready) : undefined);
        ((_o = message.event) === null || _o === void 0 ? void 0 : _o.$case) === "serverHeartbeat" &&
            (obj.serverHeartbeat = ((_p = message.event) === null || _p === void 0 ? void 0 : _p.serverHeartbeat)
                ? exports.ServerHeartbeat.toJSON((_q = message.event) === null || _q === void 0 ? void 0 : _q.serverHeartbeat)
                : undefined);
        ((_r = message.event) === null || _r === void 0 ? void 0 : _r.$case) === "disableVideo" &&
            (obj.disableVideo = ((_s = message.event) === null || _s === void 0 ? void 0 : _s.disableVideo)
                ? exports.DisableVideo.toJSON((_t = message.event) === null || _t === void 0 ? void 0 : _t.disableVideo)
                : undefined);
        ((_u = message.event) === null || _u === void 0 ? void 0 : _u.$case) === "playerMoves" &&
            (obj.playerMoves = ((_v = message.event) === null || _v === void 0 ? void 0 : _v.playerMoves)
                ? exports.PlayerMoves.toJSON((_w = message.event) === null || _w === void 0 ? void 0 : _w.playerMoves)
                : undefined);
        ((_x = message.event) === null || _x === void 0 ? void 0 : _x.$case) === "playerSetsStatus" &&
            (obj.playerSetsStatus = ((_y = message.event) === null || _y === void 0 ? void 0 : _y.playerSetsStatus)
                ? exports.PlayerSetsStatus.toJSON((_z = message.event) === null || _z === void 0 ? void 0 : _z.playerSetsStatus)
                : undefined);
        ((_0 = message.event) === null || _0 === void 0 ? void 0 : _0.$case) === "playerSpotlights" &&
            (obj.playerSpotlights = ((_1 = message.event) === null || _1 === void 0 ? void 0 : _1.playerSpotlights)
                ? exports.PlayerSpotlights.toJSON((_2 = message.event) === null || _2 === void 0 ? void 0 : _2.playerSpotlights)
                : undefined);
        ((_3 = message.event) === null || _3 === void 0 ? void 0 : _3.$case) === "playerRings" &&
            (obj.playerRings = ((_4 = message.event) === null || _4 === void 0 ? void 0 : _4.playerRings)
                ? exports.PlayerRings.toJSON((_5 = message.event) === null || _5 === void 0 ? void 0 : _5.playerRings)
                : undefined);
        ((_6 = message.event) === null || _6 === void 0 ? void 0 : _6.$case) === "playerSetsPointer" &&
            (obj.playerSetsPointer = ((_7 = message.event) === null || _7 === void 0 ? void 0 : _7.playerSetsPointer)
                ? exports.PlayerSetsPointer.toJSON((_8 = message.event) === null || _8 === void 0 ? void 0 : _8.playerSetsPointer)
                : undefined);
        ((_9 = message.event) === null || _9 === void 0 ? void 0 : _9.$case) === "playerChats" &&
            (obj.playerChats = ((_10 = message.event) === null || _10 === void 0 ? void 0 : _10.playerChats)
                ? exports.PlayerChats.toJSON((_11 = message.event) === null || _11 === void 0 ? void 0 : _11.playerChats)
                : undefined);
        ((_12 = message.event) === null || _12 === void 0 ? void 0 : _12.$case) === "playerInteracts" &&
            (obj.playerInteracts = ((_13 = message.event) === null || _13 === void 0 ? void 0 : _13.playerInteracts)
                ? exports.PlayerInteracts.toJSON((_14 = message.event) === null || _14 === void 0 ? void 0 : _14.playerInteracts)
                : undefined);
        ((_15 = message.event) === null || _15 === void 0 ? void 0 : _15.$case) === "playerGhosts" &&
            (obj.playerGhosts = ((_16 = message.event) === null || _16 === void 0 ? void 0 : _16.playerGhosts)
                ? exports.PlayerGhosts.toJSON((_17 = message.event) === null || _17 === void 0 ? void 0 : _17.playerGhosts)
                : undefined);
        ((_18 = message.event) === null || _18 === void 0 ? void 0 : _18.$case) === "playerEntersWhisper" &&
            (obj.playerEntersWhisper = ((_19 = message.event) === null || _19 === void 0 ? void 0 : _19.playerEntersWhisper)
                ? exports.PlayerEntersWhisper.toJSON((_20 = message.event) === null || _20 === void 0 ? void 0 : _20.playerEntersWhisper)
                : undefined);
        ((_21 = message.event) === null || _21 === void 0 ? void 0 : _21.$case) === "playerLeavesWhisper" &&
            (obj.playerLeavesWhisper = ((_22 = message.event) === null || _22 === void 0 ? void 0 : _22.playerLeavesWhisper)
                ? exports.PlayerLeavesWhisper.toJSON((_23 = message.event) === null || _23 === void 0 ? void 0 : _23.playerLeavesWhisper)
                : undefined);
        ((_24 = message.event) === null || _24 === void 0 ? void 0 : _24.$case) === "playerActivelySpeaks" &&
            (obj.playerActivelySpeaks = ((_25 = message.event) === null || _25 === void 0 ? void 0 : _25.playerActivelySpeaks)
                ? exports.PlayerActivelySpeaks.toJSON((_26 = message.event) === null || _26 === void 0 ? void 0 : _26.playerActivelySpeaks)
                : undefined);
        ((_27 = message.event) === null || _27 === void 0 ? void 0 : _27.$case) === "playerSetsEmote" &&
            (obj.playerSetsEmote = ((_28 = message.event) === null || _28 === void 0 ? void 0 : _28.playerSetsEmote)
                ? exports.PlayerSetsEmote.toJSON((_29 = message.event) === null || _29 === void 0 ? void 0 : _29.playerSetsEmote)
                : undefined);
        ((_30 = message.event) === null || _30 === void 0 ? void 0 : _30.$case) === "playerSetsWorkCondition" &&
            (obj.playerSetsWorkCondition = ((_31 = message.event) === null || _31 === void 0 ? void 0 : _31.playerSetsWorkCondition)
                ? exports.PlayerSetsWorkCondition.toJSON((_32 = message.event) === null || _32 === void 0 ? void 0 : _32.playerSetsWorkCondition)
                : undefined);
        ((_33 = message.event) === null || _33 === void 0 ? void 0 : _33.$case) === "playerSetsName" &&
            (obj.playerSetsName = ((_34 = message.event) === null || _34 === void 0 ? void 0 : _34.playerSetsName)
                ? exports.PlayerSetsName.toJSON((_35 = message.event) === null || _35 === void 0 ? void 0 : _35.playerSetsName)
                : undefined);
        ((_36 = message.event) === null || _36 === void 0 ? void 0 : _36.$case) === "playerSetsTextStatus" &&
            (obj.playerSetsTextStatus = ((_37 = message.event) === null || _37 === void 0 ? void 0 : _37.playerSetsTextStatus)
                ? exports.PlayerSetsTextStatus.toJSON((_38 = message.event) === null || _38 === void 0 ? void 0 : _38.playerSetsTextStatus)
                : undefined);
        ((_39 = message.event) === null || _39 === void 0 ? void 0 : _39.$case) === "playerSetsEmojiStatus" &&
            (obj.playerSetsEmojiStatus = ((_40 = message.event) === null || _40 === void 0 ? void 0 : _40.playerSetsEmojiStatus)
                ? exports.PlayerSetsEmojiStatus.toJSON((_41 = message.event) === null || _41 === void 0 ? void 0 : _41.playerSetsEmojiStatus)
                : undefined);
        ((_42 = message.event) === null || _42 === void 0 ? void 0 : _42.$case) === "playerSetsAffiliation" &&
            (obj.playerSetsAffiliation = ((_43 = message.event) === null || _43 === void 0 ? void 0 : _43.playerSetsAffiliation)
                ? exports.PlayerSetsAffiliation.toJSON((_44 = message.event) === null || _44 === void 0 ? void 0 : _44.playerSetsAffiliation)
                : undefined);
        ((_45 = message.event) === null || _45 === void 0 ? void 0 : _45.$case) === "playerExits" &&
            (obj.playerExits = ((_46 = message.event) === null || _46 === void 0 ? void 0 : _46.playerExits)
                ? exports.PlayerExits.toJSON((_47 = message.event) === null || _47 === void 0 ? void 0 : _47.playerExits)
                : undefined);
        ((_48 = message.event) === null || _48 === void 0 ? void 0 : _48.$case) === "playerSetsSprite" &&
            (obj.playerSetsSprite = ((_49 = message.event) === null || _49 === void 0 ? void 0 : _49.playerSetsSprite)
                ? exports.PlayerSetsSprite.toJSON((_50 = message.event) === null || _50 === void 0 ? void 0 : _50.playerSetsSprite)
                : undefined);
        ((_51 = message.event) === null || _51 === void 0 ? void 0 : _51.$case) === "respawnComplete" &&
            (obj.respawnComplete = ((_52 = message.event) === null || _52 === void 0 ? void 0 : _52.respawnComplete)
                ? exports.RespawnComplete.toJSON((_53 = message.event) === null || _53 === void 0 ? void 0 : _53.respawnComplete)
                : undefined);
        ((_54 = message.event) === null || _54 === void 0 ? void 0 : _54.$case) === "playerSetsOutfitString" &&
            (obj.playerSetsOutfitString = ((_55 = message.event) === null || _55 === void 0 ? void 0 : _55.playerSetsOutfitString)
                ? exports.PlayerSetsOutfitString.toJSON((_56 = message.event) === null || _56 === void 0 ? void 0 : _56.playerSetsOutfitString)
                : undefined);
        ((_57 = message.event) === null || _57 === void 0 ? void 0 : _57.$case) === "playerSetsIsSignedIn" &&
            (obj.playerSetsIsSignedIn = ((_58 = message.event) === null || _58 === void 0 ? void 0 : _58.playerSetsIsSignedIn)
                ? exports.PlayerSetsIsSignedIn.toJSON((_59 = message.event) === null || _59 === void 0 ? void 0 : _59.playerSetsIsSignedIn)
                : undefined);
        ((_60 = message.event) === null || _60 === void 0 ? void 0 : _60.$case) === "mapUpdates" &&
            (obj.mapUpdates = ((_61 = message.event) === null || _61 === void 0 ? void 0 : _61.mapUpdates)
                ? exports.MapUpdates.toJSON((_62 = message.event) === null || _62 === void 0 ? void 0 : _62.mapUpdates)
                : undefined);
        ((_63 = message.event) === null || _63 === void 0 ? void 0 : _63.$case) === "mapOverwrites" &&
            (obj.mapOverwrites = ((_64 = message.event) === null || _64 === void 0 ? void 0 : _64.mapOverwrites)
                ? exports.MapOverwrites.toJSON((_65 = message.event) === null || _65 === void 0 ? void 0 : _65.mapOverwrites)
                : undefined);
        ((_66 = message.event) === null || _66 === void 0 ? void 0 : _66.$case) === "spaceOverwrites" &&
            (obj.spaceOverwrites = ((_67 = message.event) === null || _67 === void 0 ? void 0 : _67.spaceOverwrites)
                ? exports.SpaceOverwrites.toJSON((_68 = message.event) === null || _68 === void 0 ? void 0 : _68.spaceOverwrites)
                : undefined);
        ((_69 = message.event) === null || _69 === void 0 ? void 0 : _69.$case) === "spaceIsClosed" &&
            (obj.spaceIsClosed = ((_70 = message.event) === null || _70 === void 0 ? void 0 : _70.spaceIsClosed)
                ? exports.SpaceIsClosed.toJSON((_71 = message.event) === null || _71 === void 0 ? void 0 : _71.spaceIsClosed)
                : undefined);
        ((_72 = message.event) === null || _72 === void 0 ? void 0 : _72.$case) === "playerEntersPortal" &&
            (obj.playerEntersPortal = ((_73 = message.event) === null || _73 === void 0 ? void 0 : _73.playerEntersPortal)
                ? exports.PlayerEntersPortal.toJSON((_74 = message.event) === null || _74 === void 0 ? void 0 : _74.playerEntersPortal)
                : undefined);
        ((_75 = message.event) === null || _75 === void 0 ? void 0 : _75.$case) === "spaceSetsIdMapping" &&
            (obj.spaceSetsIdMapping = ((_76 = message.event) === null || _76 === void 0 ? void 0 : _76.spaceSetsIdMapping)
                ? exports.SpaceSetsIdMapping.toJSON((_77 = message.event) === null || _77 === void 0 ? void 0 : _77.spaceSetsIdMapping)
                : undefined);
        ((_78 = message.event) === null || _78 === void 0 ? void 0 : _78.$case) === "playerSetsLastActive" &&
            (obj.playerSetsLastActive = ((_79 = message.event) === null || _79 === void 0 ? void 0 : _79.playerSetsLastActive)
                ? exports.PlayerSetsLastActive.toJSON((_80 = message.event) === null || _80 === void 0 ? void 0 : _80.playerSetsLastActive)
                : undefined);
        ((_81 = message.event) === null || _81 === void 0 ? void 0 : _81.$case) === "playerShootsConfetti" &&
            (obj.playerShootsConfetti = ((_82 = message.event) === null || _82 === void 0 ? void 0 : _82.playerShootsConfetti)
                ? exports.PlayerShootsConfetti.toJSON((_83 = message.event) === null || _83 === void 0 ? void 0 : _83.playerShootsConfetti)
                : undefined);
        ((_84 = message.event) === null || _84 === void 0 ? void 0 : _84.$case) === "playerSetsEventStatus" &&
            (obj.playerSetsEventStatus = ((_85 = message.event) === null || _85 === void 0 ? void 0 : _85.playerSetsEventStatus)
                ? exports.PlayerSetsEventStatus.toJSON((_86 = message.event) === null || _86 === void 0 ? void 0 : _86.playerSetsEventStatus)
                : undefined);
        ((_87 = message.event) === null || _87 === void 0 ? void 0 : _87.$case) === "playerSetsInConversation" &&
            (obj.playerSetsInConversation = ((_88 = message.event) === null || _88 === void 0 ? void 0 : _88.playerSetsInConversation)
                ? exports.PlayerSetsInConversation.toJSON((_89 = message.event) === null || _89 === void 0 ? void 0 : _89.playerSetsInConversation)
                : undefined);
        ((_90 = message.event) === null || _90 === void 0 ? void 0 : _90.$case) === "playerSetsCurrentDesk" &&
            (obj.playerSetsCurrentDesk = ((_91 = message.event) === null || _91 === void 0 ? void 0 : _91.playerSetsCurrentDesk)
                ? exports.PlayerSetsCurrentDesk.toJSON((_92 = message.event) === null || _92 === void 0 ? void 0 : _92.playerSetsCurrentDesk)
                : undefined);
        ((_93 = message.event) === null || _93 === void 0 ? void 0 : _93.$case) === "playerSetsCurrentArea" &&
            (obj.playerSetsCurrentArea = ((_94 = message.event) === null || _94 === void 0 ? void 0 : _94.playerSetsCurrentArea)
                ? exports.PlayerSetsCurrentArea.toJSON((_95 = message.event) === null || _95 === void 0 ? void 0 : _95.playerSetsCurrentArea)
                : undefined);
        ((_96 = message.event) === null || _96 === void 0 ? void 0 : _96.$case) === "playerSetsImagePointer" &&
            (obj.playerSetsImagePointer = ((_97 = message.event) === null || _97 === void 0 ? void 0 : _97.playerSetsImagePointer)
                ? exports.PlayerSetsImagePointer.toJSON((_98 = message.event) === null || _98 === void 0 ? void 0 : _98.playerSetsImagePointer)
                : undefined);
        ((_99 = message.event) === null || _99 === void 0 ? void 0 : _99.$case) === "cookieFound" &&
            (obj.cookieFound = ((_100 = message.event) === null || _100 === void 0 ? void 0 : _100.cookieFound)
                ? exports.CookieFound.toJSON((_101 = message.event) === null || _101 === void 0 ? void 0 : _101.cookieFound)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101;
        var message = __assign({}, baseServerClientEvent);
        if (((_a = object.event) === null || _a === void 0 ? void 0 : _a.$case) === "info" &&
            ((_b = object.event) === null || _b === void 0 ? void 0 : _b.info) !== undefined &&
            ((_c = object.event) === null || _c === void 0 ? void 0 : _c.info) !== null) {
            message.event = { $case: "info", info: exports.Info.fromPartial(object.event.info) };
        }
        if (((_d = object.event) === null || _d === void 0 ? void 0 : _d.$case) === "warn" &&
            ((_e = object.event) === null || _e === void 0 ? void 0 : _e.warn) !== undefined &&
            ((_f = object.event) === null || _f === void 0 ? void 0 : _f.warn) !== null) {
            message.event = { $case: "warn", warn: exports.Warn.fromPartial(object.event.warn) };
        }
        if (((_g = object.event) === null || _g === void 0 ? void 0 : _g.$case) === "error" &&
            ((_h = object.event) === null || _h === void 0 ? void 0 : _h.error) !== undefined &&
            ((_j = object.event) === null || _j === void 0 ? void 0 : _j.error) !== null) {
            message.event = { $case: "error", error: exports.Error.fromPartial(object.event.error) };
        }
        if (((_k = object.event) === null || _k === void 0 ? void 0 : _k.$case) === "ready" &&
            ((_l = object.event) === null || _l === void 0 ? void 0 : _l.ready) !== undefined &&
            ((_m = object.event) === null || _m === void 0 ? void 0 : _m.ready) !== null) {
            message.event = { $case: "ready", ready: exports.Ready.fromPartial(object.event.ready) };
        }
        if (((_o = object.event) === null || _o === void 0 ? void 0 : _o.$case) === "serverHeartbeat" &&
            ((_p = object.event) === null || _p === void 0 ? void 0 : _p.serverHeartbeat) !== undefined &&
            ((_q = object.event) === null || _q === void 0 ? void 0 : _q.serverHeartbeat) !== null) {
            message.event = {
                $case: "serverHeartbeat",
                serverHeartbeat: exports.ServerHeartbeat.fromPartial(object.event.serverHeartbeat)
            };
        }
        if (((_r = object.event) === null || _r === void 0 ? void 0 : _r.$case) === "disableVideo" &&
            ((_s = object.event) === null || _s === void 0 ? void 0 : _s.disableVideo) !== undefined &&
            ((_t = object.event) === null || _t === void 0 ? void 0 : _t.disableVideo) !== null) {
            message.event = {
                $case: "disableVideo",
                disableVideo: exports.DisableVideo.fromPartial(object.event.disableVideo)
            };
        }
        if (((_u = object.event) === null || _u === void 0 ? void 0 : _u.$case) === "playerMoves" &&
            ((_v = object.event) === null || _v === void 0 ? void 0 : _v.playerMoves) !== undefined &&
            ((_w = object.event) === null || _w === void 0 ? void 0 : _w.playerMoves) !== null) {
            message.event = {
                $case: "playerMoves",
                playerMoves: exports.PlayerMoves.fromPartial(object.event.playerMoves)
            };
        }
        if (((_x = object.event) === null || _x === void 0 ? void 0 : _x.$case) === "playerSetsStatus" &&
            ((_y = object.event) === null || _y === void 0 ? void 0 : _y.playerSetsStatus) !== undefined &&
            ((_z = object.event) === null || _z === void 0 ? void 0 : _z.playerSetsStatus) !== null) {
            message.event = {
                $case: "playerSetsStatus",
                playerSetsStatus: exports.PlayerSetsStatus.fromPartial(object.event.playerSetsStatus)
            };
        }
        if (((_0 = object.event) === null || _0 === void 0 ? void 0 : _0.$case) === "playerSpotlights" &&
            ((_1 = object.event) === null || _1 === void 0 ? void 0 : _1.playerSpotlights) !== undefined &&
            ((_2 = object.event) === null || _2 === void 0 ? void 0 : _2.playerSpotlights) !== null) {
            message.event = {
                $case: "playerSpotlights",
                playerSpotlights: exports.PlayerSpotlights.fromPartial(object.event.playerSpotlights)
            };
        }
        if (((_3 = object.event) === null || _3 === void 0 ? void 0 : _3.$case) === "playerRings" &&
            ((_4 = object.event) === null || _4 === void 0 ? void 0 : _4.playerRings) !== undefined &&
            ((_5 = object.event) === null || _5 === void 0 ? void 0 : _5.playerRings) !== null) {
            message.event = {
                $case: "playerRings",
                playerRings: exports.PlayerRings.fromPartial(object.event.playerRings)
            };
        }
        if (((_6 = object.event) === null || _6 === void 0 ? void 0 : _6.$case) === "playerSetsPointer" &&
            ((_7 = object.event) === null || _7 === void 0 ? void 0 : _7.playerSetsPointer) !== undefined &&
            ((_8 = object.event) === null || _8 === void 0 ? void 0 : _8.playerSetsPointer) !== null) {
            message.event = {
                $case: "playerSetsPointer",
                playerSetsPointer: exports.PlayerSetsPointer.fromPartial(object.event.playerSetsPointer)
            };
        }
        if (((_9 = object.event) === null || _9 === void 0 ? void 0 : _9.$case) === "playerChats" &&
            ((_10 = object.event) === null || _10 === void 0 ? void 0 : _10.playerChats) !== undefined &&
            ((_11 = object.event) === null || _11 === void 0 ? void 0 : _11.playerChats) !== null) {
            message.event = {
                $case: "playerChats",
                playerChats: exports.PlayerChats.fromPartial(object.event.playerChats)
            };
        }
        if (((_12 = object.event) === null || _12 === void 0 ? void 0 : _12.$case) === "playerInteracts" &&
            ((_13 = object.event) === null || _13 === void 0 ? void 0 : _13.playerInteracts) !== undefined &&
            ((_14 = object.event) === null || _14 === void 0 ? void 0 : _14.playerInteracts) !== null) {
            message.event = {
                $case: "playerInteracts",
                playerInteracts: exports.PlayerInteracts.fromPartial(object.event.playerInteracts)
            };
        }
        if (((_15 = object.event) === null || _15 === void 0 ? void 0 : _15.$case) === "playerGhosts" &&
            ((_16 = object.event) === null || _16 === void 0 ? void 0 : _16.playerGhosts) !== undefined &&
            ((_17 = object.event) === null || _17 === void 0 ? void 0 : _17.playerGhosts) !== null) {
            message.event = {
                $case: "playerGhosts",
                playerGhosts: exports.PlayerGhosts.fromPartial(object.event.playerGhosts)
            };
        }
        if (((_18 = object.event) === null || _18 === void 0 ? void 0 : _18.$case) === "playerEntersWhisper" &&
            ((_19 = object.event) === null || _19 === void 0 ? void 0 : _19.playerEntersWhisper) !== undefined &&
            ((_20 = object.event) === null || _20 === void 0 ? void 0 : _20.playerEntersWhisper) !== null) {
            message.event = {
                $case: "playerEntersWhisper",
                playerEntersWhisper: exports.PlayerEntersWhisper.fromPartial(object.event.playerEntersWhisper)
            };
        }
        if (((_21 = object.event) === null || _21 === void 0 ? void 0 : _21.$case) === "playerLeavesWhisper" &&
            ((_22 = object.event) === null || _22 === void 0 ? void 0 : _22.playerLeavesWhisper) !== undefined &&
            ((_23 = object.event) === null || _23 === void 0 ? void 0 : _23.playerLeavesWhisper) !== null) {
            message.event = {
                $case: "playerLeavesWhisper",
                playerLeavesWhisper: exports.PlayerLeavesWhisper.fromPartial(object.event.playerLeavesWhisper)
            };
        }
        if (((_24 = object.event) === null || _24 === void 0 ? void 0 : _24.$case) === "playerActivelySpeaks" &&
            ((_25 = object.event) === null || _25 === void 0 ? void 0 : _25.playerActivelySpeaks) !== undefined &&
            ((_26 = object.event) === null || _26 === void 0 ? void 0 : _26.playerActivelySpeaks) !== null) {
            message.event = {
                $case: "playerActivelySpeaks",
                playerActivelySpeaks: exports.PlayerActivelySpeaks.fromPartial(object.event.playerActivelySpeaks)
            };
        }
        if (((_27 = object.event) === null || _27 === void 0 ? void 0 : _27.$case) === "playerSetsEmote" &&
            ((_28 = object.event) === null || _28 === void 0 ? void 0 : _28.playerSetsEmote) !== undefined &&
            ((_29 = object.event) === null || _29 === void 0 ? void 0 : _29.playerSetsEmote) !== null) {
            message.event = {
                $case: "playerSetsEmote",
                playerSetsEmote: exports.PlayerSetsEmote.fromPartial(object.event.playerSetsEmote)
            };
        }
        if (((_30 = object.event) === null || _30 === void 0 ? void 0 : _30.$case) === "playerSetsWorkCondition" &&
            ((_31 = object.event) === null || _31 === void 0 ? void 0 : _31.playerSetsWorkCondition) !== undefined &&
            ((_32 = object.event) === null || _32 === void 0 ? void 0 : _32.playerSetsWorkCondition) !== null) {
            message.event = {
                $case: "playerSetsWorkCondition",
                playerSetsWorkCondition: exports.PlayerSetsWorkCondition.fromPartial(object.event.playerSetsWorkCondition)
            };
        }
        if (((_33 = object.event) === null || _33 === void 0 ? void 0 : _33.$case) === "playerSetsName" &&
            ((_34 = object.event) === null || _34 === void 0 ? void 0 : _34.playerSetsName) !== undefined &&
            ((_35 = object.event) === null || _35 === void 0 ? void 0 : _35.playerSetsName) !== null) {
            message.event = {
                $case: "playerSetsName",
                playerSetsName: exports.PlayerSetsName.fromPartial(object.event.playerSetsName)
            };
        }
        if (((_36 = object.event) === null || _36 === void 0 ? void 0 : _36.$case) === "playerSetsTextStatus" &&
            ((_37 = object.event) === null || _37 === void 0 ? void 0 : _37.playerSetsTextStatus) !== undefined &&
            ((_38 = object.event) === null || _38 === void 0 ? void 0 : _38.playerSetsTextStatus) !== null) {
            message.event = {
                $case: "playerSetsTextStatus",
                playerSetsTextStatus: exports.PlayerSetsTextStatus.fromPartial(object.event.playerSetsTextStatus)
            };
        }
        if (((_39 = object.event) === null || _39 === void 0 ? void 0 : _39.$case) === "playerSetsEmojiStatus" &&
            ((_40 = object.event) === null || _40 === void 0 ? void 0 : _40.playerSetsEmojiStatus) !== undefined &&
            ((_41 = object.event) === null || _41 === void 0 ? void 0 : _41.playerSetsEmojiStatus) !== null) {
            message.event = {
                $case: "playerSetsEmojiStatus",
                playerSetsEmojiStatus: exports.PlayerSetsEmojiStatus.fromPartial(object.event.playerSetsEmojiStatus)
            };
        }
        if (((_42 = object.event) === null || _42 === void 0 ? void 0 : _42.$case) === "playerSetsAffiliation" &&
            ((_43 = object.event) === null || _43 === void 0 ? void 0 : _43.playerSetsAffiliation) !== undefined &&
            ((_44 = object.event) === null || _44 === void 0 ? void 0 : _44.playerSetsAffiliation) !== null) {
            message.event = {
                $case: "playerSetsAffiliation",
                playerSetsAffiliation: exports.PlayerSetsAffiliation.fromPartial(object.event.playerSetsAffiliation)
            };
        }
        if (((_45 = object.event) === null || _45 === void 0 ? void 0 : _45.$case) === "playerExits" &&
            ((_46 = object.event) === null || _46 === void 0 ? void 0 : _46.playerExits) !== undefined &&
            ((_47 = object.event) === null || _47 === void 0 ? void 0 : _47.playerExits) !== null) {
            message.event = {
                $case: "playerExits",
                playerExits: exports.PlayerExits.fromPartial(object.event.playerExits)
            };
        }
        if (((_48 = object.event) === null || _48 === void 0 ? void 0 : _48.$case) === "playerSetsSprite" &&
            ((_49 = object.event) === null || _49 === void 0 ? void 0 : _49.playerSetsSprite) !== undefined &&
            ((_50 = object.event) === null || _50 === void 0 ? void 0 : _50.playerSetsSprite) !== null) {
            message.event = {
                $case: "playerSetsSprite",
                playerSetsSprite: exports.PlayerSetsSprite.fromPartial(object.event.playerSetsSprite)
            };
        }
        if (((_51 = object.event) === null || _51 === void 0 ? void 0 : _51.$case) === "respawnComplete" &&
            ((_52 = object.event) === null || _52 === void 0 ? void 0 : _52.respawnComplete) !== undefined &&
            ((_53 = object.event) === null || _53 === void 0 ? void 0 : _53.respawnComplete) !== null) {
            message.event = {
                $case: "respawnComplete",
                respawnComplete: exports.RespawnComplete.fromPartial(object.event.respawnComplete)
            };
        }
        if (((_54 = object.event) === null || _54 === void 0 ? void 0 : _54.$case) === "playerSetsOutfitString" &&
            ((_55 = object.event) === null || _55 === void 0 ? void 0 : _55.playerSetsOutfitString) !== undefined &&
            ((_56 = object.event) === null || _56 === void 0 ? void 0 : _56.playerSetsOutfitString) !== null) {
            message.event = {
                $case: "playerSetsOutfitString",
                playerSetsOutfitString: exports.PlayerSetsOutfitString.fromPartial(object.event.playerSetsOutfitString)
            };
        }
        if (((_57 = object.event) === null || _57 === void 0 ? void 0 : _57.$case) === "playerSetsIsSignedIn" &&
            ((_58 = object.event) === null || _58 === void 0 ? void 0 : _58.playerSetsIsSignedIn) !== undefined &&
            ((_59 = object.event) === null || _59 === void 0 ? void 0 : _59.playerSetsIsSignedIn) !== null) {
            message.event = {
                $case: "playerSetsIsSignedIn",
                playerSetsIsSignedIn: exports.PlayerSetsIsSignedIn.fromPartial(object.event.playerSetsIsSignedIn)
            };
        }
        if (((_60 = object.event) === null || _60 === void 0 ? void 0 : _60.$case) === "mapUpdates" &&
            ((_61 = object.event) === null || _61 === void 0 ? void 0 : _61.mapUpdates) !== undefined &&
            ((_62 = object.event) === null || _62 === void 0 ? void 0 : _62.mapUpdates) !== null) {
            message.event = {
                $case: "mapUpdates",
                mapUpdates: exports.MapUpdates.fromPartial(object.event.mapUpdates)
            };
        }
        if (((_63 = object.event) === null || _63 === void 0 ? void 0 : _63.$case) === "mapOverwrites" &&
            ((_64 = object.event) === null || _64 === void 0 ? void 0 : _64.mapOverwrites) !== undefined &&
            ((_65 = object.event) === null || _65 === void 0 ? void 0 : _65.mapOverwrites) !== null) {
            message.event = {
                $case: "mapOverwrites",
                mapOverwrites: exports.MapOverwrites.fromPartial(object.event.mapOverwrites)
            };
        }
        if (((_66 = object.event) === null || _66 === void 0 ? void 0 : _66.$case) === "spaceOverwrites" &&
            ((_67 = object.event) === null || _67 === void 0 ? void 0 : _67.spaceOverwrites) !== undefined &&
            ((_68 = object.event) === null || _68 === void 0 ? void 0 : _68.spaceOverwrites) !== null) {
            message.event = {
                $case: "spaceOverwrites",
                spaceOverwrites: exports.SpaceOverwrites.fromPartial(object.event.spaceOverwrites)
            };
        }
        if (((_69 = object.event) === null || _69 === void 0 ? void 0 : _69.$case) === "spaceIsClosed" &&
            ((_70 = object.event) === null || _70 === void 0 ? void 0 : _70.spaceIsClosed) !== undefined &&
            ((_71 = object.event) === null || _71 === void 0 ? void 0 : _71.spaceIsClosed) !== null) {
            message.event = {
                $case: "spaceIsClosed",
                spaceIsClosed: exports.SpaceIsClosed.fromPartial(object.event.spaceIsClosed)
            };
        }
        if (((_72 = object.event) === null || _72 === void 0 ? void 0 : _72.$case) === "playerEntersPortal" &&
            ((_73 = object.event) === null || _73 === void 0 ? void 0 : _73.playerEntersPortal) !== undefined &&
            ((_74 = object.event) === null || _74 === void 0 ? void 0 : _74.playerEntersPortal) !== null) {
            message.event = {
                $case: "playerEntersPortal",
                playerEntersPortal: exports.PlayerEntersPortal.fromPartial(object.event.playerEntersPortal)
            };
        }
        if (((_75 = object.event) === null || _75 === void 0 ? void 0 : _75.$case) === "spaceSetsIdMapping" &&
            ((_76 = object.event) === null || _76 === void 0 ? void 0 : _76.spaceSetsIdMapping) !== undefined &&
            ((_77 = object.event) === null || _77 === void 0 ? void 0 : _77.spaceSetsIdMapping) !== null) {
            message.event = {
                $case: "spaceSetsIdMapping",
                spaceSetsIdMapping: exports.SpaceSetsIdMapping.fromPartial(object.event.spaceSetsIdMapping)
            };
        }
        if (((_78 = object.event) === null || _78 === void 0 ? void 0 : _78.$case) === "playerSetsLastActive" &&
            ((_79 = object.event) === null || _79 === void 0 ? void 0 : _79.playerSetsLastActive) !== undefined &&
            ((_80 = object.event) === null || _80 === void 0 ? void 0 : _80.playerSetsLastActive) !== null) {
            message.event = {
                $case: "playerSetsLastActive",
                playerSetsLastActive: exports.PlayerSetsLastActive.fromPartial(object.event.playerSetsLastActive)
            };
        }
        if (((_81 = object.event) === null || _81 === void 0 ? void 0 : _81.$case) === "playerShootsConfetti" &&
            ((_82 = object.event) === null || _82 === void 0 ? void 0 : _82.playerShootsConfetti) !== undefined &&
            ((_83 = object.event) === null || _83 === void 0 ? void 0 : _83.playerShootsConfetti) !== null) {
            message.event = {
                $case: "playerShootsConfetti",
                playerShootsConfetti: exports.PlayerShootsConfetti.fromPartial(object.event.playerShootsConfetti)
            };
        }
        if (((_84 = object.event) === null || _84 === void 0 ? void 0 : _84.$case) === "playerSetsEventStatus" &&
            ((_85 = object.event) === null || _85 === void 0 ? void 0 : _85.playerSetsEventStatus) !== undefined &&
            ((_86 = object.event) === null || _86 === void 0 ? void 0 : _86.playerSetsEventStatus) !== null) {
            message.event = {
                $case: "playerSetsEventStatus",
                playerSetsEventStatus: exports.PlayerSetsEventStatus.fromPartial(object.event.playerSetsEventStatus)
            };
        }
        if (((_87 = object.event) === null || _87 === void 0 ? void 0 : _87.$case) === "playerSetsInConversation" &&
            ((_88 = object.event) === null || _88 === void 0 ? void 0 : _88.playerSetsInConversation) !== undefined &&
            ((_89 = object.event) === null || _89 === void 0 ? void 0 : _89.playerSetsInConversation) !== null) {
            message.event = {
                $case: "playerSetsInConversation",
                playerSetsInConversation: exports.PlayerSetsInConversation.fromPartial(object.event.playerSetsInConversation)
            };
        }
        if (((_90 = object.event) === null || _90 === void 0 ? void 0 : _90.$case) === "playerSetsCurrentDesk" &&
            ((_91 = object.event) === null || _91 === void 0 ? void 0 : _91.playerSetsCurrentDesk) !== undefined &&
            ((_92 = object.event) === null || _92 === void 0 ? void 0 : _92.playerSetsCurrentDesk) !== null) {
            message.event = {
                $case: "playerSetsCurrentDesk",
                playerSetsCurrentDesk: exports.PlayerSetsCurrentDesk.fromPartial(object.event.playerSetsCurrentDesk)
            };
        }
        if (((_93 = object.event) === null || _93 === void 0 ? void 0 : _93.$case) === "playerSetsCurrentArea" &&
            ((_94 = object.event) === null || _94 === void 0 ? void 0 : _94.playerSetsCurrentArea) !== undefined &&
            ((_95 = object.event) === null || _95 === void 0 ? void 0 : _95.playerSetsCurrentArea) !== null) {
            message.event = {
                $case: "playerSetsCurrentArea",
                playerSetsCurrentArea: exports.PlayerSetsCurrentArea.fromPartial(object.event.playerSetsCurrentArea)
            };
        }
        if (((_96 = object.event) === null || _96 === void 0 ? void 0 : _96.$case) === "playerSetsImagePointer" &&
            ((_97 = object.event) === null || _97 === void 0 ? void 0 : _97.playerSetsImagePointer) !== undefined &&
            ((_98 = object.event) === null || _98 === void 0 ? void 0 : _98.playerSetsImagePointer) !== null) {
            message.event = {
                $case: "playerSetsImagePointer",
                playerSetsImagePointer: exports.PlayerSetsImagePointer.fromPartial(object.event.playerSetsImagePointer)
            };
        }
        if (((_99 = object.event) === null || _99 === void 0 ? void 0 : _99.$case) === "cookieFound" &&
            ((_100 = object.event) === null || _100 === void 0 ? void 0 : _100.cookieFound) !== undefined &&
            ((_101 = object.event) === null || _101 === void 0 ? void 0 : _101.cookieFound) !== null) {
            message.event = {
                $case: "cookieFound",
                cookieFound: exports.CookieFound.fromPartial(object.event.cookieFound)
            };
        }
        return message;
    }
};
var baseServerHeartbeat = { lastRTT: 0 };
exports.ServerHeartbeat = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.lastRTT !== 0) {
            writer.uint32(8).uint32(message.lastRTT);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseServerHeartbeat);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lastRTT = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseServerHeartbeat);
        if (object.lastRTT !== undefined && object.lastRTT !== null) {
            message.lastRTT = Number(object.lastRTT);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.lastRTT !== undefined && (obj.lastRTT = message.lastRTT);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseServerHeartbeat);
        if (object.lastRTT !== undefined && object.lastRTT !== null) {
            message.lastRTT = object.lastRTT;
        }
        return message;
    }
};
var baseInfo = { message: "" };
exports.Info = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInfo);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.message = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseInfo);
        if (object.message !== undefined && object.message !== null) {
            message.message = String(object.message);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.message !== undefined && (obj.message = message.message);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseInfo);
        if (object.message !== undefined && object.message !== null) {
            message.message = object.message;
        }
        return message;
    }
};
var baseWarn = { message: "" };
exports.Warn = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseWarn);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.message = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseWarn);
        if (object.message !== undefined && object.message !== null) {
            message.message = String(object.message);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.message !== undefined && (obj.message = message.message);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseWarn);
        if (object.message !== undefined && object.message !== null) {
            message.message = object.message;
        }
        return message;
    }
};
var baseError = { message: "", code: 0 };
exports.Error = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.code !== 0) {
            writer.uint32(16).uint32(message.code);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseError);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.message = reader.string();
                    break;
                case 2:
                    message.code = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseError);
        if (object.message !== undefined && object.message !== null) {
            message.message = String(object.message);
        }
        if (object.code !== undefined && object.code !== null) {
            message.code = Number(object.code);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.message !== undefined && (obj.message = message.message);
        message.code !== undefined && (obj.code = message.code);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseError);
        if (object.message !== undefined && object.message !== null) {
            message.message = object.message;
        }
        if (object.code !== undefined && object.code !== null) {
            message.code = object.code;
        }
        return message;
    }
};
var baseReady = { id: "" };
exports.Ready = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseReady);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseReady);
        if (object.id !== undefined && object.id !== null) {
            message.id = String(object.id);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseReady);
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        return message;
    }
};
var baseDisableVideo = {};
exports.DisableVideo = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseDisableVideo);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = __assign({}, baseDisableVideo);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseDisableVideo);
        return message;
    }
};
var basePlayerMoves = { encId: 0, lastInputId: 0 };
exports.PlayerMoves = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.x !== undefined) {
            writer.uint32(16).uint32(message.x);
        }
        if (message.y !== undefined) {
            writer.uint32(24).uint32(message.y);
        }
        if (message.direction !== undefined) {
            writer.uint32(32).int32(message.direction);
        }
        if (message.mapId !== undefined) {
            writer.uint32(42).string(message.mapId);
        }
        if (message.lastInputId !== 0) {
            writer.uint32(48).uint32(message.lastInputId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerMoves);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                case 4:
                    message.direction = reader.int32();
                    break;
                case 5:
                    message.mapId = reader.string();
                    break;
                case 6:
                    message.lastInputId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerMoves);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = Number(object.x);
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = Number(object.y);
        }
        if (object.direction !== undefined && object.direction !== null) {
            message.direction = spriteDirectionEnum_ENUMFromJSON(object.direction);
        }
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = String(object.mapId);
        }
        if (object.lastInputId !== undefined && object.lastInputId !== null) {
            message.lastInputId = Number(object.lastInputId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.direction !== undefined &&
            (obj.direction =
                message.direction !== undefined
                    ? spriteDirectionEnum_ENUMToJSON(message.direction)
                    : undefined);
        message.mapId !== undefined && (obj.mapId = message.mapId);
        message.lastInputId !== undefined && (obj.lastInputId = message.lastInputId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerMoves);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = object.x;
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = object.y;
        }
        if (object.direction !== undefined && object.direction !== null) {
            message.direction = object.direction;
        }
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = object.mapId;
        }
        if (object.lastInputId !== undefined && object.lastInputId !== null) {
            message.lastInputId = object.lastInputId;
        }
        return message;
    }
};
var basePlayerSetsStatus = { encId: 0, status: false };
exports.PlayerSetsStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.status === true) {
            writer.uint32(16).bool(message.status);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.status = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsStatus);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.status !== undefined && object.status !== null) {
            message.status = Boolean(object.status);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.status !== undefined && (obj.status = message.status);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsStatus);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.status !== undefined && object.status !== null) {
            message.status = object.status;
        }
        return message;
    }
};
var basePlayerSpotlights = { encId: 0, encSpotlightedUserId: 0, spotlighted: 0 };
exports.PlayerSpotlights = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.encSpotlightedUserId !== 0) {
            writer.uint32(16).uint32(message.encSpotlightedUserId);
        }
        if (message.spotlighted !== 0) {
            writer.uint32(24).uint32(message.spotlighted);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSpotlights);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.encSpotlightedUserId = reader.uint32();
                    break;
                case 3:
                    message.spotlighted = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSpotlights);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.encSpotlightedUserId !== undefined && object.encSpotlightedUserId !== null) {
            message.encSpotlightedUserId = Number(object.encSpotlightedUserId);
        }
        if (object.spotlighted !== undefined && object.spotlighted !== null) {
            message.spotlighted = Number(object.spotlighted);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.encSpotlightedUserId !== undefined &&
            (obj.encSpotlightedUserId = message.encSpotlightedUserId);
        message.spotlighted !== undefined && (obj.spotlighted = message.spotlighted);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSpotlights);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.encSpotlightedUserId !== undefined && object.encSpotlightedUserId !== null) {
            message.encSpotlightedUserId = object.encSpotlightedUserId;
        }
        if (object.spotlighted !== undefined && object.spotlighted !== null) {
            message.spotlighted = object.spotlighted;
        }
        return message;
    }
};
var basePlayerRings = { encId: 0 };
exports.PlayerRings = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerRings);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerRings);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerRings);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        return message;
    }
};
var basePlayerSetsPointer = { encId: 0, objectId: "", x: 0, y: 0 };
exports.PlayerSetsPointer = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        if (message.x !== 0) {
            writer.uint32(24).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(32).uint32(message.y);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsPointer);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.objectId = reader.string();
                    break;
                case 3:
                    message.x = reader.uint32();
                    break;
                case 4:
                    message.y = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsPointer);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = String(object.objectId);
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = Number(object.x);
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = Number(object.y);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsPointer);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = object.objectId;
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = object.x;
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = object.y;
        }
        return message;
    }
};
var basePlayerSetsImagePointer = { encId: 0, objectId: "", x: 0, y: 0 };
exports.PlayerSetsImagePointer = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        if (message.x !== 0) {
            writer.uint32(25).double(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(33).double(message.y);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsImagePointer);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.objectId = reader.string();
                    break;
                case 3:
                    message.x = reader.double();
                    break;
                case 4:
                    message.y = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsImagePointer);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = String(object.objectId);
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = Number(object.x);
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = Number(object.y);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsImagePointer);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = object.objectId;
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = object.x;
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = object.y;
        }
        return message;
    }
};
var basePlayerChats = {
    senderId: "",
    recipient: "",
    contents: "",
    senderName: "",
    messageType: "",
    unixTime: 0
};
exports.PlayerChats = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.senderId !== "") {
            writer.uint32(10).string(message.senderId);
        }
        if (message.recipient !== "") {
            writer.uint32(18).string(message.recipient);
        }
        if (message.contents !== "") {
            writer.uint32(26).string(message.contents);
        }
        if (message.senderName !== "") {
            writer.uint32(34).string(message.senderName);
        }
        if (message.timestamp !== undefined) {
            exports.Timestamp.encode(message.timestamp, writer.uint32(42).fork()).ldelim();
        }
        if (message.messageType !== "") {
            writer.uint32(50).string(message.messageType);
        }
        if (message.unixTime !== 0) {
            writer.uint32(57).double(message.unixTime);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerChats);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.senderId = reader.string();
                    break;
                case 2:
                    message.recipient = reader.string();
                    break;
                case 3:
                    message.contents = reader.string();
                    break;
                case 4:
                    message.senderName = reader.string();
                    break;
                case 5:
                    message.timestamp = exports.Timestamp.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.messageType = reader.string();
                    break;
                case 7:
                    message.unixTime = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerChats);
        if (object.senderId !== undefined && object.senderId !== null) {
            message.senderId = String(object.senderId);
        }
        if (object.recipient !== undefined && object.recipient !== null) {
            message.recipient = String(object.recipient);
        }
        if (object.contents !== undefined && object.contents !== null) {
            message.contents = String(object.contents);
        }
        if (object.senderName !== undefined && object.senderName !== null) {
            message.senderName = String(object.senderName);
        }
        if (object.timestamp !== undefined && object.timestamp !== null) {
            message.timestamp = exports.Timestamp.fromJSON(object.timestamp);
        }
        if (object.messageType !== undefined && object.messageType !== null) {
            message.messageType = String(object.messageType);
        }
        if (object.unixTime !== undefined && object.unixTime !== null) {
            message.unixTime = Number(object.unixTime);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.senderId !== undefined && (obj.senderId = message.senderId);
        message.recipient !== undefined && (obj.recipient = message.recipient);
        message.contents !== undefined && (obj.contents = message.contents);
        message.senderName !== undefined && (obj.senderName = message.senderName);
        message.timestamp !== undefined &&
            (obj.timestamp = message.timestamp ? exports.Timestamp.toJSON(message.timestamp) : undefined);
        message.messageType !== undefined && (obj.messageType = message.messageType);
        message.unixTime !== undefined && (obj.unixTime = message.unixTime);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerChats);
        if (object.senderId !== undefined && object.senderId !== null) {
            message.senderId = object.senderId;
        }
        if (object.recipient !== undefined && object.recipient !== null) {
            message.recipient = object.recipient;
        }
        if (object.contents !== undefined && object.contents !== null) {
            message.contents = object.contents;
        }
        if (object.senderName !== undefined && object.senderName !== null) {
            message.senderName = object.senderName;
        }
        if (object.timestamp !== undefined && object.timestamp !== null) {
            message.timestamp = exports.Timestamp.fromPartial(object.timestamp);
        }
        if (object.messageType !== undefined && object.messageType !== null) {
            message.messageType = object.messageType;
        }
        if (object.unixTime !== undefined && object.unixTime !== null) {
            message.unixTime = object.unixTime;
        }
        return message;
    }
};
var baseTimestamp = { seconds: 0, nanoseconds: 0 };
exports.Timestamp = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.seconds !== 0) {
            writer.uint32(13).float(message.seconds);
        }
        if (message.nanoseconds !== 0) {
            writer.uint32(21).float(message.nanoseconds);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseTimestamp);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.seconds = reader.float();
                    break;
                case 2:
                    message.nanoseconds = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseTimestamp);
        if (object.seconds !== undefined && object.seconds !== null) {
            message.seconds = Number(object.seconds);
        }
        if (object.nanoseconds !== undefined && object.nanoseconds !== null) {
            message.nanoseconds = Number(object.nanoseconds);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.seconds !== undefined && (obj.seconds = message.seconds);
        message.nanoseconds !== undefined && (obj.nanoseconds = message.nanoseconds);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseTimestamp);
        if (object.seconds !== undefined && object.seconds !== null) {
            message.seconds = object.seconds;
        }
        if (object.nanoseconds !== undefined && object.nanoseconds !== null) {
            message.nanoseconds = object.nanoseconds;
        }
        return message;
    }
};
var basePlayerInteracts = { encId: 0, objId: "" };
exports.PlayerInteracts = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.objId !== "") {
            writer.uint32(18).string(message.objId);
        }
        if (message.dataJson !== undefined) {
            writer.uint32(26).string(message.dataJson);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerInteracts);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.objId = reader.string();
                    break;
                case 3:
                    message.dataJson = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerInteracts);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.objId !== undefined && object.objId !== null) {
            message.objId = String(object.objId);
        }
        if (object.dataJson !== undefined && object.dataJson !== null) {
            message.dataJson = String(object.dataJson);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.objId !== undefined && (obj.objId = message.objId);
        message.dataJson !== undefined && (obj.dataJson = message.dataJson);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerInteracts);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.objId !== undefined && object.objId !== null) {
            message.objId = object.objId;
        }
        if (object.dataJson !== undefined && object.dataJson !== null) {
            message.dataJson = object.dataJson;
        }
        return message;
    }
};
var basePlayerGhosts = { encId: 0, ghost: 0 };
exports.PlayerGhosts = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.ghost !== 0) {
            writer.uint32(16).uint32(message.ghost);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerGhosts);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.ghost = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerGhosts);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.ghost !== undefined && object.ghost !== null) {
            message.ghost = Number(object.ghost);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.ghost !== undefined && (obj.ghost = message.ghost);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerGhosts);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.ghost !== undefined && object.ghost !== null) {
            message.ghost = object.ghost;
        }
        return message;
    }
};
var basePlayerEntersWhisper = { encId: 0, whisperRecipient: "", whisperId: "" };
exports.PlayerEntersWhisper = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.whisperRecipient !== "") {
            writer.uint32(18).string(message.whisperRecipient);
        }
        if (message.whisperId !== "") {
            writer.uint32(26).string(message.whisperId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerEntersWhisper);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.whisperRecipient = reader.string();
                    break;
                case 3:
                    message.whisperId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerEntersWhisper);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.whisperRecipient !== undefined && object.whisperRecipient !== null) {
            message.whisperRecipient = String(object.whisperRecipient);
        }
        if (object.whisperId !== undefined && object.whisperId !== null) {
            message.whisperId = String(object.whisperId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.whisperRecipient !== undefined && (obj.whisperRecipient = message.whisperRecipient);
        message.whisperId !== undefined && (obj.whisperId = message.whisperId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerEntersWhisper);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.whisperRecipient !== undefined && object.whisperRecipient !== null) {
            message.whisperRecipient = object.whisperRecipient;
        }
        if (object.whisperId !== undefined && object.whisperId !== null) {
            message.whisperId = object.whisperId;
        }
        return message;
    }
};
var basePlayerLeavesWhisper = { encId: 0 };
exports.PlayerLeavesWhisper = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerLeavesWhisper);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerLeavesWhisper);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerLeavesWhisper);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        return message;
    }
};
var basePlayerActivelySpeaks = { encId: 0, activelySpeaking: 0 };
exports.PlayerActivelySpeaks = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.activelySpeaking !== 0) {
            writer.uint32(16).uint32(message.activelySpeaking);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerActivelySpeaks);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.activelySpeaking = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerActivelySpeaks);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.activelySpeaking !== undefined && object.activelySpeaking !== null) {
            message.activelySpeaking = Number(object.activelySpeaking);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.activelySpeaking !== undefined && (obj.activelySpeaking = message.activelySpeaking);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerActivelySpeaks);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.activelySpeaking !== undefined && object.activelySpeaking !== null) {
            message.activelySpeaking = object.activelySpeaking;
        }
        return message;
    }
};
var basePlayerSetsEmote = { encId: 0, emote: 0 };
exports.PlayerSetsEmote = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.emote !== 0) {
            writer.uint32(16).int32(message.emote);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsEmote);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.emote = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsEmote);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.emote !== undefined && object.emote !== null) {
            message.emote = emoteEnum_ENUMFromJSON(object.emote);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.emote !== undefined && (obj.emote = emoteEnum_ENUMToJSON(message.emote));
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsEmote);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.emote !== undefined && object.emote !== null) {
            message.emote = object.emote;
        }
        return message;
    }
};
var basePlayerSetsWorkCondition = { encId: 0, workCondition: 0 };
exports.PlayerSetsWorkCondition = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.workCondition !== 0) {
            writer.uint32(16).uint32(message.workCondition);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsWorkCondition);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.workCondition = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsWorkCondition);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.workCondition !== undefined && object.workCondition !== null) {
            message.workCondition = Number(object.workCondition);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.workCondition !== undefined && (obj.workCondition = message.workCondition);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsWorkCondition);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.workCondition !== undefined && object.workCondition !== null) {
            message.workCondition = object.workCondition;
        }
        return message;
    }
};
var basePlayerSetsLastActive = { encId: 0, lastActive: "" };
exports.PlayerSetsLastActive = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.lastActive !== "") {
            writer.uint32(18).string(message.lastActive);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsLastActive);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.lastActive = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsLastActive);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.lastActive !== undefined && object.lastActive !== null) {
            message.lastActive = String(object.lastActive);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.lastActive !== undefined && (obj.lastActive = message.lastActive);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsLastActive);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.lastActive !== undefined && object.lastActive !== null) {
            message.lastActive = object.lastActive;
        }
        return message;
    }
};
var basePlayerSetsName = { encId: 0, name: "" };
exports.PlayerSetsName = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsName);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsName);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.name !== undefined && (obj.name = message.name);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsName);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        return message;
    }
};
var basePlayerSetsTextStatus = { encId: 0, textStatus: "" };
exports.PlayerSetsTextStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.textStatus !== "") {
            writer.uint32(18).string(message.textStatus);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsTextStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.textStatus = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsTextStatus);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.textStatus !== undefined && object.textStatus !== null) {
            message.textStatus = String(object.textStatus);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.textStatus !== undefined && (obj.textStatus = message.textStatus);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsTextStatus);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.textStatus !== undefined && object.textStatus !== null) {
            message.textStatus = object.textStatus;
        }
        return message;
    }
};
var basePlayerSetsEmojiStatus = { encId: 0, emojiStatus: "" };
exports.PlayerSetsEmojiStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.emojiStatus !== "") {
            writer.uint32(18).string(message.emojiStatus);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsEmojiStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.emojiStatus = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsEmojiStatus);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.emojiStatus !== undefined && object.emojiStatus !== null) {
            message.emojiStatus = String(object.emojiStatus);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.emojiStatus !== undefined && (obj.emojiStatus = message.emojiStatus);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsEmojiStatus);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.emojiStatus !== undefined && object.emojiStatus !== null) {
            message.emojiStatus = object.emojiStatus;
        }
        return message;
    }
};
var basePlayerSetsAffiliation = { encId: 0, affiliation: "" };
exports.PlayerSetsAffiliation = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.affiliation !== "") {
            writer.uint32(18).string(message.affiliation);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsAffiliation);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.affiliation = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsAffiliation);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.affiliation !== undefined && object.affiliation !== null) {
            message.affiliation = String(object.affiliation);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.affiliation !== undefined && (obj.affiliation = message.affiliation);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsAffiliation);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.affiliation !== undefined && object.affiliation !== null) {
            message.affiliation = object.affiliation;
        }
        return message;
    }
};
var basePlayerExits = { encId: 0 };
exports.PlayerExits = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerExits);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerExits);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerExits);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        return message;
    }
};
var basePlayerSetsSprite = { encId: 0, sprite: 0 };
exports.PlayerSetsSprite = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.sprite !== 0) {
            writer.uint32(16).uint32(message.sprite);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsSprite);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.sprite = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsSprite);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.sprite !== undefined && object.sprite !== null) {
            message.sprite = Number(object.sprite);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.sprite !== undefined && (obj.sprite = message.sprite);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsSprite);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.sprite !== undefined && object.sprite !== null) {
            message.sprite = object.sprite;
        }
        return message;
    }
};
var basePlayerSetsOutfitString = { encId: 0, outfitString: "" };
exports.PlayerSetsOutfitString = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.outfitString !== "") {
            writer.uint32(18).string(message.outfitString);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsOutfitString);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.outfitString = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsOutfitString);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.outfitString !== undefined && object.outfitString !== null) {
            message.outfitString = String(object.outfitString);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.outfitString !== undefined && (obj.outfitString = message.outfitString);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsOutfitString);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.outfitString !== undefined && object.outfitString !== null) {
            message.outfitString = object.outfitString;
        }
        return message;
    }
};
var basePlayerSetsIsSignedIn = { encId: 0, isSignedIn: false };
exports.PlayerSetsIsSignedIn = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.isSignedIn === true) {
            writer.uint32(16).bool(message.isSignedIn);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsIsSignedIn);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.isSignedIn = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsIsSignedIn);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.isSignedIn !== undefined && object.isSignedIn !== null) {
            message.isSignedIn = Boolean(object.isSignedIn);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.isSignedIn !== undefined && (obj.isSignedIn = message.isSignedIn);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsIsSignedIn);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.isSignedIn !== undefined && object.isSignedIn !== null) {
            message.isSignedIn = object.isSignedIn;
        }
        return message;
    }
};
var baseRespawnComplete = {};
exports.RespawnComplete = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseRespawnComplete);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = __assign({}, baseRespawnComplete);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseRespawnComplete);
        return message;
    }
};
var baseMapUpdates = { mapId: "", diffJson: "" };
exports.MapUpdates = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.diffJson !== "") {
            writer.uint32(18).string(message.diffJson);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapUpdates);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.diffJson = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseMapUpdates);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = String(object.mapId);
        }
        if (object.diffJson !== undefined && object.diffJson !== null) {
            message.diffJson = String(object.diffJson);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.mapId !== undefined && (obj.mapId = message.mapId);
        message.diffJson !== undefined && (obj.diffJson = message.diffJson);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseMapUpdates);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = object.mapId;
        }
        if (object.diffJson !== undefined && object.diffJson !== null) {
            message.diffJson = object.diffJson;
        }
        return message;
    }
};
var baseMapOverwrites = { mapId: "", mapJson: "" };
exports.MapOverwrites = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.mapJson !== "") {
            writer.uint32(18).string(message.mapJson);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapOverwrites);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.mapJson = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseMapOverwrites);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = String(object.mapId);
        }
        if (object.mapJson !== undefined && object.mapJson !== null) {
            message.mapJson = String(object.mapJson);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.mapId !== undefined && (obj.mapId = message.mapId);
        message.mapJson !== undefined && (obj.mapJson = message.mapJson);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseMapOverwrites);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = object.mapId;
        }
        if (object.mapJson !== undefined && object.mapJson !== null) {
            message.mapJson = object.mapJson;
        }
        return message;
    }
};
var baseSpaceOverwrites = { spaceData: "" };
exports.SpaceOverwrites = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spaceData !== "") {
            writer.uint32(10).string(message.spaceData);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceOverwrites);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spaceData = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSpaceOverwrites);
        if (object.spaceData !== undefined && object.spaceData !== null) {
            message.spaceData = String(object.spaceData);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.spaceData !== undefined && (obj.spaceData = message.spaceData);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSpaceOverwrites);
        if (object.spaceData !== undefined && object.spaceData !== null) {
            message.spaceData = object.spaceData;
        }
        return message;
    }
};
var baseSpaceIsClosed = {};
exports.SpaceIsClosed = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceIsClosed);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = __assign({}, baseSpaceIsClosed);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseSpaceIsClosed);
        return message;
    }
};
var basePlayerEntersPortal = { targetUrl: "" };
exports.PlayerEntersPortal = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.targetUrl !== "") {
            writer.uint32(10).string(message.targetUrl);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerEntersPortal);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.targetUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerEntersPortal);
        if (object.targetUrl !== undefined && object.targetUrl !== null) {
            message.targetUrl = String(object.targetUrl);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.targetUrl !== undefined && (obj.targetUrl = message.targetUrl);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerEntersPortal);
        if (object.targetUrl !== undefined && object.targetUrl !== null) {
            message.targetUrl = object.targetUrl;
        }
        return message;
    }
};
var baseCookieFound = { encId: 0 };
exports.CookieFound = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseCookieFound);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseCookieFound);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseCookieFound);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        return message;
    }
};
var baseSpaceSetsIdMapping = { uid: "", encId: 0 };
exports.SpaceSetsIdMapping = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.uid !== "") {
            writer.uint32(10).string(message.uid);
        }
        if (message.encId !== 0) {
            writer.uint32(16).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpaceSetsIdMapping);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.uid = reader.string();
                    break;
                case 2:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSpaceSetsIdMapping);
        if (object.uid !== undefined && object.uid !== null) {
            message.uid = String(object.uid);
        }
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.uid !== undefined && (obj.uid = message.uid);
        message.encId !== undefined && (obj.encId = message.encId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSpaceSetsIdMapping);
        if (object.uid !== undefined && object.uid !== null) {
            message.uid = object.uid;
        }
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        return message;
    }
};
var basePlayerShootsConfetti = { encId: 0 };
exports.PlayerShootsConfetti = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerShootsConfetti);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerShootsConfetti);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerShootsConfetti);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        return message;
    }
};
var basePlayerSetsEventStatus = { encId: 0, eventStatus: "" };
exports.PlayerSetsEventStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.eventStatus !== "") {
            writer.uint32(18).string(message.eventStatus);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsEventStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.eventStatus = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsEventStatus);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.eventStatus !== undefined && object.eventStatus !== null) {
            message.eventStatus = String(object.eventStatus);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.eventStatus !== undefined && (obj.eventStatus = message.eventStatus);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsEventStatus);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.eventStatus !== undefined && object.eventStatus !== null) {
            message.eventStatus = object.eventStatus;
        }
        return message;
    }
};
var basePlayerSetsInConversation = { encId: 0, inConversation: false };
exports.PlayerSetsInConversation = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.inConversation === true) {
            writer.uint32(16).bool(message.inConversation);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsInConversation);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.inConversation = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsInConversation);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.inConversation !== undefined && object.inConversation !== null) {
            message.inConversation = Boolean(object.inConversation);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.inConversation !== undefined && (obj.inConversation = message.inConversation);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsInConversation);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.inConversation !== undefined && object.inConversation !== null) {
            message.inConversation = object.inConversation;
        }
        return message;
    }
};
var basePlayerSetsCurrentDesk = { encId: 0, currentDesk: "" };
exports.PlayerSetsCurrentDesk = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.currentDesk !== "") {
            writer.uint32(18).string(message.currentDesk);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsCurrentDesk);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.currentDesk = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsCurrentDesk);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.currentDesk !== undefined && object.currentDesk !== null) {
            message.currentDesk = String(object.currentDesk);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.currentDesk !== undefined && (obj.currentDesk = message.currentDesk);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsCurrentDesk);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.currentDesk !== undefined && object.currentDesk !== null) {
            message.currentDesk = object.currentDesk;
        }
        return message;
    }
};
var basePlayerSetsCurrentArea = { encId: 0, currentArea: "" };
exports.PlayerSetsCurrentArea = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.encId !== 0) {
            writer.uint32(8).uint32(message.encId);
        }
        if (message.currentArea !== "") {
            writer.uint32(18).string(message.currentArea);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, basePlayerSetsCurrentArea);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encId = reader.uint32();
                    break;
                case 2:
                    message.currentArea = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, basePlayerSetsCurrentArea);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = Number(object.encId);
        }
        if (object.currentArea !== undefined && object.currentArea !== null) {
            message.currentArea = String(object.currentArea);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.encId !== undefined && (obj.encId = message.encId);
        message.currentArea !== undefined && (obj.currentArea = message.currentArea);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, basePlayerSetsCurrentArea);
        if (object.encId !== undefined && object.encId !== null) {
            message.encId = object.encId;
        }
        if (object.currentArea !== undefined && object.currentArea !== null) {
            message.currentArea = object.currentArea;
        }
        return message;
    }
};
var baseClientServerBatch = {};
exports.ClientServerBatch = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.actions; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.ClientServerAction.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseClientServerBatch);
        message.actions = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.actions.push(exports.ClientServerAction.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseClientServerBatch);
        message.actions = [];
        if (object.actions !== undefined && object.actions !== null) {
            for (var _i = 0, _a = object.actions; _i < _a.length; _i++) {
                var e = _a[_i];
                message.actions.push(exports.ClientServerAction.fromJSON(e));
            }
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        if (message.actions) {
            obj.actions = message.actions.map(function (e) { return (e ? exports.ClientServerAction.toJSON(e) : undefined); });
        }
        else {
            obj.actions = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseClientServerBatch);
        message.actions = [];
        if (object.actions !== undefined && object.actions !== null) {
            for (var _i = 0, _a = object.actions; _i < _a.length; _i++) {
                var e = _a[_i];
                message.actions.push(exports.ClientServerAction.fromPartial(e));
            }
        }
        return message;
    }
};
var baseClientServerAction = {};
exports.ClientServerAction = {
    encode: function (message, writer) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (((_a = message.action) === null || _a === void 0 ? void 0 : _a.$case) === "clientHeartbeat") {
            exports.ClientHeartbeat.encode(message.action.clientHeartbeat, writer.uint32(10).fork()).ldelim();
        }
        if (((_b = message.action) === null || _b === void 0 ? void 0 : _b.$case) === "updateSubscriptions") {
            exports.UpdateSubscriptions.encode(message.action.updateSubscriptions, writer.uint32(26).fork()).ldelim();
        }
        if (((_c = message.action) === null || _c === void 0 ? void 0 : _c.$case) === "move") {
            exports.Move.encode(message.action.move, writer.uint32(42).fork()).ldelim();
        }
        if (((_d = message.action) === null || _d === void 0 ? void 0 : _d.$case) === "setSprite") {
            exports.SetSprite.encode(message.action.setSprite, writer.uint32(50).fork()).ldelim();
        }
        if (((_e = message.action) === null || _e === void 0 ? void 0 : _e.$case) === "setAffiliation") {
            exports.SetAffiliation.encode(message.action.setAffiliation, writer.uint32(58).fork()).ldelim();
        }
        if (((_f = message.action) === null || _f === void 0 ? void 0 : _f.$case) === "setStatus") {
            exports.SetStatus.encode(message.action.setStatus, writer.uint32(66).fork()).ldelim();
        }
        if (((_g = message.action) === null || _g === void 0 ? void 0 : _g.$case) === "spotlight") {
            exports.Spotlight.encode(message.action.spotlight, writer.uint32(74).fork()).ldelim();
        }
        if (((_h = message.action) === null || _h === void 0 ? void 0 : _h.$case) === "ring") {
            exports.Ring.encode(message.action.ring, writer.uint32(82).fork()).ldelim();
        }
        if (((_j = message.action) === null || _j === void 0 ? void 0 : _j.$case) === "setPointer") {
            exports.SetPointer.encode(message.action.setPointer, writer.uint32(90).fork()).ldelim();
        }
        if (((_k = message.action) === null || _k === void 0 ? void 0 : _k.$case) === "ban") {
            exports.Ban.encode(message.action.ban, writer.uint32(98).fork()).ldelim();
        }
        if (((_l = message.action) === null || _l === void 0 ? void 0 : _l.$case) === "kick") {
            exports.Kick.encode(message.action.kick, writer.uint32(106).fork()).ldelim();
        }
        if (((_m = message.action) === null || _m === void 0 ? void 0 : _m.$case) === "setImpassable") {
            exports.SetImpassable.encode(message.action.setImpassable, writer.uint32(114).fork()).ldelim();
        }
        if (((_o = message.action) === null || _o === void 0 ? void 0 : _o.$case) === "chat") {
            exports.Chat.encode(message.action.chat, writer.uint32(122).fork()).ldelim();
        }
        if (((_p = message.action) === null || _p === void 0 ? void 0 : _p.$case) === "setObject") {
            exports.SetObject.encode(message.action.setObject, writer.uint32(130).fork()).ldelim();
        }
        if (((_q = message.action) === null || _q === void 0 ? void 0 : _q.$case) === "deleteObject") {
            exports.DeleteObject.encode(message.action.deleteObject, writer.uint32(138).fork()).ldelim();
        }
        if (((_r = message.action) === null || _r === void 0 ? void 0 : _r.$case) === "interact") {
            exports.Interact.encode(message.action.interact, writer.uint32(146).fork()).ldelim();
        }
        if (((_s = message.action) === null || _s === void 0 ? void 0 : _s.$case) === "enterWhisper") {
            exports.EnterWhisper.encode(message.action.enterWhisper, writer.uint32(154).fork()).ldelim();
        }
        if (((_t = message.action) === null || _t === void 0 ? void 0 : _t.$case) === "leaveWhisper") {
            exports.LeaveWhisper.encode(message.action.leaveWhisper, writer.uint32(162).fork()).ldelim();
        }
        if (((_u = message.action) === null || _u === void 0 ? void 0 : _u.$case) === "setEmojiStatus") {
            exports.SetEmojiStatus.encode(message.action.setEmojiStatus, writer.uint32(170).fork()).ldelim();
        }
        if (((_v = message.action) === null || _v === void 0 ? void 0 : _v.$case) === "activelySpeaking") {
            exports.ActivelySpeaking.encode(message.action.activelySpeaking, writer.uint32(178).fork()).ldelim();
        }
        if (((_w = message.action) === null || _w === void 0 ? void 0 : _w.$case) === "setEmote") {
            exports.SetEmote.encode(message.action.setEmote, writer.uint32(186).fork()).ldelim();
        }
        if (((_x = message.action) === null || _x === void 0 ? void 0 : _x.$case) === "setName") {
            exports.SetName.encode(message.action.setName, writer.uint32(194).fork()).ldelim();
        }
        if (((_y = message.action) === null || _y === void 0 ? void 0 : _y.$case) === "setTextStatus") {
            exports.SetTextStatus.encode(message.action.setTextStatus, writer.uint32(202).fork()).ldelim();
        }
        if (((_z = message.action) === null || _z === void 0 ? void 0 : _z.$case) === "teleport") {
            exports.Teleport.encode(message.action.teleport, writer.uint32(210).fork()).ldelim();
        }
        if (((_0 = message.action) === null || _0 === void 0 ? void 0 : _0.$case) === "exit") {
            exports.Exit.encode(message.action.exit, writer.uint32(218).fork()).ldelim();
        }
        if (((_1 = message.action) === null || _1 === void 0 ? void 0 : _1.$case) === "enter") {
            exports.Enter.encode(message.action.enter, writer.uint32(226).fork()).ldelim();
        }
        if (((_2 = message.action) === null || _2 === void 0 ? void 0 : _2.$case) === "setWorkCondition") {
            exports.SetWorkCondition.encode(message.action.setWorkCondition, writer.uint32(234).fork()).ldelim();
        }
        if (((_3 = message.action) === null || _3 === void 0 ? void 0 : _3.$case) === "respawn") {
            exports.Respawn.encode(message.action.respawn, writer.uint32(242).fork()).ldelim();
        }
        if (((_4 = message.action) === null || _4 === void 0 ? void 0 : _4.$case) === "spawn") {
            exports.Spawn.encode(message.action.spawn, writer.uint32(250).fork()).ldelim();
        }
        if (((_5 = message.action) === null || _5 === void 0 ? void 0 : _5.$case) === "ghost") {
            exports.Ghost.encode(message.action.ghost, writer.uint32(258).fork()).ldelim();
        }
        if (((_6 = message.action) === null || _6 === void 0 ? void 0 : _6.$case) === "init") {
            exports.Init.encode(message.action.init, writer.uint32(266).fork()).ldelim();
        }
        if (((_7 = message.action) === null || _7 === void 0 ? void 0 : _7.$case) === "setOutfitString") {
            exports.SetOutfitString.encode(message.action.setOutfitString, writer.uint32(274).fork()).ldelim();
        }
        if (((_8 = message.action) === null || _8 === void 0 ? void 0 : _8.$case) === "mapUpdate") {
            exports.MapUpdate.encode(message.action.mapUpdate, writer.uint32(282).fork()).ldelim();
        }
        if (((_9 = message.action) === null || _9 === void 0 ? void 0 : _9.$case) === "shootConfetti") {
            exports.ShootConfetti.encode(message.action.shootConfetti, writer.uint32(290).fork()).ldelim();
        }
        if (((_10 = message.action) === null || _10 === void 0 ? void 0 : _10.$case) === "setEventStatus") {
            exports.SetEventStatus.encode(message.action.setEventStatus, writer.uint32(298).fork()).ldelim();
        }
        if (((_11 = message.action) === null || _11 === void 0 ? void 0 : _11.$case) === "setInConversation") {
            exports.SetInConversation.encode(message.action.setInConversation, writer.uint32(306).fork()).ldelim();
        }
        if (((_12 = message.action) === null || _12 === void 0 ? void 0 : _12.$case) === "setCurrentDesk") {
            exports.SetCurrentDesk.encode(message.action.setCurrentDesk, writer.uint32(314).fork()).ldelim();
        }
        if (((_13 = message.action) === null || _13 === void 0 ? void 0 : _13.$case) === "setCurrentArea") {
            exports.SetCurrentArea.encode(message.action.setCurrentArea, writer.uint32(322).fork()).ldelim();
        }
        if (((_14 = message.action) === null || _14 === void 0 ? void 0 : _14.$case) === "setImagePointer") {
            exports.SetImagePointer.encode(message.action.setImagePointer, writer.uint32(330).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseClientServerAction);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.action = {
                        $case: "clientHeartbeat",
                        clientHeartbeat: exports.ClientHeartbeat.decode(reader, reader.uint32())
                    };
                    break;
                case 3:
                    message.action = {
                        $case: "updateSubscriptions",
                        updateSubscriptions: exports.UpdateSubscriptions.decode(reader, reader.uint32())
                    };
                    break;
                case 5:
                    message.action = { $case: "move", move: exports.Move.decode(reader, reader.uint32()) };
                    break;
                case 6:
                    message.action = {
                        $case: "setSprite",
                        setSprite: exports.SetSprite.decode(reader, reader.uint32())
                    };
                    break;
                case 7:
                    message.action = {
                        $case: "setAffiliation",
                        setAffiliation: exports.SetAffiliation.decode(reader, reader.uint32())
                    };
                    break;
                case 8:
                    message.action = {
                        $case: "setStatus",
                        setStatus: exports.SetStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 9:
                    message.action = {
                        $case: "spotlight",
                        spotlight: exports.Spotlight.decode(reader, reader.uint32())
                    };
                    break;
                case 10:
                    message.action = { $case: "ring", ring: exports.Ring.decode(reader, reader.uint32()) };
                    break;
                case 11:
                    message.action = {
                        $case: "setPointer",
                        setPointer: exports.SetPointer.decode(reader, reader.uint32())
                    };
                    break;
                case 12:
                    message.action = { $case: "ban", ban: exports.Ban.decode(reader, reader.uint32()) };
                    break;
                case 13:
                    message.action = { $case: "kick", kick: exports.Kick.decode(reader, reader.uint32()) };
                    break;
                case 14:
                    message.action = {
                        $case: "setImpassable",
                        setImpassable: exports.SetImpassable.decode(reader, reader.uint32())
                    };
                    break;
                case 15:
                    message.action = { $case: "chat", chat: exports.Chat.decode(reader, reader.uint32()) };
                    break;
                case 16:
                    message.action = {
                        $case: "setObject",
                        setObject: exports.SetObject.decode(reader, reader.uint32())
                    };
                    break;
                case 17:
                    message.action = {
                        $case: "deleteObject",
                        deleteObject: exports.DeleteObject.decode(reader, reader.uint32())
                    };
                    break;
                case 18:
                    message.action = {
                        $case: "interact",
                        interact: exports.Interact.decode(reader, reader.uint32())
                    };
                    break;
                case 19:
                    message.action = {
                        $case: "enterWhisper",
                        enterWhisper: exports.EnterWhisper.decode(reader, reader.uint32())
                    };
                    break;
                case 20:
                    message.action = {
                        $case: "leaveWhisper",
                        leaveWhisper: exports.LeaveWhisper.decode(reader, reader.uint32())
                    };
                    break;
                case 21:
                    message.action = {
                        $case: "setEmojiStatus",
                        setEmojiStatus: exports.SetEmojiStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 22:
                    message.action = {
                        $case: "activelySpeaking",
                        activelySpeaking: exports.ActivelySpeaking.decode(reader, reader.uint32())
                    };
                    break;
                case 23:
                    message.action = {
                        $case: "setEmote",
                        setEmote: exports.SetEmote.decode(reader, reader.uint32())
                    };
                    break;
                case 24:
                    message.action = { $case: "setName", setName: exports.SetName.decode(reader, reader.uint32()) };
                    break;
                case 25:
                    message.action = {
                        $case: "setTextStatus",
                        setTextStatus: exports.SetTextStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 26:
                    message.action = {
                        $case: "teleport",
                        teleport: exports.Teleport.decode(reader, reader.uint32())
                    };
                    break;
                case 27:
                    message.action = { $case: "exit", exit: exports.Exit.decode(reader, reader.uint32()) };
                    break;
                case 28:
                    message.action = { $case: "enter", enter: exports.Enter.decode(reader, reader.uint32()) };
                    break;
                case 29:
                    message.action = {
                        $case: "setWorkCondition",
                        setWorkCondition: exports.SetWorkCondition.decode(reader, reader.uint32())
                    };
                    break;
                case 30:
                    message.action = { $case: "respawn", respawn: exports.Respawn.decode(reader, reader.uint32()) };
                    break;
                case 31:
                    message.action = { $case: "spawn", spawn: exports.Spawn.decode(reader, reader.uint32()) };
                    break;
                case 32:
                    message.action = { $case: "ghost", ghost: exports.Ghost.decode(reader, reader.uint32()) };
                    break;
                case 33:
                    message.action = { $case: "init", init: exports.Init.decode(reader, reader.uint32()) };
                    break;
                case 34:
                    message.action = {
                        $case: "setOutfitString",
                        setOutfitString: exports.SetOutfitString.decode(reader, reader.uint32())
                    };
                    break;
                case 35:
                    message.action = {
                        $case: "mapUpdate",
                        mapUpdate: exports.MapUpdate.decode(reader, reader.uint32())
                    };
                    break;
                case 36:
                    message.action = {
                        $case: "shootConfetti",
                        shootConfetti: exports.ShootConfetti.decode(reader, reader.uint32())
                    };
                    break;
                case 37:
                    message.action = {
                        $case: "setEventStatus",
                        setEventStatus: exports.SetEventStatus.decode(reader, reader.uint32())
                    };
                    break;
                case 38:
                    message.action = {
                        $case: "setInConversation",
                        setInConversation: exports.SetInConversation.decode(reader, reader.uint32())
                    };
                    break;
                case 39:
                    message.action = {
                        $case: "setCurrentDesk",
                        setCurrentDesk: exports.SetCurrentDesk.decode(reader, reader.uint32())
                    };
                    break;
                case 40:
                    message.action = {
                        $case: "setCurrentArea",
                        setCurrentArea: exports.SetCurrentArea.decode(reader, reader.uint32())
                    };
                    break;
                case 41:
                    message.action = {
                        $case: "setImagePointer",
                        setImagePointer: exports.SetImagePointer.decode(reader, reader.uint32())
                    };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseClientServerAction);
        if (object.clientHeartbeat !== undefined && object.clientHeartbeat !== null) {
            message.action = {
                $case: "clientHeartbeat",
                clientHeartbeat: exports.ClientHeartbeat.fromJSON(object.clientHeartbeat)
            };
        }
        if (object.updateSubscriptions !== undefined && object.updateSubscriptions !== null) {
            message.action = {
                $case: "updateSubscriptions",
                updateSubscriptions: exports.UpdateSubscriptions.fromJSON(object.updateSubscriptions)
            };
        }
        if (object.move !== undefined && object.move !== null) {
            message.action = { $case: "move", move: exports.Move.fromJSON(object.move) };
        }
        if (object.setSprite !== undefined && object.setSprite !== null) {
            message.action = { $case: "setSprite", setSprite: exports.SetSprite.fromJSON(object.setSprite) };
        }
        if (object.setAffiliation !== undefined && object.setAffiliation !== null) {
            message.action = {
                $case: "setAffiliation",
                setAffiliation: exports.SetAffiliation.fromJSON(object.setAffiliation)
            };
        }
        if (object.setStatus !== undefined && object.setStatus !== null) {
            message.action = { $case: "setStatus", setStatus: exports.SetStatus.fromJSON(object.setStatus) };
        }
        if (object.spotlight !== undefined && object.spotlight !== null) {
            message.action = { $case: "spotlight", spotlight: exports.Spotlight.fromJSON(object.spotlight) };
        }
        if (object.ring !== undefined && object.ring !== null) {
            message.action = { $case: "ring", ring: exports.Ring.fromJSON(object.ring) };
        }
        if (object.setPointer !== undefined && object.setPointer !== null) {
            message.action = { $case: "setPointer", setPointer: exports.SetPointer.fromJSON(object.setPointer) };
        }
        if (object.ban !== undefined && object.ban !== null) {
            message.action = { $case: "ban", ban: exports.Ban.fromJSON(object.ban) };
        }
        if (object.kick !== undefined && object.kick !== null) {
            message.action = { $case: "kick", kick: exports.Kick.fromJSON(object.kick) };
        }
        if (object.setImpassable !== undefined && object.setImpassable !== null) {
            message.action = {
                $case: "setImpassable",
                setImpassable: exports.SetImpassable.fromJSON(object.setImpassable)
            };
        }
        if (object.chat !== undefined && object.chat !== null) {
            message.action = { $case: "chat", chat: exports.Chat.fromJSON(object.chat) };
        }
        if (object.setObject !== undefined && object.setObject !== null) {
            message.action = { $case: "setObject", setObject: exports.SetObject.fromJSON(object.setObject) };
        }
        if (object.deleteObject !== undefined && object.deleteObject !== null) {
            message.action = {
                $case: "deleteObject",
                deleteObject: exports.DeleteObject.fromJSON(object.deleteObject)
            };
        }
        if (object.interact !== undefined && object.interact !== null) {
            message.action = { $case: "interact", interact: exports.Interact.fromJSON(object.interact) };
        }
        if (object.enterWhisper !== undefined && object.enterWhisper !== null) {
            message.action = {
                $case: "enterWhisper",
                enterWhisper: exports.EnterWhisper.fromJSON(object.enterWhisper)
            };
        }
        if (object.leaveWhisper !== undefined && object.leaveWhisper !== null) {
            message.action = {
                $case: "leaveWhisper",
                leaveWhisper: exports.LeaveWhisper.fromJSON(object.leaveWhisper)
            };
        }
        if (object.setEmojiStatus !== undefined && object.setEmojiStatus !== null) {
            message.action = {
                $case: "setEmojiStatus",
                setEmojiStatus: exports.SetEmojiStatus.fromJSON(object.setEmojiStatus)
            };
        }
        if (object.activelySpeaking !== undefined && object.activelySpeaking !== null) {
            message.action = {
                $case: "activelySpeaking",
                activelySpeaking: exports.ActivelySpeaking.fromJSON(object.activelySpeaking)
            };
        }
        if (object.setEmote !== undefined && object.setEmote !== null) {
            message.action = { $case: "setEmote", setEmote: exports.SetEmote.fromJSON(object.setEmote) };
        }
        if (object.setName !== undefined && object.setName !== null) {
            message.action = { $case: "setName", setName: exports.SetName.fromJSON(object.setName) };
        }
        if (object.setTextStatus !== undefined && object.setTextStatus !== null) {
            message.action = {
                $case: "setTextStatus",
                setTextStatus: exports.SetTextStatus.fromJSON(object.setTextStatus)
            };
        }
        if (object.teleport !== undefined && object.teleport !== null) {
            message.action = { $case: "teleport", teleport: exports.Teleport.fromJSON(object.teleport) };
        }
        if (object.exit !== undefined && object.exit !== null) {
            message.action = { $case: "exit", exit: exports.Exit.fromJSON(object.exit) };
        }
        if (object.enter !== undefined && object.enter !== null) {
            message.action = { $case: "enter", enter: exports.Enter.fromJSON(object.enter) };
        }
        if (object.setWorkCondition !== undefined && object.setWorkCondition !== null) {
            message.action = {
                $case: "setWorkCondition",
                setWorkCondition: exports.SetWorkCondition.fromJSON(object.setWorkCondition)
            };
        }
        if (object.respawn !== undefined && object.respawn !== null) {
            message.action = { $case: "respawn", respawn: exports.Respawn.fromJSON(object.respawn) };
        }
        if (object.spawn !== undefined && object.spawn !== null) {
            message.action = { $case: "spawn", spawn: exports.Spawn.fromJSON(object.spawn) };
        }
        if (object.ghost !== undefined && object.ghost !== null) {
            message.action = { $case: "ghost", ghost: exports.Ghost.fromJSON(object.ghost) };
        }
        if (object.init !== undefined && object.init !== null) {
            message.action = { $case: "init", init: exports.Init.fromJSON(object.init) };
        }
        if (object.setOutfitString !== undefined && object.setOutfitString !== null) {
            message.action = {
                $case: "setOutfitString",
                setOutfitString: exports.SetOutfitString.fromJSON(object.setOutfitString)
            };
        }
        if (object.mapUpdate !== undefined && object.mapUpdate !== null) {
            message.action = { $case: "mapUpdate", mapUpdate: exports.MapUpdate.fromJSON(object.mapUpdate) };
        }
        if (object.shootConfetti !== undefined && object.shootConfetti !== null) {
            message.action = {
                $case: "shootConfetti",
                shootConfetti: exports.ShootConfetti.fromJSON(object.shootConfetti)
            };
        }
        if (object.setEventStatus !== undefined && object.setEventStatus !== null) {
            message.action = {
                $case: "setEventStatus",
                setEventStatus: exports.SetEventStatus.fromJSON(object.setEventStatus)
            };
        }
        if (object.setInConversation !== undefined && object.setInConversation !== null) {
            message.action = {
                $case: "setInConversation",
                setInConversation: exports.SetInConversation.fromJSON(object.setInConversation)
            };
        }
        if (object.setCurrentDesk !== undefined && object.setCurrentDesk !== null) {
            message.action = {
                $case: "setCurrentDesk",
                setCurrentDesk: exports.SetCurrentDesk.fromJSON(object.setCurrentDesk)
            };
        }
        if (object.setCurrentArea !== undefined && object.setCurrentArea !== null) {
            message.action = {
                $case: "setCurrentArea",
                setCurrentArea: exports.SetCurrentArea.fromJSON(object.setCurrentArea)
            };
        }
        if (object.setImagePointer !== undefined && object.setImagePointer !== null) {
            message.action = {
                $case: "setImagePointer",
                setImagePointer: exports.SetImagePointer.fromJSON(object.setImagePointer)
            };
        }
        return message;
    },
    toJSON: function (message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92;
        var obj = {};
        ((_a = message.action) === null || _a === void 0 ? void 0 : _a.$case) === "clientHeartbeat" &&
            (obj.clientHeartbeat = ((_b = message.action) === null || _b === void 0 ? void 0 : _b.clientHeartbeat)
                ? exports.ClientHeartbeat.toJSON((_c = message.action) === null || _c === void 0 ? void 0 : _c.clientHeartbeat)
                : undefined);
        ((_d = message.action) === null || _d === void 0 ? void 0 : _d.$case) === "updateSubscriptions" &&
            (obj.updateSubscriptions = ((_e = message.action) === null || _e === void 0 ? void 0 : _e.updateSubscriptions)
                ? exports.UpdateSubscriptions.toJSON((_f = message.action) === null || _f === void 0 ? void 0 : _f.updateSubscriptions)
                : undefined);
        ((_g = message.action) === null || _g === void 0 ? void 0 : _g.$case) === "move" &&
            (obj.move = ((_h = message.action) === null || _h === void 0 ? void 0 : _h.move) ? exports.Move.toJSON((_j = message.action) === null || _j === void 0 ? void 0 : _j.move) : undefined);
        ((_k = message.action) === null || _k === void 0 ? void 0 : _k.$case) === "setSprite" &&
            (obj.setSprite = ((_l = message.action) === null || _l === void 0 ? void 0 : _l.setSprite)
                ? exports.SetSprite.toJSON((_m = message.action) === null || _m === void 0 ? void 0 : _m.setSprite)
                : undefined);
        ((_o = message.action) === null || _o === void 0 ? void 0 : _o.$case) === "setAffiliation" &&
            (obj.setAffiliation = ((_p = message.action) === null || _p === void 0 ? void 0 : _p.setAffiliation)
                ? exports.SetAffiliation.toJSON((_q = message.action) === null || _q === void 0 ? void 0 : _q.setAffiliation)
                : undefined);
        ((_r = message.action) === null || _r === void 0 ? void 0 : _r.$case) === "setStatus" &&
            (obj.setStatus = ((_s = message.action) === null || _s === void 0 ? void 0 : _s.setStatus)
                ? exports.SetStatus.toJSON((_t = message.action) === null || _t === void 0 ? void 0 : _t.setStatus)
                : undefined);
        ((_u = message.action) === null || _u === void 0 ? void 0 : _u.$case) === "spotlight" &&
            (obj.spotlight = ((_v = message.action) === null || _v === void 0 ? void 0 : _v.spotlight)
                ? exports.Spotlight.toJSON((_w = message.action) === null || _w === void 0 ? void 0 : _w.spotlight)
                : undefined);
        ((_x = message.action) === null || _x === void 0 ? void 0 : _x.$case) === "ring" &&
            (obj.ring = ((_y = message.action) === null || _y === void 0 ? void 0 : _y.ring) ? exports.Ring.toJSON((_z = message.action) === null || _z === void 0 ? void 0 : _z.ring) : undefined);
        ((_0 = message.action) === null || _0 === void 0 ? void 0 : _0.$case) === "setPointer" &&
            (obj.setPointer = ((_1 = message.action) === null || _1 === void 0 ? void 0 : _1.setPointer)
                ? exports.SetPointer.toJSON((_2 = message.action) === null || _2 === void 0 ? void 0 : _2.setPointer)
                : undefined);
        ((_3 = message.action) === null || _3 === void 0 ? void 0 : _3.$case) === "ban" &&
            (obj.ban = ((_4 = message.action) === null || _4 === void 0 ? void 0 : _4.ban) ? exports.Ban.toJSON((_5 = message.action) === null || _5 === void 0 ? void 0 : _5.ban) : undefined);
        ((_6 = message.action) === null || _6 === void 0 ? void 0 : _6.$case) === "kick" &&
            (obj.kick = ((_7 = message.action) === null || _7 === void 0 ? void 0 : _7.kick) ? exports.Kick.toJSON((_8 = message.action) === null || _8 === void 0 ? void 0 : _8.kick) : undefined);
        ((_9 = message.action) === null || _9 === void 0 ? void 0 : _9.$case) === "setImpassable" &&
            (obj.setImpassable = ((_10 = message.action) === null || _10 === void 0 ? void 0 : _10.setImpassable)
                ? exports.SetImpassable.toJSON((_11 = message.action) === null || _11 === void 0 ? void 0 : _11.setImpassable)
                : undefined);
        ((_12 = message.action) === null || _12 === void 0 ? void 0 : _12.$case) === "chat" &&
            (obj.chat = ((_13 = message.action) === null || _13 === void 0 ? void 0 : _13.chat) ? exports.Chat.toJSON((_14 = message.action) === null || _14 === void 0 ? void 0 : _14.chat) : undefined);
        ((_15 = message.action) === null || _15 === void 0 ? void 0 : _15.$case) === "setObject" &&
            (obj.setObject = ((_16 = message.action) === null || _16 === void 0 ? void 0 : _16.setObject)
                ? exports.SetObject.toJSON((_17 = message.action) === null || _17 === void 0 ? void 0 : _17.setObject)
                : undefined);
        ((_18 = message.action) === null || _18 === void 0 ? void 0 : _18.$case) === "deleteObject" &&
            (obj.deleteObject = ((_19 = message.action) === null || _19 === void 0 ? void 0 : _19.deleteObject)
                ? exports.DeleteObject.toJSON((_20 = message.action) === null || _20 === void 0 ? void 0 : _20.deleteObject)
                : undefined);
        ((_21 = message.action) === null || _21 === void 0 ? void 0 : _21.$case) === "interact" &&
            (obj.interact = ((_22 = message.action) === null || _22 === void 0 ? void 0 : _22.interact)
                ? exports.Interact.toJSON((_23 = message.action) === null || _23 === void 0 ? void 0 : _23.interact)
                : undefined);
        ((_24 = message.action) === null || _24 === void 0 ? void 0 : _24.$case) === "enterWhisper" &&
            (obj.enterWhisper = ((_25 = message.action) === null || _25 === void 0 ? void 0 : _25.enterWhisper)
                ? exports.EnterWhisper.toJSON((_26 = message.action) === null || _26 === void 0 ? void 0 : _26.enterWhisper)
                : undefined);
        ((_27 = message.action) === null || _27 === void 0 ? void 0 : _27.$case) === "leaveWhisper" &&
            (obj.leaveWhisper = ((_28 = message.action) === null || _28 === void 0 ? void 0 : _28.leaveWhisper)
                ? exports.LeaveWhisper.toJSON((_29 = message.action) === null || _29 === void 0 ? void 0 : _29.leaveWhisper)
                : undefined);
        ((_30 = message.action) === null || _30 === void 0 ? void 0 : _30.$case) === "setEmojiStatus" &&
            (obj.setEmojiStatus = ((_31 = message.action) === null || _31 === void 0 ? void 0 : _31.setEmojiStatus)
                ? exports.SetEmojiStatus.toJSON((_32 = message.action) === null || _32 === void 0 ? void 0 : _32.setEmojiStatus)
                : undefined);
        ((_33 = message.action) === null || _33 === void 0 ? void 0 : _33.$case) === "activelySpeaking" &&
            (obj.activelySpeaking = ((_34 = message.action) === null || _34 === void 0 ? void 0 : _34.activelySpeaking)
                ? exports.ActivelySpeaking.toJSON((_35 = message.action) === null || _35 === void 0 ? void 0 : _35.activelySpeaking)
                : undefined);
        ((_36 = message.action) === null || _36 === void 0 ? void 0 : _36.$case) === "setEmote" &&
            (obj.setEmote = ((_37 = message.action) === null || _37 === void 0 ? void 0 : _37.setEmote)
                ? exports.SetEmote.toJSON((_38 = message.action) === null || _38 === void 0 ? void 0 : _38.setEmote)
                : undefined);
        ((_39 = message.action) === null || _39 === void 0 ? void 0 : _39.$case) === "setName" &&
            (obj.setName = ((_40 = message.action) === null || _40 === void 0 ? void 0 : _40.setName) ? exports.SetName.toJSON((_41 = message.action) === null || _41 === void 0 ? void 0 : _41.setName) : undefined);
        ((_42 = message.action) === null || _42 === void 0 ? void 0 : _42.$case) === "setTextStatus" &&
            (obj.setTextStatus = ((_43 = message.action) === null || _43 === void 0 ? void 0 : _43.setTextStatus)
                ? exports.SetTextStatus.toJSON((_44 = message.action) === null || _44 === void 0 ? void 0 : _44.setTextStatus)
                : undefined);
        ((_45 = message.action) === null || _45 === void 0 ? void 0 : _45.$case) === "teleport" &&
            (obj.teleport = ((_46 = message.action) === null || _46 === void 0 ? void 0 : _46.teleport)
                ? exports.Teleport.toJSON((_47 = message.action) === null || _47 === void 0 ? void 0 : _47.teleport)
                : undefined);
        ((_48 = message.action) === null || _48 === void 0 ? void 0 : _48.$case) === "exit" &&
            (obj.exit = ((_49 = message.action) === null || _49 === void 0 ? void 0 : _49.exit) ? exports.Exit.toJSON((_50 = message.action) === null || _50 === void 0 ? void 0 : _50.exit) : undefined);
        ((_51 = message.action) === null || _51 === void 0 ? void 0 : _51.$case) === "enter" &&
            (obj.enter = ((_52 = message.action) === null || _52 === void 0 ? void 0 : _52.enter) ? exports.Enter.toJSON((_53 = message.action) === null || _53 === void 0 ? void 0 : _53.enter) : undefined);
        ((_54 = message.action) === null || _54 === void 0 ? void 0 : _54.$case) === "setWorkCondition" &&
            (obj.setWorkCondition = ((_55 = message.action) === null || _55 === void 0 ? void 0 : _55.setWorkCondition)
                ? exports.SetWorkCondition.toJSON((_56 = message.action) === null || _56 === void 0 ? void 0 : _56.setWorkCondition)
                : undefined);
        ((_57 = message.action) === null || _57 === void 0 ? void 0 : _57.$case) === "respawn" &&
            (obj.respawn = ((_58 = message.action) === null || _58 === void 0 ? void 0 : _58.respawn) ? exports.Respawn.toJSON((_59 = message.action) === null || _59 === void 0 ? void 0 : _59.respawn) : undefined);
        ((_60 = message.action) === null || _60 === void 0 ? void 0 : _60.$case) === "spawn" &&
            (obj.spawn = ((_61 = message.action) === null || _61 === void 0 ? void 0 : _61.spawn) ? exports.Spawn.toJSON((_62 = message.action) === null || _62 === void 0 ? void 0 : _62.spawn) : undefined);
        ((_63 = message.action) === null || _63 === void 0 ? void 0 : _63.$case) === "ghost" &&
            (obj.ghost = ((_64 = message.action) === null || _64 === void 0 ? void 0 : _64.ghost) ? exports.Ghost.toJSON((_65 = message.action) === null || _65 === void 0 ? void 0 : _65.ghost) : undefined);
        ((_66 = message.action) === null || _66 === void 0 ? void 0 : _66.$case) === "init" &&
            (obj.init = ((_67 = message.action) === null || _67 === void 0 ? void 0 : _67.init) ? exports.Init.toJSON((_68 = message.action) === null || _68 === void 0 ? void 0 : _68.init) : undefined);
        ((_69 = message.action) === null || _69 === void 0 ? void 0 : _69.$case) === "setOutfitString" &&
            (obj.setOutfitString = ((_70 = message.action) === null || _70 === void 0 ? void 0 : _70.setOutfitString)
                ? exports.SetOutfitString.toJSON((_71 = message.action) === null || _71 === void 0 ? void 0 : _71.setOutfitString)
                : undefined);
        ((_72 = message.action) === null || _72 === void 0 ? void 0 : _72.$case) === "mapUpdate" &&
            (obj.mapUpdate = ((_73 = message.action) === null || _73 === void 0 ? void 0 : _73.mapUpdate)
                ? exports.MapUpdate.toJSON((_74 = message.action) === null || _74 === void 0 ? void 0 : _74.mapUpdate)
                : undefined);
        ((_75 = message.action) === null || _75 === void 0 ? void 0 : _75.$case) === "shootConfetti" &&
            (obj.shootConfetti = ((_76 = message.action) === null || _76 === void 0 ? void 0 : _76.shootConfetti)
                ? exports.ShootConfetti.toJSON((_77 = message.action) === null || _77 === void 0 ? void 0 : _77.shootConfetti)
                : undefined);
        ((_78 = message.action) === null || _78 === void 0 ? void 0 : _78.$case) === "setEventStatus" &&
            (obj.setEventStatus = ((_79 = message.action) === null || _79 === void 0 ? void 0 : _79.setEventStatus)
                ? exports.SetEventStatus.toJSON((_80 = message.action) === null || _80 === void 0 ? void 0 : _80.setEventStatus)
                : undefined);
        ((_81 = message.action) === null || _81 === void 0 ? void 0 : _81.$case) === "setInConversation" &&
            (obj.setInConversation = ((_82 = message.action) === null || _82 === void 0 ? void 0 : _82.setInConversation)
                ? exports.SetInConversation.toJSON((_83 = message.action) === null || _83 === void 0 ? void 0 : _83.setInConversation)
                : undefined);
        ((_84 = message.action) === null || _84 === void 0 ? void 0 : _84.$case) === "setCurrentDesk" &&
            (obj.setCurrentDesk = ((_85 = message.action) === null || _85 === void 0 ? void 0 : _85.setCurrentDesk)
                ? exports.SetCurrentDesk.toJSON((_86 = message.action) === null || _86 === void 0 ? void 0 : _86.setCurrentDesk)
                : undefined);
        ((_87 = message.action) === null || _87 === void 0 ? void 0 : _87.$case) === "setCurrentArea" &&
            (obj.setCurrentArea = ((_88 = message.action) === null || _88 === void 0 ? void 0 : _88.setCurrentArea)
                ? exports.SetCurrentArea.toJSON((_89 = message.action) === null || _89 === void 0 ? void 0 : _89.setCurrentArea)
                : undefined);
        ((_90 = message.action) === null || _90 === void 0 ? void 0 : _90.$case) === "setImagePointer" &&
            (obj.setImagePointer = ((_91 = message.action) === null || _91 === void 0 ? void 0 : _91.setImagePointer)
                ? exports.SetImagePointer.toJSON((_92 = message.action) === null || _92 === void 0 ? void 0 : _92.setImagePointer)
                : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92;
        var message = __assign({}, baseClientServerAction);
        if (((_a = object.action) === null || _a === void 0 ? void 0 : _a.$case) === "clientHeartbeat" &&
            ((_b = object.action) === null || _b === void 0 ? void 0 : _b.clientHeartbeat) !== undefined &&
            ((_c = object.action) === null || _c === void 0 ? void 0 : _c.clientHeartbeat) !== null) {
            message.action = {
                $case: "clientHeartbeat",
                clientHeartbeat: exports.ClientHeartbeat.fromPartial(object.action.clientHeartbeat)
            };
        }
        if (((_d = object.action) === null || _d === void 0 ? void 0 : _d.$case) === "updateSubscriptions" &&
            ((_e = object.action) === null || _e === void 0 ? void 0 : _e.updateSubscriptions) !== undefined &&
            ((_f = object.action) === null || _f === void 0 ? void 0 : _f.updateSubscriptions) !== null) {
            message.action = {
                $case: "updateSubscriptions",
                updateSubscriptions: exports.UpdateSubscriptions.fromPartial(object.action.updateSubscriptions)
            };
        }
        if (((_g = object.action) === null || _g === void 0 ? void 0 : _g.$case) === "move" &&
            ((_h = object.action) === null || _h === void 0 ? void 0 : _h.move) !== undefined &&
            ((_j = object.action) === null || _j === void 0 ? void 0 : _j.move) !== null) {
            message.action = { $case: "move", move: exports.Move.fromPartial(object.action.move) };
        }
        if (((_k = object.action) === null || _k === void 0 ? void 0 : _k.$case) === "setSprite" &&
            ((_l = object.action) === null || _l === void 0 ? void 0 : _l.setSprite) !== undefined &&
            ((_m = object.action) === null || _m === void 0 ? void 0 : _m.setSprite) !== null) {
            message.action = {
                $case: "setSprite",
                setSprite: exports.SetSprite.fromPartial(object.action.setSprite)
            };
        }
        if (((_o = object.action) === null || _o === void 0 ? void 0 : _o.$case) === "setAffiliation" &&
            ((_p = object.action) === null || _p === void 0 ? void 0 : _p.setAffiliation) !== undefined &&
            ((_q = object.action) === null || _q === void 0 ? void 0 : _q.setAffiliation) !== null) {
            message.action = {
                $case: "setAffiliation",
                setAffiliation: exports.SetAffiliation.fromPartial(object.action.setAffiliation)
            };
        }
        if (((_r = object.action) === null || _r === void 0 ? void 0 : _r.$case) === "setStatus" &&
            ((_s = object.action) === null || _s === void 0 ? void 0 : _s.setStatus) !== undefined &&
            ((_t = object.action) === null || _t === void 0 ? void 0 : _t.setStatus) !== null) {
            message.action = {
                $case: "setStatus",
                setStatus: exports.SetStatus.fromPartial(object.action.setStatus)
            };
        }
        if (((_u = object.action) === null || _u === void 0 ? void 0 : _u.$case) === "spotlight" &&
            ((_v = object.action) === null || _v === void 0 ? void 0 : _v.spotlight) !== undefined &&
            ((_w = object.action) === null || _w === void 0 ? void 0 : _w.spotlight) !== null) {
            message.action = {
                $case: "spotlight",
                spotlight: exports.Spotlight.fromPartial(object.action.spotlight)
            };
        }
        if (((_x = object.action) === null || _x === void 0 ? void 0 : _x.$case) === "ring" &&
            ((_y = object.action) === null || _y === void 0 ? void 0 : _y.ring) !== undefined &&
            ((_z = object.action) === null || _z === void 0 ? void 0 : _z.ring) !== null) {
            message.action = { $case: "ring", ring: exports.Ring.fromPartial(object.action.ring) };
        }
        if (((_0 = object.action) === null || _0 === void 0 ? void 0 : _0.$case) === "setPointer" &&
            ((_1 = object.action) === null || _1 === void 0 ? void 0 : _1.setPointer) !== undefined &&
            ((_2 = object.action) === null || _2 === void 0 ? void 0 : _2.setPointer) !== null) {
            message.action = {
                $case: "setPointer",
                setPointer: exports.SetPointer.fromPartial(object.action.setPointer)
            };
        }
        if (((_3 = object.action) === null || _3 === void 0 ? void 0 : _3.$case) === "ban" &&
            ((_4 = object.action) === null || _4 === void 0 ? void 0 : _4.ban) !== undefined &&
            ((_5 = object.action) === null || _5 === void 0 ? void 0 : _5.ban) !== null) {
            message.action = { $case: "ban", ban: exports.Ban.fromPartial(object.action.ban) };
        }
        if (((_6 = object.action) === null || _6 === void 0 ? void 0 : _6.$case) === "kick" &&
            ((_7 = object.action) === null || _7 === void 0 ? void 0 : _7.kick) !== undefined &&
            ((_8 = object.action) === null || _8 === void 0 ? void 0 : _8.kick) !== null) {
            message.action = { $case: "kick", kick: exports.Kick.fromPartial(object.action.kick) };
        }
        if (((_9 = object.action) === null || _9 === void 0 ? void 0 : _9.$case) === "setImpassable" &&
            ((_10 = object.action) === null || _10 === void 0 ? void 0 : _10.setImpassable) !== undefined &&
            ((_11 = object.action) === null || _11 === void 0 ? void 0 : _11.setImpassable) !== null) {
            message.action = {
                $case: "setImpassable",
                setImpassable: exports.SetImpassable.fromPartial(object.action.setImpassable)
            };
        }
        if (((_12 = object.action) === null || _12 === void 0 ? void 0 : _12.$case) === "chat" &&
            ((_13 = object.action) === null || _13 === void 0 ? void 0 : _13.chat) !== undefined &&
            ((_14 = object.action) === null || _14 === void 0 ? void 0 : _14.chat) !== null) {
            message.action = { $case: "chat", chat: exports.Chat.fromPartial(object.action.chat) };
        }
        if (((_15 = object.action) === null || _15 === void 0 ? void 0 : _15.$case) === "setObject" &&
            ((_16 = object.action) === null || _16 === void 0 ? void 0 : _16.setObject) !== undefined &&
            ((_17 = object.action) === null || _17 === void 0 ? void 0 : _17.setObject) !== null) {
            message.action = {
                $case: "setObject",
                setObject: exports.SetObject.fromPartial(object.action.setObject)
            };
        }
        if (((_18 = object.action) === null || _18 === void 0 ? void 0 : _18.$case) === "deleteObject" &&
            ((_19 = object.action) === null || _19 === void 0 ? void 0 : _19.deleteObject) !== undefined &&
            ((_20 = object.action) === null || _20 === void 0 ? void 0 : _20.deleteObject) !== null) {
            message.action = {
                $case: "deleteObject",
                deleteObject: exports.DeleteObject.fromPartial(object.action.deleteObject)
            };
        }
        if (((_21 = object.action) === null || _21 === void 0 ? void 0 : _21.$case) === "interact" &&
            ((_22 = object.action) === null || _22 === void 0 ? void 0 : _22.interact) !== undefined &&
            ((_23 = object.action) === null || _23 === void 0 ? void 0 : _23.interact) !== null) {
            message.action = {
                $case: "interact",
                interact: exports.Interact.fromPartial(object.action.interact)
            };
        }
        if (((_24 = object.action) === null || _24 === void 0 ? void 0 : _24.$case) === "enterWhisper" &&
            ((_25 = object.action) === null || _25 === void 0 ? void 0 : _25.enterWhisper) !== undefined &&
            ((_26 = object.action) === null || _26 === void 0 ? void 0 : _26.enterWhisper) !== null) {
            message.action = {
                $case: "enterWhisper",
                enterWhisper: exports.EnterWhisper.fromPartial(object.action.enterWhisper)
            };
        }
        if (((_27 = object.action) === null || _27 === void 0 ? void 0 : _27.$case) === "leaveWhisper" &&
            ((_28 = object.action) === null || _28 === void 0 ? void 0 : _28.leaveWhisper) !== undefined &&
            ((_29 = object.action) === null || _29 === void 0 ? void 0 : _29.leaveWhisper) !== null) {
            message.action = {
                $case: "leaveWhisper",
                leaveWhisper: exports.LeaveWhisper.fromPartial(object.action.leaveWhisper)
            };
        }
        if (((_30 = object.action) === null || _30 === void 0 ? void 0 : _30.$case) === "setEmojiStatus" &&
            ((_31 = object.action) === null || _31 === void 0 ? void 0 : _31.setEmojiStatus) !== undefined &&
            ((_32 = object.action) === null || _32 === void 0 ? void 0 : _32.setEmojiStatus) !== null) {
            message.action = {
                $case: "setEmojiStatus",
                setEmojiStatus: exports.SetEmojiStatus.fromPartial(object.action.setEmojiStatus)
            };
        }
        if (((_33 = object.action) === null || _33 === void 0 ? void 0 : _33.$case) === "activelySpeaking" &&
            ((_34 = object.action) === null || _34 === void 0 ? void 0 : _34.activelySpeaking) !== undefined &&
            ((_35 = object.action) === null || _35 === void 0 ? void 0 : _35.activelySpeaking) !== null) {
            message.action = {
                $case: "activelySpeaking",
                activelySpeaking: exports.ActivelySpeaking.fromPartial(object.action.activelySpeaking)
            };
        }
        if (((_36 = object.action) === null || _36 === void 0 ? void 0 : _36.$case) === "setEmote" &&
            ((_37 = object.action) === null || _37 === void 0 ? void 0 : _37.setEmote) !== undefined &&
            ((_38 = object.action) === null || _38 === void 0 ? void 0 : _38.setEmote) !== null) {
            message.action = {
                $case: "setEmote",
                setEmote: exports.SetEmote.fromPartial(object.action.setEmote)
            };
        }
        if (((_39 = object.action) === null || _39 === void 0 ? void 0 : _39.$case) === "setName" &&
            ((_40 = object.action) === null || _40 === void 0 ? void 0 : _40.setName) !== undefined &&
            ((_41 = object.action) === null || _41 === void 0 ? void 0 : _41.setName) !== null) {
            message.action = { $case: "setName", setName: exports.SetName.fromPartial(object.action.setName) };
        }
        if (((_42 = object.action) === null || _42 === void 0 ? void 0 : _42.$case) === "setTextStatus" &&
            ((_43 = object.action) === null || _43 === void 0 ? void 0 : _43.setTextStatus) !== undefined &&
            ((_44 = object.action) === null || _44 === void 0 ? void 0 : _44.setTextStatus) !== null) {
            message.action = {
                $case: "setTextStatus",
                setTextStatus: exports.SetTextStatus.fromPartial(object.action.setTextStatus)
            };
        }
        if (((_45 = object.action) === null || _45 === void 0 ? void 0 : _45.$case) === "teleport" &&
            ((_46 = object.action) === null || _46 === void 0 ? void 0 : _46.teleport) !== undefined &&
            ((_47 = object.action) === null || _47 === void 0 ? void 0 : _47.teleport) !== null) {
            message.action = {
                $case: "teleport",
                teleport: exports.Teleport.fromPartial(object.action.teleport)
            };
        }
        if (((_48 = object.action) === null || _48 === void 0 ? void 0 : _48.$case) === "exit" &&
            ((_49 = object.action) === null || _49 === void 0 ? void 0 : _49.exit) !== undefined &&
            ((_50 = object.action) === null || _50 === void 0 ? void 0 : _50.exit) !== null) {
            message.action = { $case: "exit", exit: exports.Exit.fromPartial(object.action.exit) };
        }
        if (((_51 = object.action) === null || _51 === void 0 ? void 0 : _51.$case) === "enter" &&
            ((_52 = object.action) === null || _52 === void 0 ? void 0 : _52.enter) !== undefined &&
            ((_53 = object.action) === null || _53 === void 0 ? void 0 : _53.enter) !== null) {
            message.action = { $case: "enter", enter: exports.Enter.fromPartial(object.action.enter) };
        }
        if (((_54 = object.action) === null || _54 === void 0 ? void 0 : _54.$case) === "setWorkCondition" &&
            ((_55 = object.action) === null || _55 === void 0 ? void 0 : _55.setWorkCondition) !== undefined &&
            ((_56 = object.action) === null || _56 === void 0 ? void 0 : _56.setWorkCondition) !== null) {
            message.action = {
                $case: "setWorkCondition",
                setWorkCondition: exports.SetWorkCondition.fromPartial(object.action.setWorkCondition)
            };
        }
        if (((_57 = object.action) === null || _57 === void 0 ? void 0 : _57.$case) === "respawn" &&
            ((_58 = object.action) === null || _58 === void 0 ? void 0 : _58.respawn) !== undefined &&
            ((_59 = object.action) === null || _59 === void 0 ? void 0 : _59.respawn) !== null) {
            message.action = { $case: "respawn", respawn: exports.Respawn.fromPartial(object.action.respawn) };
        }
        if (((_60 = object.action) === null || _60 === void 0 ? void 0 : _60.$case) === "spawn" &&
            ((_61 = object.action) === null || _61 === void 0 ? void 0 : _61.spawn) !== undefined &&
            ((_62 = object.action) === null || _62 === void 0 ? void 0 : _62.spawn) !== null) {
            message.action = { $case: "spawn", spawn: exports.Spawn.fromPartial(object.action.spawn) };
        }
        if (((_63 = object.action) === null || _63 === void 0 ? void 0 : _63.$case) === "ghost" &&
            ((_64 = object.action) === null || _64 === void 0 ? void 0 : _64.ghost) !== undefined &&
            ((_65 = object.action) === null || _65 === void 0 ? void 0 : _65.ghost) !== null) {
            message.action = { $case: "ghost", ghost: exports.Ghost.fromPartial(object.action.ghost) };
        }
        if (((_66 = object.action) === null || _66 === void 0 ? void 0 : _66.$case) === "init" &&
            ((_67 = object.action) === null || _67 === void 0 ? void 0 : _67.init) !== undefined &&
            ((_68 = object.action) === null || _68 === void 0 ? void 0 : _68.init) !== null) {
            message.action = { $case: "init", init: exports.Init.fromPartial(object.action.init) };
        }
        if (((_69 = object.action) === null || _69 === void 0 ? void 0 : _69.$case) === "setOutfitString" &&
            ((_70 = object.action) === null || _70 === void 0 ? void 0 : _70.setOutfitString) !== undefined &&
            ((_71 = object.action) === null || _71 === void 0 ? void 0 : _71.setOutfitString) !== null) {
            message.action = {
                $case: "setOutfitString",
                setOutfitString: exports.SetOutfitString.fromPartial(object.action.setOutfitString)
            };
        }
        if (((_72 = object.action) === null || _72 === void 0 ? void 0 : _72.$case) === "mapUpdate" &&
            ((_73 = object.action) === null || _73 === void 0 ? void 0 : _73.mapUpdate) !== undefined &&
            ((_74 = object.action) === null || _74 === void 0 ? void 0 : _74.mapUpdate) !== null) {
            message.action = {
                $case: "mapUpdate",
                mapUpdate: exports.MapUpdate.fromPartial(object.action.mapUpdate)
            };
        }
        if (((_75 = object.action) === null || _75 === void 0 ? void 0 : _75.$case) === "shootConfetti" &&
            ((_76 = object.action) === null || _76 === void 0 ? void 0 : _76.shootConfetti) !== undefined &&
            ((_77 = object.action) === null || _77 === void 0 ? void 0 : _77.shootConfetti) !== null) {
            message.action = {
                $case: "shootConfetti",
                shootConfetti: exports.ShootConfetti.fromPartial(object.action.shootConfetti)
            };
        }
        if (((_78 = object.action) === null || _78 === void 0 ? void 0 : _78.$case) === "setEventStatus" &&
            ((_79 = object.action) === null || _79 === void 0 ? void 0 : _79.setEventStatus) !== undefined &&
            ((_80 = object.action) === null || _80 === void 0 ? void 0 : _80.setEventStatus) !== null) {
            message.action = {
                $case: "setEventStatus",
                setEventStatus: exports.SetEventStatus.fromPartial(object.action.setEventStatus)
            };
        }
        if (((_81 = object.action) === null || _81 === void 0 ? void 0 : _81.$case) === "setInConversation" &&
            ((_82 = object.action) === null || _82 === void 0 ? void 0 : _82.setInConversation) !== undefined &&
            ((_83 = object.action) === null || _83 === void 0 ? void 0 : _83.setInConversation) !== null) {
            message.action = {
                $case: "setInConversation",
                setInConversation: exports.SetInConversation.fromPartial(object.action.setInConversation)
            };
        }
        if (((_84 = object.action) === null || _84 === void 0 ? void 0 : _84.$case) === "setCurrentDesk" &&
            ((_85 = object.action) === null || _85 === void 0 ? void 0 : _85.setCurrentDesk) !== undefined &&
            ((_86 = object.action) === null || _86 === void 0 ? void 0 : _86.setCurrentDesk) !== null) {
            message.action = {
                $case: "setCurrentDesk",
                setCurrentDesk: exports.SetCurrentDesk.fromPartial(object.action.setCurrentDesk)
            };
        }
        if (((_87 = object.action) === null || _87 === void 0 ? void 0 : _87.$case) === "setCurrentArea" &&
            ((_88 = object.action) === null || _88 === void 0 ? void 0 : _88.setCurrentArea) !== undefined &&
            ((_89 = object.action) === null || _89 === void 0 ? void 0 : _89.setCurrentArea) !== null) {
            message.action = {
                $case: "setCurrentArea",
                setCurrentArea: exports.SetCurrentArea.fromPartial(object.action.setCurrentArea)
            };
        }
        if (((_90 = object.action) === null || _90 === void 0 ? void 0 : _90.$case) === "setImagePointer" &&
            ((_91 = object.action) === null || _91 === void 0 ? void 0 : _91.setImagePointer) !== undefined &&
            ((_92 = object.action) === null || _92 === void 0 ? void 0 : _92.setImagePointer) !== null) {
            message.action = {
                $case: "setImagePointer",
                setImagePointer: exports.SetImagePointer.fromPartial(object.action.setImagePointer)
            };
        }
        return message;
    }
};
var baseClientHeartbeat = {};
exports.ClientHeartbeat = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseClientHeartbeat);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = __assign({}, baseClientHeartbeat);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseClientHeartbeat);
        return message;
    }
};
var baseUpdateSubscriptions = {};
exports.UpdateSubscriptions = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        Object.entries(message.subscriptions).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.UpdateSubscriptions_SubscriptionsEntry.encode({ key: key, value: value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseUpdateSubscriptions);
        message.subscriptions = {};
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    var entry1 = exports.UpdateSubscriptions_SubscriptionsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.subscriptions[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseUpdateSubscriptions);
        message.subscriptions = {};
        if (object.subscriptions !== undefined && object.subscriptions !== null) {
            Object.entries(object.subscriptions).forEach(function (_a) {
                var key = _a[0], value = _a[1];
                message.subscriptions[key] = Boolean(value);
            });
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        obj.subscriptions = {};
        if (message.subscriptions) {
            Object.entries(message.subscriptions).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.subscriptions[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseUpdateSubscriptions);
        message.subscriptions = {};
        if (object.subscriptions !== undefined && object.subscriptions !== null) {
            Object.entries(object.subscriptions).forEach(function (_a) {
                var key = _a[0], value = _a[1];
                if (value !== undefined) {
                    message.subscriptions[key] = Boolean(value);
                }
            });
        }
        return message;
    }
};
var baseUpdateSubscriptions_SubscriptionsEntry = { key: "", value: false };
exports.UpdateSubscriptions_SubscriptionsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value === true) {
            writer.uint32(16).bool(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseUpdateSubscriptions_SubscriptionsEntry);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseUpdateSubscriptions_SubscriptionsEntry);
        if (object.key !== undefined && object.key !== null) {
            message.key = String(object.key);
        }
        if (object.value !== undefined && object.value !== null) {
            message.value = Boolean(object.value);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseUpdateSubscriptions_SubscriptionsEntry);
        if (object.key !== undefined && object.key !== null) {
            message.key = object.key;
        }
        if (object.value !== undefined && object.value !== null) {
            message.value = object.value;
        }
        return message;
    }
};
var baseMove = { dir: 0, stopped: false, inputId: 0 };
exports.Move = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.dir !== 0) {
            writer.uint32(8).int32(message.dir);
        }
        if (message.stopped === true) {
            writer.uint32(16).bool(message.stopped);
        }
        if (message.inputId !== 0) {
            writer.uint32(24).uint32(message.inputId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMove);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.dir = reader.int32();
                    break;
                case 2:
                    message.stopped = reader.bool();
                    break;
                case 3:
                    message.inputId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseMove);
        if (object.dir !== undefined && object.dir !== null) {
            message.dir = moveDirectionEnum_ENUMFromJSON(object.dir);
        }
        if (object.stopped !== undefined && object.stopped !== null) {
            message.stopped = Boolean(object.stopped);
        }
        if (object.inputId !== undefined && object.inputId !== null) {
            message.inputId = Number(object.inputId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.dir !== undefined && (obj.dir = moveDirectionEnum_ENUMToJSON(message.dir));
        message.stopped !== undefined && (obj.stopped = message.stopped);
        message.inputId !== undefined && (obj.inputId = message.inputId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseMove);
        if (object.dir !== undefined && object.dir !== null) {
            message.dir = object.dir;
        }
        if (object.stopped !== undefined && object.stopped !== null) {
            message.stopped = object.stopped;
        }
        if (object.inputId !== undefined && object.inputId !== null) {
            message.inputId = object.inputId;
        }
        return message;
    }
};
var baseSetSprite = { sprite: 0 };
exports.SetSprite = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.sprite !== 0) {
            writer.uint32(8).uint32(message.sprite);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetSprite);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sprite = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetSprite);
        if (object.sprite !== undefined && object.sprite !== null) {
            message.sprite = Number(object.sprite);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.sprite !== undefined && (obj.sprite = message.sprite);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetSprite);
        if (object.sprite !== undefined && object.sprite !== null) {
            message.sprite = object.sprite;
        }
        return message;
    }
};
var baseSetAffiliation = { affiliation: "" };
exports.SetAffiliation = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.affiliation !== "") {
            writer.uint32(10).string(message.affiliation);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetAffiliation);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.affiliation = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetAffiliation);
        if (object.affiliation !== undefined && object.affiliation !== null) {
            message.affiliation = String(object.affiliation);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.affiliation !== undefined && (obj.affiliation = message.affiliation);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetAffiliation);
        if (object.affiliation !== undefined && object.affiliation !== null) {
            message.affiliation = object.affiliation;
        }
        return message;
    }
};
var baseSetStatus = { status: false };
exports.SetStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.status === true) {
            writer.uint32(8).bool(message.status);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetStatus);
        if (object.status !== undefined && object.status !== null) {
            message.status = Boolean(object.status);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.status !== undefined && (obj.status = message.status);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetStatus);
        if (object.status !== undefined && object.status !== null) {
            message.status = object.status;
        }
        return message;
    }
};
var baseSetOutfitString = { outfitString: "" };
exports.SetOutfitString = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.outfitString !== "") {
            writer.uint32(10).string(message.outfitString);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetOutfitString);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.outfitString = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetOutfitString);
        if (object.outfitString !== undefined && object.outfitString !== null) {
            message.outfitString = String(object.outfitString);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.outfitString !== undefined && (obj.outfitString = message.outfitString);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetOutfitString);
        if (object.outfitString !== undefined && object.outfitString !== null) {
            message.outfitString = object.outfitString;
        }
        return message;
    }
};
var baseSpotlight = { spotlightedUser: "", isSpotlighted: false };
exports.Spotlight = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spotlightedUser !== "") {
            writer.uint32(10).string(message.spotlightedUser);
        }
        if (message.isSpotlighted === true) {
            writer.uint32(16).bool(message.isSpotlighted);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpotlight);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spotlightedUser = reader.string();
                    break;
                case 2:
                    message.isSpotlighted = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSpotlight);
        if (object.spotlightedUser !== undefined && object.spotlightedUser !== null) {
            message.spotlightedUser = String(object.spotlightedUser);
        }
        if (object.isSpotlighted !== undefined && object.isSpotlighted !== null) {
            message.isSpotlighted = Boolean(object.isSpotlighted);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.spotlightedUser !== undefined && (obj.spotlightedUser = message.spotlightedUser);
        message.isSpotlighted !== undefined && (obj.isSpotlighted = message.isSpotlighted);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSpotlight);
        if (object.spotlightedUser !== undefined && object.spotlightedUser !== null) {
            message.spotlightedUser = object.spotlightedUser;
        }
        if (object.isSpotlighted !== undefined && object.isSpotlighted !== null) {
            message.isSpotlighted = object.isSpotlighted;
        }
        return message;
    }
};
var baseRing = { user: "" };
exports.Ring = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.user !== "") {
            writer.uint32(10).string(message.user);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseRing);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.user = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseRing);
        if (object.user !== undefined && object.user !== null) {
            message.user = String(object.user);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.user !== undefined && (obj.user = message.user);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseRing);
        if (object.user !== undefined && object.user !== null) {
            message.user = object.user;
        }
        return message;
    }
};
var baseSetPointer = { objectId: "", x: 0, y: 0 };
exports.SetPointer = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.objectId !== "") {
            writer.uint32(10).string(message.objectId);
        }
        if (message.x !== 0) {
            writer.uint32(16).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(24).uint32(message.y);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetPointer);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objectId = reader.string();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetPointer);
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = String(object.objectId);
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = Number(object.x);
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = Number(object.y);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetPointer);
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = object.objectId;
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = object.x;
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = object.y;
        }
        return message;
    }
};
var baseSetImagePointer = { objectId: "", x: 0, y: 0 };
exports.SetImagePointer = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.objectId !== "") {
            writer.uint32(10).string(message.objectId);
        }
        if (message.x !== 0) {
            writer.uint32(17).double(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(25).double(message.y);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetImagePointer);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objectId = reader.string();
                    break;
                case 2:
                    message.x = reader.double();
                    break;
                case 3:
                    message.y = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetImagePointer);
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = String(object.objectId);
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = Number(object.x);
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = Number(object.y);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetImagePointer);
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = object.objectId;
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = object.x;
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = object.y;
        }
        return message;
    }
};
var baseBan = { user: "" };
exports.Ban = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.user !== "") {
            writer.uint32(10).string(message.user);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseBan);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.user = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseBan);
        if (object.user !== undefined && object.user !== null) {
            message.user = String(object.user);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.user !== undefined && (obj.user = message.user);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseBan);
        if (object.user !== undefined && object.user !== null) {
            message.user = object.user;
        }
        return message;
    }
};
var baseKick = { user: "" };
exports.Kick = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.user !== "") {
            writer.uint32(10).string(message.user);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseKick);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.user = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseKick);
        if (object.user !== undefined && object.user !== null) {
            message.user = String(object.user);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.user !== undefined && (obj.user = message.user);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseKick);
        if (object.user !== undefined && object.user !== null) {
            message.user = object.user;
        }
        return message;
    }
};
var baseSetImpassable = { mapId: "", x: 0, y: 0, impassable: false };
exports.SetImpassable = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.x !== 0) {
            writer.uint32(16).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(24).uint32(message.y);
        }
        if (message.impassable === true) {
            writer.uint32(32).bool(message.impassable);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetImpassable);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                case 4:
                    message.impassable = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetImpassable);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = String(object.mapId);
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = Number(object.x);
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = Number(object.y);
        }
        if (object.impassable !== undefined && object.impassable !== null) {
            message.impassable = Boolean(object.impassable);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.mapId !== undefined && (obj.mapId = message.mapId);
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        message.impassable !== undefined && (obj.impassable = message.impassable);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetImpassable);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = object.mapId;
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = object.x;
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = object.y;
        }
        if (object.impassable !== undefined && object.impassable !== null) {
            message.impassable = object.impassable;
        }
        return message;
    }
};
var baseChat = { chatRecipient: "", contents: "", localPlayerIds: "", mapId: "" };
exports.Chat = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.chatRecipient !== "") {
            writer.uint32(10).string(message.chatRecipient);
        }
        if (message.contents !== "") {
            writer.uint32(18).string(message.contents);
        }
        for (var _i = 0, _a = message.localPlayerIds; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(26).string(v);
        }
        if (message.mapId !== "") {
            writer.uint32(34).string(message.mapId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseChat);
        message.localPlayerIds = [];
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chatRecipient = reader.string();
                    break;
                case 2:
                    message.contents = reader.string();
                    break;
                case 3:
                    message.localPlayerIds.push(reader.string());
                    break;
                case 4:
                    message.mapId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseChat);
        message.localPlayerIds = [];
        if (object.chatRecipient !== undefined && object.chatRecipient !== null) {
            message.chatRecipient = String(object.chatRecipient);
        }
        if (object.contents !== undefined && object.contents !== null) {
            message.contents = String(object.contents);
        }
        if (object.localPlayerIds !== undefined && object.localPlayerIds !== null) {
            for (var _i = 0, _a = object.localPlayerIds; _i < _a.length; _i++) {
                var e = _a[_i];
                message.localPlayerIds.push(String(e));
            }
        }
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = String(object.mapId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.chatRecipient !== undefined && (obj.chatRecipient = message.chatRecipient);
        message.contents !== undefined && (obj.contents = message.contents);
        if (message.localPlayerIds) {
            obj.localPlayerIds = message.localPlayerIds.map(function (e) { return e; });
        }
        else {
            obj.localPlayerIds = [];
        }
        message.mapId !== undefined && (obj.mapId = message.mapId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseChat);
        message.localPlayerIds = [];
        if (object.chatRecipient !== undefined && object.chatRecipient !== null) {
            message.chatRecipient = object.chatRecipient;
        }
        if (object.contents !== undefined && object.contents !== null) {
            message.contents = object.contents;
        }
        if (object.localPlayerIds !== undefined && object.localPlayerIds !== null) {
            for (var _i = 0, _a = object.localPlayerIds; _i < _a.length; _i++) {
                var e = _a[_i];
                message.localPlayerIds.push(e);
            }
        }
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = object.mapId;
        }
        return message;
    }
};
var baseSetObject = { mapId: "", objectId: "" };
exports.SetObject = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetObject);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetObject);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = String(object.mapId);
        }
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = String(object.objectId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.mapId !== undefined && (obj.mapId = message.mapId);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetObject);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = object.mapId;
        }
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = object.objectId;
        }
        return message;
    }
};
var baseDeleteObject = { mapId: "", objectId: "" };
exports.DeleteObject = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseDeleteObject);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseDeleteObject);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = String(object.mapId);
        }
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = String(object.objectId);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.mapId !== undefined && (obj.mapId = message.mapId);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseDeleteObject);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = object.mapId;
        }
        if (object.objectId !== undefined && object.objectId !== null) {
            message.objectId = object.objectId;
        }
        return message;
    }
};
var baseInteract = { objId: "" };
exports.Interact = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.objId !== "") {
            writer.uint32(10).string(message.objId);
        }
        if (message.dataJson !== undefined) {
            writer.uint32(18).string(message.dataJson);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInteract);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objId = reader.string();
                    break;
                case 2:
                    message.dataJson = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseInteract);
        if (object.objId !== undefined && object.objId !== null) {
            message.objId = String(object.objId);
        }
        if (object.dataJson !== undefined && object.dataJson !== null) {
            message.dataJson = String(object.dataJson);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.objId !== undefined && (obj.objId = message.objId);
        message.dataJson !== undefined && (obj.dataJson = message.dataJson);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseInteract);
        if (object.objId !== undefined && object.objId !== null) {
            message.objId = object.objId;
        }
        if (object.dataJson !== undefined && object.dataJson !== null) {
            message.dataJson = object.dataJson;
        }
        return message;
    }
};
var baseActivelySpeaking = { activelySpeaking: false };
exports.ActivelySpeaking = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.activelySpeaking === true) {
            writer.uint32(8).bool(message.activelySpeaking);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseActivelySpeaking);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.activelySpeaking = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseActivelySpeaking);
        if (object.activelySpeaking !== undefined && object.activelySpeaking !== null) {
            message.activelySpeaking = Boolean(object.activelySpeaking);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.activelySpeaking !== undefined && (obj.activelySpeaking = message.activelySpeaking);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseActivelySpeaking);
        if (object.activelySpeaking !== undefined && object.activelySpeaking !== null) {
            message.activelySpeaking = object.activelySpeaking;
        }
        return message;
    }
};
var baseEnterWhisper = { recipientId: "", dir: 0 };
exports.EnterWhisper = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.recipientId !== "") {
            writer.uint32(10).string(message.recipientId);
        }
        if (message.dir !== 0) {
            writer.uint32(16).int32(message.dir);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseEnterWhisper);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recipientId = reader.string();
                    break;
                case 2:
                    message.dir = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseEnterWhisper);
        if (object.recipientId !== undefined && object.recipientId !== null) {
            message.recipientId = String(object.recipientId);
        }
        if (object.dir !== undefined && object.dir !== null) {
            message.dir = moveDirectionEnum_ENUMFromJSON(object.dir);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.recipientId !== undefined && (obj.recipientId = message.recipientId);
        message.dir !== undefined && (obj.dir = moveDirectionEnum_ENUMToJSON(message.dir));
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseEnterWhisper);
        if (object.recipientId !== undefined && object.recipientId !== null) {
            message.recipientId = object.recipientId;
        }
        if (object.dir !== undefined && object.dir !== null) {
            message.dir = object.dir;
        }
        return message;
    }
};
var baseLeaveWhisper = {};
exports.LeaveWhisper = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseLeaveWhisper);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = __assign({}, baseLeaveWhisper);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseLeaveWhisper);
        return message;
    }
};
var baseGhost = { ghost: 0 };
exports.Ghost = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.ghost !== 0) {
            writer.uint32(8).uint32(message.ghost);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseGhost);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.ghost = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseGhost);
        if (object.ghost !== undefined && object.ghost !== null) {
            message.ghost = Number(object.ghost);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.ghost !== undefined && (obj.ghost = message.ghost);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseGhost);
        if (object.ghost !== undefined && object.ghost !== null) {
            message.ghost = object.ghost;
        }
        return message;
    }
};
var baseSetEmote = { emote: 0 };
exports.SetEmote = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.emote !== 0) {
            writer.uint32(8).int32(message.emote);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetEmote);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.emote = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetEmote);
        if (object.emote !== undefined && object.emote !== null) {
            message.emote = emoteEnum_ENUMFromJSON(object.emote);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.emote !== undefined && (obj.emote = emoteEnum_ENUMToJSON(message.emote));
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetEmote);
        if (object.emote !== undefined && object.emote !== null) {
            message.emote = object.emote;
        }
        return message;
    }
};
var baseSetName = { name: "" };
exports.SetName = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetName);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetName);
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetName);
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        return message;
    }
};
var baseSetTextStatus = { textStatus: "" };
exports.SetTextStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.textStatus !== "") {
            writer.uint32(10).string(message.textStatus);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetTextStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.textStatus = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetTextStatus);
        if (object.textStatus !== undefined && object.textStatus !== null) {
            message.textStatus = String(object.textStatus);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.textStatus !== undefined && (obj.textStatus = message.textStatus);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetTextStatus);
        if (object.textStatus !== undefined && object.textStatus !== null) {
            message.textStatus = object.textStatus;
        }
        return message;
    }
};
var baseExit = {};
exports.Exit = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseExit);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = __assign({}, baseExit);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseExit);
        return message;
    }
};
var baseEnter = {};
exports.Enter = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.info !== undefined) {
            exports.SpaceUserInfo.encode(message.info, writer.uint32(10).fork()).ldelim();
        }
        if (message.spawnToken !== undefined) {
            writer.uint32(18).string(message.spawnToken);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseEnter);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.info = exports.SpaceUserInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.spawnToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseEnter);
        if (object.info !== undefined && object.info !== null) {
            message.info = exports.SpaceUserInfo.fromJSON(object.info);
        }
        if (object.spawnToken !== undefined && object.spawnToken !== null) {
            message.spawnToken = String(object.spawnToken);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.info !== undefined &&
            (obj.info = message.info ? exports.SpaceUserInfo.toJSON(message.info) : undefined);
        message.spawnToken !== undefined && (obj.spawnToken = message.spawnToken);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseEnter);
        if (object.info !== undefined && object.info !== null) {
            message.info = exports.SpaceUserInfo.fromPartial(object.info);
        }
        if (object.spawnToken !== undefined && object.spawnToken !== null) {
            message.spawnToken = object.spawnToken;
        }
        return message;
    }
};
var baseSetEmojiStatus = { emojiStatus: "" };
exports.SetEmojiStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.emojiStatus !== "") {
            writer.uint32(10).string(message.emojiStatus);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetEmojiStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.emojiStatus = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetEmojiStatus);
        if (object.emojiStatus !== undefined && object.emojiStatus !== null) {
            message.emojiStatus = String(object.emojiStatus);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.emojiStatus !== undefined && (obj.emojiStatus = message.emojiStatus);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetEmojiStatus);
        if (object.emojiStatus !== undefined && object.emojiStatus !== null) {
            message.emojiStatus = object.emojiStatus;
        }
        return message;
    }
};
var baseTeleport = { mapId: "", x: 0, y: 0 };
exports.Teleport = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.x !== 0) {
            writer.uint32(16).uint32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(24).uint32(message.y);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseTeleport);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.x = reader.uint32();
                    break;
                case 3:
                    message.y = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseTeleport);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = String(object.mapId);
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = Number(object.x);
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = Number(object.y);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.mapId !== undefined && (obj.mapId = message.mapId);
        message.x !== undefined && (obj.x = message.x);
        message.y !== undefined && (obj.y = message.y);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseTeleport);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = object.mapId;
        }
        if (object.x !== undefined && object.x !== null) {
            message.x = object.x;
        }
        if (object.y !== undefined && object.y !== null) {
            message.y = object.y;
        }
        return message;
    }
};
var baseSetWorkCondition = { workCondition: false };
exports.SetWorkCondition = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.workCondition === true) {
            writer.uint32(8).bool(message.workCondition);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetWorkCondition);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.workCondition = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetWorkCondition);
        if (object.workCondition !== undefined && object.workCondition !== null) {
            message.workCondition = Boolean(object.workCondition);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.workCondition !== undefined && (obj.workCondition = message.workCondition);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetWorkCondition);
        if (object.workCondition !== undefined && object.workCondition !== null) {
            message.workCondition = object.workCondition;
        }
        return message;
    }
};
var baseSpawn = { spawnToken: "" };
exports.Spawn = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spawnToken !== "") {
            writer.uint32(10).string(message.spawnToken);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSpawn);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spawnToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSpawn);
        if (object.spawnToken !== undefined && object.spawnToken !== null) {
            message.spawnToken = String(object.spawnToken);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.spawnToken !== undefined && (obj.spawnToken = message.spawnToken);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSpawn);
        if (object.spawnToken !== undefined && object.spawnToken !== null) {
            message.spawnToken = object.spawnToken;
        }
        return message;
    }
};
var baseRespawn = {};
exports.Respawn = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spaceUserInfo !== undefined) {
            exports.SpaceUserInfo.encode(message.spaceUserInfo, writer.uint32(10).fork()).ldelim();
        }
        if (message.spawnToken !== undefined) {
            writer.uint32(18).string(message.spawnToken);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseRespawn);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spaceUserInfo = exports.SpaceUserInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.spawnToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseRespawn);
        if (object.spaceUserInfo !== undefined && object.spaceUserInfo !== null) {
            message.spaceUserInfo = exports.SpaceUserInfo.fromJSON(object.spaceUserInfo);
        }
        if (object.spawnToken !== undefined && object.spawnToken !== null) {
            message.spawnToken = String(object.spawnToken);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.spaceUserInfo !== undefined &&
            (obj.spaceUserInfo = message.spaceUserInfo
                ? exports.SpaceUserInfo.toJSON(message.spaceUserInfo)
                : undefined);
        message.spawnToken !== undefined && (obj.spawnToken = message.spawnToken);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseRespawn);
        if (object.spaceUserInfo !== undefined && object.spaceUserInfo !== null) {
            message.spaceUserInfo = exports.SpaceUserInfo.fromPartial(object.spaceUserInfo);
        }
        if (object.spawnToken !== undefined && object.spawnToken !== null) {
            message.spawnToken = object.spawnToken;
        }
        return message;
    }
};
var baseInit = { spaceId: "" };
exports.Init = {
    encode: function (message, writer) {
        var _a, _b;
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.spaceId !== "") {
            writer.uint32(10).string(message.spaceId);
        }
        if (((_a = message.auth) === null || _a === void 0 ? void 0 : _a.$case) === "token") {
            writer.uint32(18).string(message.auth.token);
        }
        if (((_b = message.auth) === null || _b === void 0 ? void 0 : _b.$case) === "apiKey") {
            writer.uint32(26).string(message.auth.apiKey);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseInit);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spaceId = reader.string();
                    break;
                case 2:
                    message.auth = { $case: "token", token: reader.string() };
                    break;
                case 3:
                    message.auth = { $case: "apiKey", apiKey: reader.string() };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseInit);
        if (object.spaceId !== undefined && object.spaceId !== null) {
            message.spaceId = String(object.spaceId);
        }
        if (object.token !== undefined && object.token !== null) {
            message.auth = { $case: "token", token: String(object.token) };
        }
        if (object.apiKey !== undefined && object.apiKey !== null) {
            message.auth = { $case: "apiKey", apiKey: String(object.apiKey) };
        }
        return message;
    },
    toJSON: function (message) {
        var _a, _b, _c, _d;
        var obj = {};
        message.spaceId !== undefined && (obj.spaceId = message.spaceId);
        ((_a = message.auth) === null || _a === void 0 ? void 0 : _a.$case) === "token" && (obj.token = (_b = message.auth) === null || _b === void 0 ? void 0 : _b.token);
        ((_c = message.auth) === null || _c === void 0 ? void 0 : _c.$case) === "apiKey" && (obj.apiKey = (_d = message.auth) === null || _d === void 0 ? void 0 : _d.apiKey);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = __assign({}, baseInit);
        if (object.spaceId !== undefined && object.spaceId !== null) {
            message.spaceId = object.spaceId;
        }
        if (((_a = object.auth) === null || _a === void 0 ? void 0 : _a.$case) === "token" &&
            ((_b = object.auth) === null || _b === void 0 ? void 0 : _b.token) !== undefined &&
            ((_c = object.auth) === null || _c === void 0 ? void 0 : _c.token) !== null) {
            message.auth = { $case: "token", token: object.auth.token };
        }
        if (((_d = object.auth) === null || _d === void 0 ? void 0 : _d.$case) === "apiKey" &&
            ((_e = object.auth) === null || _e === void 0 ? void 0 : _e.apiKey) !== undefined &&
            ((_f = object.auth) === null || _f === void 0 ? void 0 : _f.apiKey) !== null) {
            message.auth = { $case: "apiKey", apiKey: object.auth.apiKey };
        }
        return message;
    }
};
var baseMapUpdate = { mapId: "", diffJson: "" };
exports.MapUpdate = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mapId !== "") {
            writer.uint32(10).string(message.mapId);
        }
        if (message.diffJson !== "") {
            writer.uint32(18).string(message.diffJson);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseMapUpdate);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mapId = reader.string();
                    break;
                case 2:
                    message.diffJson = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseMapUpdate);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = String(object.mapId);
        }
        if (object.diffJson !== undefined && object.diffJson !== null) {
            message.diffJson = String(object.diffJson);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.mapId !== undefined && (obj.mapId = message.mapId);
        message.diffJson !== undefined && (obj.diffJson = message.diffJson);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseMapUpdate);
        if (object.mapId !== undefined && object.mapId !== null) {
            message.mapId = object.mapId;
        }
        if (object.diffJson !== undefined && object.diffJson !== null) {
            message.diffJson = object.diffJson;
        }
        return message;
    }
};
var baseShootConfetti = {};
exports.ShootConfetti = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseShootConfetti);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        var message = __assign({}, baseShootConfetti);
        return message;
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = __assign({}, baseShootConfetti);
        return message;
    }
};
var baseSetEventStatus = { eventStatus: "" };
exports.SetEventStatus = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.eventStatus !== "") {
            writer.uint32(10).string(message.eventStatus);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetEventStatus);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.eventStatus = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetEventStatus);
        if (object.eventStatus !== undefined && object.eventStatus !== null) {
            message.eventStatus = String(object.eventStatus);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.eventStatus !== undefined && (obj.eventStatus = message.eventStatus);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetEventStatus);
        if (object.eventStatus !== undefined && object.eventStatus !== null) {
            message.eventStatus = object.eventStatus;
        }
        return message;
    }
};
var baseSetInConversation = { inConversation: false };
exports.SetInConversation = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.inConversation === true) {
            writer.uint32(8).bool(message.inConversation);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetInConversation);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.inConversation = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetInConversation);
        if (object.inConversation !== undefined && object.inConversation !== null) {
            message.inConversation = Boolean(object.inConversation);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.inConversation !== undefined && (obj.inConversation = message.inConversation);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetInConversation);
        if (object.inConversation !== undefined && object.inConversation !== null) {
            message.inConversation = object.inConversation;
        }
        return message;
    }
};
var baseSetCurrentDesk = { currentDesk: "" };
exports.SetCurrentDesk = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.currentDesk !== "") {
            writer.uint32(10).string(message.currentDesk);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetCurrentDesk);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.currentDesk = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetCurrentDesk);
        if (object.currentDesk !== undefined && object.currentDesk !== null) {
            message.currentDesk = String(object.currentDesk);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.currentDesk !== undefined && (obj.currentDesk = message.currentDesk);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetCurrentDesk);
        if (object.currentDesk !== undefined && object.currentDesk !== null) {
            message.currentDesk = object.currentDesk;
        }
        return message;
    }
};
var baseSetCurrentArea = { currentArea: "" };
exports.SetCurrentArea = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.currentArea !== "") {
            writer.uint32(10).string(message.currentArea);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = __assign({}, baseSetCurrentArea);
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.currentArea = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        var message = __assign({}, baseSetCurrentArea);
        if (object.currentArea !== undefined && object.currentArea !== null) {
            message.currentArea = String(object.currentArea);
        }
        return message;
    },
    toJSON: function (message) {
        var obj = {};
        message.currentArea !== undefined && (obj.currentArea = message.currentArea);
        return obj;
    },
    fromPartial: function (object) {
        var message = __assign({}, baseSetCurrentArea);
        if (object.currentArea !== undefined && object.currentArea !== null) {
            message.currentArea = object.currentArea;
        }
        return message;
    }
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
if (minimal_1["default"].util.Long !== long_1["default"]) {
    minimal_1["default"].util.Long = long_1["default"];
    minimal_1["default"].configure();
}
//# sourceMappingURL=events.js.map